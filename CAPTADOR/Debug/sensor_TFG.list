
sensor_TFG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa6c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800abf8  0800abf8  0001abf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aef0  0800aef0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aef0  0800aef0  0001aef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aef8  0800aef8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aef8  0800aef8  0001aef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aefc  0800aefc  0001aefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800af00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  200001e0  0800b0e0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  0800b0e0  000204b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f958  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eed  00000000  00000000  0002fb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  00031a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec0  00000000  00000000  000329e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021c24  00000000  00000000  000338a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b815  00000000  00000000  000554cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d08a6  00000000  00000000  00060ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00131587  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005020  00000000  00000000  00131604  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800abdc 	.word	0x0800abdc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e4 	.word	0x200001e4
 80001c4:	0800abdc 	.word	0x0800abdc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b972 	b.w	8000e9c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9e08      	ldr	r6, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4688      	mov	r8, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14b      	bne.n	8000c76 <__udivmoddi4+0xa6>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4615      	mov	r5, r2
 8000be2:	d967      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0720 	rsb	r7, r2, #32
 8000bee:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf2:	fa20 f707 	lsr.w	r7, r0, r7
 8000bf6:	4095      	lsls	r5, r2
 8000bf8:	ea47 0803 	orr.w	r8, r7, r3
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c08:	fa1f fc85 	uxth.w	ip, r5
 8000c0c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c10:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c14:	fb07 f10c 	mul.w	r1, r7, ip
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18eb      	adds	r3, r5, r3
 8000c1e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c22:	f080 811b 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8118 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c2c:	3f02      	subs	r7, #2
 8000c2e:	442b      	add	r3, r5
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	192c      	adds	r4, r5, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x290>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x290>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	442c      	add	r4, r5
 8000c5c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c60:	eba4 040c 	sub.w	r4, r4, ip
 8000c64:	2700      	movs	r7, #0
 8000c66:	b11e      	cbz	r6, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c70:	4639      	mov	r1, r7
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0xbe>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f000 80eb 	beq.w	8000e56 <__udivmoddi4+0x286>
 8000c80:	2700      	movs	r7, #0
 8000c82:	e9c6 0100 	strd	r0, r1, [r6]
 8000c86:	4638      	mov	r0, r7
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f783 	clz	r7, r3
 8000c92:	2f00      	cmp	r7, #0
 8000c94:	d147      	bne.n	8000d26 <__udivmoddi4+0x156>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xd0>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80fa 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4698      	mov	r8, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d0e0      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000cae:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb2:	e7dd      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000cb4:	b902      	cbnz	r2, 8000cb8 <__udivmoddi4+0xe8>
 8000cb6:	deff      	udf	#255	; 0xff
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	f040 808f 	bne.w	8000de0 <__udivmoddi4+0x210>
 8000cc2:	1b49      	subs	r1, r1, r5
 8000cc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc8:	fa1f f885 	uxth.w	r8, r5
 8000ccc:	2701      	movs	r7, #1
 8000cce:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cd2:	0c23      	lsrs	r3, r4, #16
 8000cd4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x124>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x122>
 8000cec:	4299      	cmp	r1, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cf2:	4684      	mov	ip, r0
 8000cf4:	1a59      	subs	r1, r3, r1
 8000cf6:	b2a3      	uxth	r3, r4
 8000cf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d00:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d04:	fb08 f800 	mul.w	r8, r8, r0
 8000d08:	45a0      	cmp	r8, r4
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x14c>
 8000d0c:	192c      	adds	r4, r5, r4
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x14a>
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	f200 80b6 	bhi.w	8000e86 <__udivmoddi4+0x2b6>
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	eba4 0408 	sub.w	r4, r4, r8
 8000d20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d24:	e79f      	b.n	8000c66 <__udivmoddi4+0x96>
 8000d26:	f1c7 0c20 	rsb	ip, r7, #32
 8000d2a:	40bb      	lsls	r3, r7
 8000d2c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d30:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d34:	fa01 f407 	lsl.w	r4, r1, r7
 8000d38:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d3c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d40:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d44:	4325      	orrs	r5, r4
 8000d46:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d4a:	0c2c      	lsrs	r4, r5, #16
 8000d4c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d50:	fa1f fa8e 	uxth.w	sl, lr
 8000d54:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d58:	fb09 f40a 	mul.w	r4, r9, sl
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d62:	fa00 f107 	lsl.w	r1, r0, r7
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b0>
 8000d68:	eb1e 0303 	adds.w	r3, lr, r3
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d70:	f080 8087 	bcs.w	8000e82 <__udivmoddi4+0x2b2>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f240 8084 	bls.w	8000e82 <__udivmoddi4+0x2b2>
 8000d7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7e:	4473      	add	r3, lr
 8000d80:	1b1b      	subs	r3, r3, r4
 8000d82:	b2ad      	uxth	r5, r5
 8000d84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d88:	fb08 3310 	mls	r3, r8, r0, r3
 8000d8c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d90:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d94:	45a2      	cmp	sl, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1da>
 8000d98:	eb1e 0404 	adds.w	r4, lr, r4
 8000d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da0:	d26b      	bcs.n	8000e7a <__udivmoddi4+0x2aa>
 8000da2:	45a2      	cmp	sl, r4
 8000da4:	d969      	bls.n	8000e7a <__udivmoddi4+0x2aa>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4474      	add	r4, lr
 8000daa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	eba4 040a 	sub.w	r4, r4, sl
 8000db6:	454c      	cmp	r4, r9
 8000db8:	46c2      	mov	sl, r8
 8000dba:	464b      	mov	r3, r9
 8000dbc:	d354      	bcc.n	8000e68 <__udivmoddi4+0x298>
 8000dbe:	d051      	beq.n	8000e64 <__udivmoddi4+0x294>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d069      	beq.n	8000e98 <__udivmoddi4+0x2c8>
 8000dc4:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dcc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd0:	40fd      	lsrs	r5, r7
 8000dd2:	40fc      	lsrs	r4, r7
 8000dd4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd8:	e9c6 5400 	strd	r5, r4, [r6]
 8000ddc:	2700      	movs	r7, #0
 8000dde:	e747      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f703 	lsr.w	r7, r0, r3
 8000de8:	4095      	lsls	r5, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	fa21 f303 	lsr.w	r3, r1, r3
 8000df2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df6:	4338      	orrs	r0, r7
 8000df8:	0c01      	lsrs	r1, r0, #16
 8000dfa:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dfe:	fa1f f885 	uxth.w	r8, r5
 8000e02:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb07 f308 	mul.w	r3, r7, r8
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x256>
 8000e16:	1869      	adds	r1, r5, r1
 8000e18:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e1c:	d22f      	bcs.n	8000e7e <__udivmoddi4+0x2ae>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d92d      	bls.n	8000e7e <__udivmoddi4+0x2ae>
 8000e22:	3f02      	subs	r7, #2
 8000e24:	4429      	add	r1, r5
 8000e26:	1acb      	subs	r3, r1, r3
 8000e28:	b281      	uxth	r1, r0
 8000e2a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb00 f308 	mul.w	r3, r0, r8
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x27e>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e44:	d217      	bcs.n	8000e76 <__udivmoddi4+0x2a6>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d915      	bls.n	8000e76 <__udivmoddi4+0x2a6>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1ac9      	subs	r1, r1, r3
 8000e50:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e54:	e73b      	b.n	8000cce <__udivmoddi4+0xfe>
 8000e56:	4637      	mov	r7, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e709      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e5c:	4607      	mov	r7, r0
 8000e5e:	e6e7      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e60:	4618      	mov	r0, r3
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e64:	4541      	cmp	r1, r8
 8000e66:	d2ab      	bcs.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e68:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e6c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e70:	3801      	subs	r0, #1
 8000e72:	4613      	mov	r3, r2
 8000e74:	e7a4      	b.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e76:	4660      	mov	r0, ip
 8000e78:	e7e9      	b.n	8000e4e <__udivmoddi4+0x27e>
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	e795      	b.n	8000daa <__udivmoddi4+0x1da>
 8000e7e:	4667      	mov	r7, ip
 8000e80:	e7d1      	b.n	8000e26 <__udivmoddi4+0x256>
 8000e82:	4681      	mov	r9, r0
 8000e84:	e77c      	b.n	8000d80 <__udivmoddi4+0x1b0>
 8000e86:	3802      	subs	r0, #2
 8000e88:	442c      	add	r4, r5
 8000e8a:	e747      	b.n	8000d1c <__udivmoddi4+0x14c>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	442b      	add	r3, r5
 8000e92:	e72f      	b.n	8000cf4 <__udivmoddi4+0x124>
 8000e94:	4638      	mov	r0, r7
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xda>
 8000e98:	4637      	mov	r7, r6
 8000e9a:	e6e9      	b.n	8000c70 <__udivmoddi4+0xa0>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MPU6050_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int MPU6050_Init (I2C_HandleTypeDef hi2c)
{
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af04      	add	r7, sp, #16
 8000ea8:	f107 0c10 	add.w	ip, r7, #16
 8000eac:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t check;
		uint8_t Data;

		// check device ID WHO_AM_I
		Data = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	71bb      	strb	r3, [r7, #6]
		check= 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	71fb      	strb	r3, [r7, #7]
		HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	9302      	str	r3, [sp, #8]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	1dbb      	adds	r3, r7, #6
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	226b      	movs	r2, #107	; 0x6b
 8000eca:	21d0      	movs	r1, #208	; 0xd0
 8000ecc:	f107 0010 	add.w	r0, r7, #16
 8000ed0:	f002 fb1e 	bl	8003510 <HAL_I2C_Mem_Write>

		HAL_I2C_Mem_Read (&hi2c, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000ed4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed8:	9302      	str	r3, [sp, #8]
 8000eda:	2301      	movs	r3, #1
 8000edc:	9301      	str	r3, [sp, #4]
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	2275      	movs	r2, #117	; 0x75
 8000ee6:	21d0      	movs	r1, #208	; 0xd0
 8000ee8:	f107 0010 	add.w	r0, r7, #16
 8000eec:	f002 fc0a 	bl	8003704 <HAL_I2C_Mem_Read>

		if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b68      	cmp	r3, #104	; 0x68
 8000ef4:	d131      	bne.n	8000f5a <MPU6050_Init+0xba>
		{
			// power management register 0X6B we should write all 0's to wake the sensor up


			// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
			Data = 0x07;
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	2301      	movs	r3, #1
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	1dbb      	adds	r3, r7, #6
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	2219      	movs	r2, #25
 8000f0c:	21d0      	movs	r1, #208	; 0xd0
 8000f0e:	f107 0010 	add.w	r0, r7, #16
 8000f12:	f002 fafd 	bl	8003510 <HAL_I2C_Mem_Write>

			// Set accelerometer configuration in ACCEL_CONFIG Register
			// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
			Data = 0x00;
 8000f16:	2300      	movs	r3, #0
 8000f18:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	9302      	str	r3, [sp, #8]
 8000f20:	2301      	movs	r3, #1
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	1dbb      	adds	r3, r7, #6
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	221c      	movs	r2, #28
 8000f2c:	21d0      	movs	r1, #208	; 0xd0
 8000f2e:	f107 0010 	add.w	r0, r7, #16
 8000f32:	f002 faed 	bl	8003510 <HAL_I2C_Mem_Write>

			// Set Gyroscopic configuration in GYRO_CONFIG Register
			// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
			Data = 0x00;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	2301      	movs	r3, #1
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	1dbb      	adds	r3, r7, #6
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	221b      	movs	r2, #27
 8000f4c:	21d0      	movs	r1, #208	; 0xd0
 8000f4e:	f107 0010 	add.w	r0, r7, #16
 8000f52:	f002 fadd 	bl	8003510 <HAL_I2C_Mem_Write>
			return 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <MPU6050_Init+0xbc>
		}
 return 0;
 8000f5a:	2300      	movs	r3, #0
	}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f66:	b004      	add	sp, #16
 8000f68:	4770      	bx	lr
	...

08000f6c <MPU6050_Read_Accel>:

Accel MPU6050_Read_Accel (int selector)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b0a9      	sub	sp, #164	; 0xa4
 8000f70:	af04      	add	r7, sp, #16
 8000f72:	6178      	str	r0, [r7, #20]
	uint8_t Rec_Data[6];
Accel lectura;

I2C_HandleTypeDef hi2c;

if (selector == 1) hi2c = hi2c1;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d107      	bne.n	8000f8a <MPU6050_Read_Accel+0x1e>
 8000f7a:	4a4c      	ldr	r2, [pc, #304]	; (80010ac <MPU6050_Read_Accel+0x140>)
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4611      	mov	r1, r2
 8000f82:	2254      	movs	r2, #84	; 0x54
 8000f84:	4618      	mov	r0, r3
 8000f86:	f006 fd09 	bl	800799c <memcpy>
if (selector == 2) hi2c = hi2c2;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d107      	bne.n	8000fa0 <MPU6050_Read_Accel+0x34>
 8000f90:	4a47      	ldr	r2, [pc, #284]	; (80010b0 <MPU6050_Read_Accel+0x144>)
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4611      	mov	r1, r2
 8000f98:	2254      	movs	r2, #84	; 0x54
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f006 fcfe 	bl	800799c <memcpy>

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000fa0:	f107 001c 	add.w	r0, r7, #28
 8000fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2306      	movs	r3, #6
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	223b      	movs	r2, #59	; 0x3b
 8000fb8:	21d0      	movs	r1, #208	; 0xd0
 8000fba:	f002 fba3 	bl	8003704 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000fbe:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	4b38      	ldr	r3, [pc, #224]	; (80010b4 <MPU6050_Read_Accel+0x148>)
 8000fd2:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000fd4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <MPU6050_Read_Accel+0x14c>)
 8000fe8:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000fea:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <MPU6050_Read_Accel+0x150>)
 8000ffe:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	lectura.Ax = Accel_X_RAW/16384.0;
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <MPU6050_Read_Accel+0x148>)
 8001002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fa38 	bl	800047c <__aeabi_i2d>
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <MPU6050_Read_Accel+0x154>)
 8001012:	f7ff fbc7 	bl	80007a4 <__aeabi_ddiv>
 8001016:	4603      	mov	r3, r0
 8001018:	460c      	mov	r4, r1
 800101a:	4618      	mov	r0, r3
 800101c:	4621      	mov	r1, r4
 800101e:	f7ff fd6f 	bl	8000b00 <__aeabi_d2f>
 8001022:	4603      	mov	r3, r0
 8001024:	673b      	str	r3, [r7, #112]	; 0x70
	lectura.Ay = Accel_Y_RAW/16384.0;
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <MPU6050_Read_Accel+0x14c>)
 8001028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa25 	bl	800047c <__aeabi_i2d>
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <MPU6050_Read_Accel+0x154>)
 8001038:	f7ff fbb4 	bl	80007a4 <__aeabi_ddiv>
 800103c:	4603      	mov	r3, r0
 800103e:	460c      	mov	r4, r1
 8001040:	4618      	mov	r0, r3
 8001042:	4621      	mov	r1, r4
 8001044:	f7ff fd5c 	bl	8000b00 <__aeabi_d2f>
 8001048:	4603      	mov	r3, r0
 800104a:	677b      	str	r3, [r7, #116]	; 0x74
	lectura.Az = Accel_Z_RAW/16384.0;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MPU6050_Read_Accel+0x150>)
 800104e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fa12 	bl	800047c <__aeabi_i2d>
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MPU6050_Read_Accel+0x154>)
 800105e:	f7ff fba1 	bl	80007a4 <__aeabi_ddiv>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	4618      	mov	r0, r3
 8001068:	4621      	mov	r1, r4
 800106a:	f7ff fd49 	bl	8000b00 <__aeabi_d2f>
 800106e:	4603      	mov	r3, r0
 8001070:	67bb      	str	r3, [r7, #120]	; 0x78
	return lectura;
 8001072:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001076:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800107a:	ca07      	ldmia	r2, {r0, r1, r2}
 800107c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001080:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001084:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800108c:	ee06 1a90 	vmov	s13, r1
 8001090:	ee07 2a10 	vmov	s14, r2
 8001094:	ee07 3a90 	vmov	s15, r3
}
 8001098:	eeb0 0a66 	vmov.f32	s0, s13
 800109c:	eef0 0a47 	vmov.f32	s1, s14
 80010a0:	eeb0 1a67 	vmov.f32	s2, s15
 80010a4:	3794      	adds	r7, #148	; 0x94
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000294 	.word	0x20000294
 80010b0:	200002ec 	.word	0x200002ec
 80010b4:	200001fc 	.word	0x200001fc
 80010b8:	200001fe 	.word	0x200001fe
 80010bc:	20000200 	.word	0x20000200
 80010c0:	40d00000 	.word	0x40d00000
 80010c4:	00000000 	.word	0x00000000

080010c8 <MPU6050_Read_Gyro>:


Gyro MPU6050_Read_Gyro (int selector)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b0a9      	sub	sp, #164	; 0xa4
 80010cc:	af04      	add	r7, sp, #16
 80010ce:	6178      	str	r0, [r7, #20]
Gyro lectura;
	uint8_t Rec_Data[6];
	I2C_HandleTypeDef hi2c;

	if (selector == 1) hi2c = hi2c1;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d107      	bne.n	80010e6 <MPU6050_Read_Gyro+0x1e>
 80010d6:	4a4e      	ldr	r2, [pc, #312]	; (8001210 <MPU6050_Read_Gyro+0x148>)
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4611      	mov	r1, r2
 80010de:	2254      	movs	r2, #84	; 0x54
 80010e0:	4618      	mov	r0, r3
 80010e2:	f006 fc5b 	bl	800799c <memcpy>
	if (selector == 2) hi2c = hi2c2;
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d107      	bne.n	80010fc <MPU6050_Read_Gyro+0x34>
 80010ec:	4a49      	ldr	r2, [pc, #292]	; (8001214 <MPU6050_Read_Gyro+0x14c>)
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4611      	mov	r1, r2
 80010f4:	2254      	movs	r2, #84	; 0x54
 80010f6:	4618      	mov	r0, r3
 80010f8:	f006 fc50 	bl	800799c <memcpy>
	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80010fc:	f107 001c 	add.w	r0, r7, #28
 8001100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	2306      	movs	r3, #6
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	2243      	movs	r2, #67	; 0x43
 8001114:	21d0      	movs	r1, #208	; 0xd0
 8001116:	f002 faf5 	bl	8003704 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800111a:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001126:	b21b      	sxth	r3, r3
 8001128:	4313      	orrs	r3, r2
 800112a:	b21a      	sxth	r2, r3
 800112c:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <MPU6050_Read_Gyro+0x150>)
 800112e:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001130:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21a      	sxth	r2, r3
 8001138:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800113c:	b21b      	sxth	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b21a      	sxth	r2, r3
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <MPU6050_Read_Gyro+0x154>)
 8001144:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001146:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	b21a      	sxth	r2, r3
 800114e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b21a      	sxth	r2, r3
 8001158:	4b31      	ldr	r3, [pc, #196]	; (8001220 <MPU6050_Read_Gyro+0x158>)
 800115a:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	lectura.Gx = Gyro_X_RAW/131.0;
 800115c:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <MPU6050_Read_Gyro+0x150>)
 800115e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f98a 	bl	800047c <__aeabi_i2d>
 8001168:	a327      	add	r3, pc, #156	; (adr r3, 8001208 <MPU6050_Read_Gyro+0x140>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff fb19 	bl	80007a4 <__aeabi_ddiv>
 8001172:	4603      	mov	r3, r0
 8001174:	460c      	mov	r4, r1
 8001176:	4618      	mov	r0, r3
 8001178:	4621      	mov	r1, r4
 800117a:	f7ff fcc1 	bl	8000b00 <__aeabi_d2f>
 800117e:	4603      	mov	r3, r0
 8001180:	67bb      	str	r3, [r7, #120]	; 0x78
	lectura.Gy = Gyro_Y_RAW/131.0;
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <MPU6050_Read_Gyro+0x154>)
 8001184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f977 	bl	800047c <__aeabi_i2d>
 800118e:	a31e      	add	r3, pc, #120	; (adr r3, 8001208 <MPU6050_Read_Gyro+0x140>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff fb06 	bl	80007a4 <__aeabi_ddiv>
 8001198:	4603      	mov	r3, r0
 800119a:	460c      	mov	r4, r1
 800119c:	4618      	mov	r0, r3
 800119e:	4621      	mov	r1, r4
 80011a0:	f7ff fcae 	bl	8000b00 <__aeabi_d2f>
 80011a4:	4603      	mov	r3, r0
 80011a6:	67fb      	str	r3, [r7, #124]	; 0x7c
	lectura.Gz = Gyro_Z_RAW/131.0;
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <MPU6050_Read_Gyro+0x158>)
 80011aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f964 	bl	800047c <__aeabi_i2d>
 80011b4:	a314      	add	r3, pc, #80	; (adr r3, 8001208 <MPU6050_Read_Gyro+0x140>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff faf3 	bl	80007a4 <__aeabi_ddiv>
 80011be:	4603      	mov	r3, r0
 80011c0:	460c      	mov	r4, r1
 80011c2:	4618      	mov	r0, r3
 80011c4:	4621      	mov	r1, r4
 80011c6:	f7ff fc9b 	bl	8000b00 <__aeabi_d2f>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

return lectura;
 80011d0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80011d4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80011d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80011da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011de:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80011e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80011e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80011ea:	ee06 1a90 	vmov	s13, r1
 80011ee:	ee07 2a10 	vmov	s14, r2
 80011f2:	ee07 3a90 	vmov	s15, r3
}
 80011f6:	eeb0 0a66 	vmov.f32	s0, s13
 80011fa:	eef0 0a47 	vmov.f32	s1, s14
 80011fe:	eeb0 1a67 	vmov.f32	s2, s15
 8001202:	3794      	adds	r7, #148	; 0x94
 8001204:	46bd      	mov	sp, r7
 8001206:	bd90      	pop	{r4, r7, pc}
 8001208:	00000000 	.word	0x00000000
 800120c:	40606000 	.word	0x40606000
 8001210:	20000294 	.word	0x20000294
 8001214:	200002ec 	.word	0x200002ec
 8001218:	20000202 	.word	0x20000202
 800121c:	20000204 	.word	0x20000204
 8001220:	20000206 	.word	0x20000206
 8001224:	00000000 	.word	0x00000000

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800122c:	b0ad      	sub	sp, #180	; 0xb4
 800122e:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN 1 */
int start = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	667b      	str	r3, [r7, #100]	; 0x64
mpu1.hi2c= 1;
 8001234:	4b31      	ldr	r3, [pc, #196]	; (80012fc <main+0xd4>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]
mpu2.hi2c= 2;
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <main+0xd8>)
 800123c:	2202      	movs	r2, #2
 800123e:	601a      	str	r2, [r3, #0]

mpu1.offsetY =  2.579;
 8001240:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <main+0xd4>)
 8001242:	4a30      	ldr	r2, [pc, #192]	; (8001304 <main+0xdc>)
 8001244:	621a      	str	r2, [r3, #32]
mpu1.offsetx =  0.3;
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <main+0xd4>)
 8001248:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <main+0xe0>)
 800124a:	61da      	str	r2, [r3, #28]

mpu2.offsetY =  -3;
 800124c:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <main+0xd8>)
 800124e:	4a2f      	ldr	r2, [pc, #188]	; (800130c <main+0xe4>)
 8001250:	621a      	str	r2, [r3, #32]
mpu2.offsetx = 0;
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <main+0xd8>)
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	61da      	str	r2, [r3, #28]


//valores stadisticos
	float desv_tipica = 2.0231;
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <main+0xe8>)
 800125c:	65fb      	str	r3, [r7, #92]	; 0x5c
	float desv_estado = 2.0231;
 800125e:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <main+0xe8>)
 8001260:	65bb      	str	r3, [r7, #88]	; 0x58
	float var = desv_tipica*desv_tipica;
 8001262:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001266:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800126a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float var_estado = desv_estado*desv_estado;
 8001272:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001276:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800127a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	float P = var_estado;
 8001282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001284:	663b      	str	r3, [r7, #96]	; 0x60

	float P_previa;


	char info_real[32], info_kalman[32];
		char ln[] = "\n\r";
 8001286:	4a23      	ldr	r2, [pc, #140]	; (8001314 <main+0xec>)
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	4611      	mov	r1, r2
 800128e:	8019      	strh	r1, [r3, #0]
 8001290:	3302      	adds	r3, #2
 8001292:	0c12      	lsrs	r2, r2, #16
 8001294:	701a      	strb	r2, [r3, #0]
		char comma[] = ",";
 8001296:	232c      	movs	r3, #44	; 0x2c
 8001298:	803b      	strh	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129a:	f001 f8f9 	bl	8002490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129e:	f000 fc83 	bl	8001ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f000 fe1d 	bl	8001ee0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012a6:	f000 fd3b 	bl	8001d20 <MX_I2C1_Init>
  MX_TIM4_Init();
 80012aa:	f000 fd95 	bl	8001dd8 <MX_TIM4_Init>
  MX_UART5_Init();
 80012ae:	f000 fded 	bl	8001e8c <MX_UART5_Init>
  MX_ADC1_Init();
 80012b2:	f000 fce3 	bl	8001c7c <MX_ADC1_Init>
  MX_I2C2_Init();
 80012b6:	f000 fd61 	bl	8001d7c <MX_I2C2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	while(start == 0){
 80012ba:	e033      	b.n	8001324 <main+0xfc>
		 start = MPU6050_Init(hi2c1) && MPU6050_Init(hi2c2);
 80012bc:	4c16      	ldr	r4, [pc, #88]	; (8001318 <main+0xf0>)
 80012be:	4668      	mov	r0, sp
 80012c0:	f104 0310 	add.w	r3, r4, #16
 80012c4:	2244      	movs	r2, #68	; 0x44
 80012c6:	4619      	mov	r1, r3
 80012c8:	f006 fb68 	bl	800799c <memcpy>
 80012cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012d0:	f7ff fde6 	bl	8000ea0 <MPU6050_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d022      	beq.n	8001320 <main+0xf8>
 80012da:	4c10      	ldr	r4, [pc, #64]	; (800131c <main+0xf4>)
 80012dc:	4668      	mov	r0, sp
 80012de:	f104 0310 	add.w	r3, r4, #16
 80012e2:	2244      	movs	r2, #68	; 0x44
 80012e4:	4619      	mov	r1, r3
 80012e6:	f006 fb59 	bl	800799c <memcpy>
 80012ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012ee:	f7ff fdd7 	bl	8000ea0 <MPU6050_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d013      	beq.n	8001320 <main+0xf8>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e012      	b.n	8001322 <main+0xfa>
 80012fc:	20000480 	.word	0x20000480
 8001300:	20000348 	.word	0x20000348
 8001304:	40250e56 	.word	0x40250e56
 8001308:	3e99999a 	.word	0x3e99999a
 800130c:	c0400000 	.word	0xc0400000
 8001310:	40017a78 	.word	0x40017a78
 8001314:	0800abf8 	.word	0x0800abf8
 8001318:	20000294 	.word	0x20000294
 800131c:	200002ec 	.word	0x200002ec
 8001320:	2300      	movs	r3, #0
 8001322:	667b      	str	r3, [r7, #100]	; 0x64
	while(start == 0){
 8001324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0c8      	beq.n	80012bc <main+0x94>

	  // read the Accelerometer and Gyro values and tranform into angles


	// 	  MPU6050_Read_Accel(hi2c2,Ax1,Ay1,Az1); // error AL asignar? proque no coge las void
		 mpu2.MPUaccel = MPU6050_Read_Accel(mpu2.hi2c);
 800132a:	4bdd      	ldr	r3, [pc, #884]	; (80016a0 <main+0x478>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4cdc      	ldr	r4, [pc, #880]	; (80016a0 <main+0x478>)
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe1b 	bl	8000f6c <MPU6050_Read_Accel>
 8001336:	eef0 6a40 	vmov.f32	s13, s0
 800133a:	eeb0 7a60 	vmov.f32	s14, s1
 800133e:	eef0 7a41 	vmov.f32	s15, s2
 8001342:	edc4 6a04 	vstr	s13, [r4, #16]
 8001346:	ed84 7a05 	vstr	s14, [r4, #20]
 800134a:	edc4 7a06 	vstr	s15, [r4, #24]

		 // Ax1 = Ax;
		 // Ay1 = Ay;
		 // Az1 = Az;
		 mpu1.MPUaccel =  MPU6050_Read_Accel(mpu1.hi2c);
 800134e:	4bd5      	ldr	r3, [pc, #852]	; (80016a4 <main+0x47c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4cd4      	ldr	r4, [pc, #848]	; (80016a4 <main+0x47c>)
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fe09 	bl	8000f6c <MPU6050_Read_Accel>
 800135a:	eef0 6a40 	vmov.f32	s13, s0
 800135e:	eeb0 7a60 	vmov.f32	s14, s1
 8001362:	eef0 7a41 	vmov.f32	s15, s2
 8001366:	edc4 6a04 	vstr	s13, [r4, #16]
 800136a:	ed84 7a05 	vstr	s14, [r4, #20]
 800136e:	edc4 7a06 	vstr	s15, [r4, #24]
			//Ax2 = Ax;
		//	Ay2 = Ay;
		//	 Az2 = Az;

	 	mpu2.MPUgyro =   MPU6050_Read_Gyro(mpu2.hi2c);
 8001372:	4bcb      	ldr	r3, [pc, #812]	; (80016a0 <main+0x478>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4cca      	ldr	r4, [pc, #808]	; (80016a0 <main+0x478>)
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fea5 	bl	80010c8 <MPU6050_Read_Gyro>
 800137e:	eef0 6a40 	vmov.f32	s13, s0
 8001382:	eeb0 7a60 	vmov.f32	s14, s1
 8001386:	eef0 7a41 	vmov.f32	s15, s2
 800138a:	edc4 6a01 	vstr	s13, [r4, #4]
 800138e:	ed84 7a02 	vstr	s14, [r4, #8]
 8001392:	edc4 7a03 	vstr	s15, [r4, #12]
	 	//  Gx1 = Gx;
	 	//  Gy1 = Gy;
	 	//  Gz1 = Gz;
	 	mpu1.MPUgyro = MPU6050_Read_Gyro(mpu1.hi2c);
 8001396:	4bc3      	ldr	r3, [pc, #780]	; (80016a4 <main+0x47c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4cc2      	ldr	r4, [pc, #776]	; (80016a4 <main+0x47c>)
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fe93 	bl	80010c8 <MPU6050_Read_Gyro>
 80013a2:	eef0 6a40 	vmov.f32	s13, s0
 80013a6:	eeb0 7a60 	vmov.f32	s14, s1
 80013aa:	eef0 7a41 	vmov.f32	s15, s2
 80013ae:	edc4 6a01 	vstr	s13, [r4, #4]
 80013b2:	ed84 7a02 	vstr	s14, [r4, #8]
 80013b6:	edc4 7a03 	vstr	s15, [r4, #12]
	 	//	 	  Gx2 = Gx;
	 	//	 	  Gy2 = Gy;
	 	//	 	  Gz2 = Gz;

accel_x1= atan(mpu1.MPUaccel.Ay/sqrt(pow(mpu1.MPUaccel.Ax,2) + pow(mpu1.MPUaccel.Az,2)))*(180.0/3.14);
 80013ba:	4bba      	ldr	r3, [pc, #744]	; (80016a4 <main+0x47c>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f86e 	bl	80004a0 <__aeabi_f2d>
 80013c4:	4680      	mov	r8, r0
 80013c6:	4689      	mov	r9, r1
 80013c8:	4bb6      	ldr	r3, [pc, #728]	; (80016a4 <main+0x47c>)
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f867 	bl	80004a0 <__aeabi_f2d>
 80013d2:	4603      	mov	r3, r0
 80013d4:	460c      	mov	r4, r1
 80013d6:	ed9f 1bae 	vldr	d1, [pc, #696]	; 8001690 <main+0x468>
 80013da:	ec44 3b10 	vmov	d0, r3, r4
 80013de:	f008 fb59 	bl	8009a94 <pow>
 80013e2:	ec5b ab10 	vmov	sl, fp, d0
 80013e6:	4baf      	ldr	r3, [pc, #700]	; (80016a4 <main+0x47c>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f858 	bl	80004a0 <__aeabi_f2d>
 80013f0:	4603      	mov	r3, r0
 80013f2:	460c      	mov	r4, r1
 80013f4:	ed9f 1ba6 	vldr	d1, [pc, #664]	; 8001690 <main+0x468>
 80013f8:	ec44 3b10 	vmov	d0, r3, r4
 80013fc:	f008 fb4a 	bl	8009a94 <pow>
 8001400:	ec54 3b10 	vmov	r3, r4, d0
 8001404:	461a      	mov	r2, r3
 8001406:	4623      	mov	r3, r4
 8001408:	4650      	mov	r0, sl
 800140a:	4659      	mov	r1, fp
 800140c:	f7fe feea 	bl	80001e4 <__adddf3>
 8001410:	4603      	mov	r3, r0
 8001412:	460c      	mov	r4, r1
 8001414:	ec44 3b17 	vmov	d7, r3, r4
 8001418:	eeb0 0a47 	vmov.f32	s0, s14
 800141c:	eef0 0a67 	vmov.f32	s1, s15
 8001420:	f008 fca8 	bl	8009d74 <sqrt>
 8001424:	ec54 3b10 	vmov	r3, r4, d0
 8001428:	461a      	mov	r2, r3
 800142a:	4623      	mov	r3, r4
 800142c:	4640      	mov	r0, r8
 800142e:	4649      	mov	r1, r9
 8001430:	f7ff f9b8 	bl	80007a4 <__aeabi_ddiv>
 8001434:	4603      	mov	r3, r0
 8001436:	460c      	mov	r4, r1
 8001438:	ec44 3b17 	vmov	d7, r3, r4
 800143c:	eeb0 0a47 	vmov.f32	s0, s14
 8001440:	eef0 0a67 	vmov.f32	s1, s15
 8001444:	f008 f97c 	bl	8009740 <atan>
 8001448:	ec51 0b10 	vmov	r0, r1, d0
 800144c:	a392      	add	r3, pc, #584	; (adr r3, 8001698 <main+0x470>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	f7ff f87d 	bl	8000550 <__aeabi_dmul>
 8001456:	4603      	mov	r3, r0
 8001458:	460c      	mov	r4, r1
 800145a:	4618      	mov	r0, r3
 800145c:	4621      	mov	r1, r4
 800145e:	f7ff fb4f 	bl	8000b00 <__aeabi_d2f>
 8001462:	4602      	mov	r2, r0
 8001464:	4b90      	ldr	r3, [pc, #576]	; (80016a8 <main+0x480>)
 8001466:	601a      	str	r2, [r3, #0]
accel_y1=atan(-mpu1.MPUaccel.Ax/sqrt(pow(mpu1.MPUaccel.Ay,2) + pow(mpu1.MPUaccel.Az,2)))*(180.0/3.14);
 8001468:	4b8e      	ldr	r3, [pc, #568]	; (80016a4 <main+0x47c>)
 800146a:	edd3 7a04 	vldr	s15, [r3, #16]
 800146e:	eef1 7a67 	vneg.f32	s15, s15
 8001472:	ee17 3a90 	vmov	r3, s15
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f812 	bl	80004a0 <__aeabi_f2d>
 800147c:	4680      	mov	r8, r0
 800147e:	4689      	mov	r9, r1
 8001480:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <main+0x47c>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f80b 	bl	80004a0 <__aeabi_f2d>
 800148a:	4603      	mov	r3, r0
 800148c:	460c      	mov	r4, r1
 800148e:	ed9f 1b80 	vldr	d1, [pc, #512]	; 8001690 <main+0x468>
 8001492:	ec44 3b10 	vmov	d0, r3, r4
 8001496:	f008 fafd 	bl	8009a94 <pow>
 800149a:	ec5b ab10 	vmov	sl, fp, d0
 800149e:	4b81      	ldr	r3, [pc, #516]	; (80016a4 <main+0x47c>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7fe fffc 	bl	80004a0 <__aeabi_f2d>
 80014a8:	4603      	mov	r3, r0
 80014aa:	460c      	mov	r4, r1
 80014ac:	ed9f 1b78 	vldr	d1, [pc, #480]	; 8001690 <main+0x468>
 80014b0:	ec44 3b10 	vmov	d0, r3, r4
 80014b4:	f008 faee 	bl	8009a94 <pow>
 80014b8:	ec54 3b10 	vmov	r3, r4, d0
 80014bc:	461a      	mov	r2, r3
 80014be:	4623      	mov	r3, r4
 80014c0:	4650      	mov	r0, sl
 80014c2:	4659      	mov	r1, fp
 80014c4:	f7fe fe8e 	bl	80001e4 <__adddf3>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	ec44 3b17 	vmov	d7, r3, r4
 80014d0:	eeb0 0a47 	vmov.f32	s0, s14
 80014d4:	eef0 0a67 	vmov.f32	s1, s15
 80014d8:	f008 fc4c 	bl	8009d74 <sqrt>
 80014dc:	ec54 3b10 	vmov	r3, r4, d0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4623      	mov	r3, r4
 80014e4:	4640      	mov	r0, r8
 80014e6:	4649      	mov	r1, r9
 80014e8:	f7ff f95c 	bl	80007a4 <__aeabi_ddiv>
 80014ec:	4603      	mov	r3, r0
 80014ee:	460c      	mov	r4, r1
 80014f0:	ec44 3b17 	vmov	d7, r3, r4
 80014f4:	eeb0 0a47 	vmov.f32	s0, s14
 80014f8:	eef0 0a67 	vmov.f32	s1, s15
 80014fc:	f008 f920 	bl	8009740 <atan>
 8001500:	ec51 0b10 	vmov	r0, r1, d0
 8001504:	a364      	add	r3, pc, #400	; (adr r3, 8001698 <main+0x470>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff f821 	bl	8000550 <__aeabi_dmul>
 800150e:	4603      	mov	r3, r0
 8001510:	460c      	mov	r4, r1
 8001512:	4618      	mov	r0, r3
 8001514:	4621      	mov	r1, r4
 8001516:	f7ff faf3 	bl	8000b00 <__aeabi_d2f>
 800151a:	4602      	mov	r2, r0
 800151c:	4b63      	ldr	r3, [pc, #396]	; (80016ac <main+0x484>)
 800151e:	601a      	str	r2, [r3, #0]

accel_x2= atan(mpu2.MPUaccel.Ay/sqrt(pow(mpu2.MPUaccel.Ax,2) + pow(mpu2.MPUaccel.Az,2)))*(180.0/3.14);
 8001520:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <main+0x478>)
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ffbb 	bl	80004a0 <__aeabi_f2d>
 800152a:	4680      	mov	r8, r0
 800152c:	4689      	mov	r9, r1
 800152e:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <main+0x478>)
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe ffb4 	bl	80004a0 <__aeabi_f2d>
 8001538:	4603      	mov	r3, r0
 800153a:	460c      	mov	r4, r1
 800153c:	ed9f 1b54 	vldr	d1, [pc, #336]	; 8001690 <main+0x468>
 8001540:	ec44 3b10 	vmov	d0, r3, r4
 8001544:	f008 faa6 	bl	8009a94 <pow>
 8001548:	ec5b ab10 	vmov	sl, fp, d0
 800154c:	4b54      	ldr	r3, [pc, #336]	; (80016a0 <main+0x478>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ffa5 	bl	80004a0 <__aeabi_f2d>
 8001556:	4603      	mov	r3, r0
 8001558:	460c      	mov	r4, r1
 800155a:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8001690 <main+0x468>
 800155e:	ec44 3b10 	vmov	d0, r3, r4
 8001562:	f008 fa97 	bl	8009a94 <pow>
 8001566:	ec54 3b10 	vmov	r3, r4, d0
 800156a:	461a      	mov	r2, r3
 800156c:	4623      	mov	r3, r4
 800156e:	4650      	mov	r0, sl
 8001570:	4659      	mov	r1, fp
 8001572:	f7fe fe37 	bl	80001e4 <__adddf3>
 8001576:	4603      	mov	r3, r0
 8001578:	460c      	mov	r4, r1
 800157a:	ec44 3b17 	vmov	d7, r3, r4
 800157e:	eeb0 0a47 	vmov.f32	s0, s14
 8001582:	eef0 0a67 	vmov.f32	s1, s15
 8001586:	f008 fbf5 	bl	8009d74 <sqrt>
 800158a:	ec54 3b10 	vmov	r3, r4, d0
 800158e:	461a      	mov	r2, r3
 8001590:	4623      	mov	r3, r4
 8001592:	4640      	mov	r0, r8
 8001594:	4649      	mov	r1, r9
 8001596:	f7ff f905 	bl	80007a4 <__aeabi_ddiv>
 800159a:	4603      	mov	r3, r0
 800159c:	460c      	mov	r4, r1
 800159e:	ec44 3b17 	vmov	d7, r3, r4
 80015a2:	eeb0 0a47 	vmov.f32	s0, s14
 80015a6:	eef0 0a67 	vmov.f32	s1, s15
 80015aa:	f008 f8c9 	bl	8009740 <atan>
 80015ae:	ec51 0b10 	vmov	r0, r1, d0
 80015b2:	a339      	add	r3, pc, #228	; (adr r3, 8001698 <main+0x470>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7fe ffca 	bl	8000550 <__aeabi_dmul>
 80015bc:	4603      	mov	r3, r0
 80015be:	460c      	mov	r4, r1
 80015c0:	4618      	mov	r0, r3
 80015c2:	4621      	mov	r1, r4
 80015c4:	f7ff fa9c 	bl	8000b00 <__aeabi_d2f>
 80015c8:	4602      	mov	r2, r0
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <main+0x488>)
 80015cc:	601a      	str	r2, [r3, #0]
accel_y2=atan(-mpu2.MPUaccel.Ax/sqrt(pow(mpu2.MPUaccel.Ay,2) + pow(mpu2.MPUaccel.Az,2)))*(180.0/3.14);
 80015ce:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <main+0x478>)
 80015d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80015d4:	eef1 7a67 	vneg.f32	s15, s15
 80015d8:	ee17 3a90 	vmov	r3, s15
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ff5f 	bl	80004a0 <__aeabi_f2d>
 80015e2:	4680      	mov	r8, r0
 80015e4:	4689      	mov	r9, r1
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <main+0x478>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ff58 	bl	80004a0 <__aeabi_f2d>
 80015f0:	4603      	mov	r3, r0
 80015f2:	460c      	mov	r4, r1
 80015f4:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001690 <main+0x468>
 80015f8:	ec44 3b10 	vmov	d0, r3, r4
 80015fc:	f008 fa4a 	bl	8009a94 <pow>
 8001600:	ec5b ab10 	vmov	sl, fp, d0
 8001604:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <main+0x478>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff49 	bl	80004a0 <__aeabi_f2d>
 800160e:	4603      	mov	r3, r0
 8001610:	460c      	mov	r4, r1
 8001612:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8001690 <main+0x468>
 8001616:	ec44 3b10 	vmov	d0, r3, r4
 800161a:	f008 fa3b 	bl	8009a94 <pow>
 800161e:	ec54 3b10 	vmov	r3, r4, d0
 8001622:	461a      	mov	r2, r3
 8001624:	4623      	mov	r3, r4
 8001626:	4650      	mov	r0, sl
 8001628:	4659      	mov	r1, fp
 800162a:	f7fe fddb 	bl	80001e4 <__adddf3>
 800162e:	4603      	mov	r3, r0
 8001630:	460c      	mov	r4, r1
 8001632:	ec44 3b17 	vmov	d7, r3, r4
 8001636:	eeb0 0a47 	vmov.f32	s0, s14
 800163a:	eef0 0a67 	vmov.f32	s1, s15
 800163e:	f008 fb99 	bl	8009d74 <sqrt>
 8001642:	ec54 3b10 	vmov	r3, r4, d0
 8001646:	461a      	mov	r2, r3
 8001648:	4623      	mov	r3, r4
 800164a:	4640      	mov	r0, r8
 800164c:	4649      	mov	r1, r9
 800164e:	f7ff f8a9 	bl	80007a4 <__aeabi_ddiv>
 8001652:	4603      	mov	r3, r0
 8001654:	460c      	mov	r4, r1
 8001656:	ec44 3b17 	vmov	d7, r3, r4
 800165a:	eeb0 0a47 	vmov.f32	s0, s14
 800165e:	eef0 0a67 	vmov.f32	s1, s15
 8001662:	f008 f86d 	bl	8009740 <atan>
 8001666:	ec51 0b10 	vmov	r0, r1, d0
 800166a:	a30b      	add	r3, pc, #44	; (adr r3, 8001698 <main+0x470>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f7fe ff6e 	bl	8000550 <__aeabi_dmul>
 8001674:	4603      	mov	r3, r0
 8001676:	460c      	mov	r4, r1
 8001678:	4618      	mov	r0, r3
 800167a:	4621      	mov	r1, r4
 800167c:	f7ff fa40 	bl	8000b00 <__aeabi_d2f>
 8001680:	4602      	mov	r2, r0
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <main+0x48c>)
 8001684:	601a      	str	r2, [r3, #0]

	  dt =  HAL_GetTick()-time;
 8001686:	f000 ff69 	bl	800255c <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	e014      	b.n	80016b8 <main+0x490>
 800168e:	bf00      	nop
 8001690:	00000000 	.word	0x00000000
 8001694:	40000000 	.word	0x40000000
 8001698:	61d59ae7 	.word	0x61d59ae7
 800169c:	404ca994 	.word	0x404ca994
 80016a0:	20000348 	.word	0x20000348
 80016a4:	20000480 	.word	0x20000480
 80016a8:	2000042c 	.word	0x2000042c
 80016ac:	20000438 	.word	0x20000438
 80016b0:	20000214 	.word	0x20000214
 80016b4:	20000224 	.word	0x20000224
 80016b8:	4bcd      	ldr	r3, [pc, #820]	; (80019f0 <main+0x7c8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	4acd      	ldr	r2, [pc, #820]	; (80019f4 <main+0x7cc>)
 80016c0:	6013      	str	r3, [r2, #0]
	  time = HAL_GetTick();
 80016c2:	f000 ff4b 	bl	800255c <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	4bc9      	ldr	r3, [pc, #804]	; (80019f0 <main+0x7c8>)
 80016ca:	601a      	str	r2, [r3, #0]
	 	gyro_y1 += dt*(mpu1.MPUgyro.Gy-mpu1.offsetY)/1000;  //2.579
 80016cc:	4bc9      	ldr	r3, [pc, #804]	; (80019f4 <main+0x7cc>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016d8:	4bc7      	ldr	r3, [pc, #796]	; (80019f8 <main+0x7d0>)
 80016da:	edd3 6a02 	vldr	s13, [r3, #8]
 80016de:	4bc6      	ldr	r3, [pc, #792]	; (80019f8 <main+0x7d0>)
 80016e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80016e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ec:	eddf 6ac3 	vldr	s13, [pc, #780]	; 80019fc <main+0x7d4>
 80016f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016f4:	4bc2      	ldr	r3, [pc, #776]	; (8001a00 <main+0x7d8>)
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fe:	4bc0      	ldr	r3, [pc, #768]	; (8001a00 <main+0x7d8>)
 8001700:	edc3 7a00 	vstr	s15, [r3]
	 	gyro_x1 += dt*(mpu1.MPUgyro.Gx-mpu1.offsetx)/1000;    //0.3
 8001704:	4bbb      	ldr	r3, [pc, #748]	; (80019f4 <main+0x7cc>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	ee07 3a90 	vmov	s15, r3
 800170c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001710:	4bb9      	ldr	r3, [pc, #740]	; (80019f8 <main+0x7d0>)
 8001712:	edd3 6a01 	vldr	s13, [r3, #4]
 8001716:	4bb8      	ldr	r3, [pc, #736]	; (80019f8 <main+0x7d0>)
 8001718:	edd3 7a07 	vldr	s15, [r3, #28]
 800171c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001724:	eddf 6ab5 	vldr	s13, [pc, #724]	; 80019fc <main+0x7d4>
 8001728:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800172c:	4bb5      	ldr	r3, [pc, #724]	; (8001a04 <main+0x7dc>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001736:	4bb3      	ldr	r3, [pc, #716]	; (8001a04 <main+0x7dc>)
 8001738:	edc3 7a00 	vstr	s15, [r3]
	 	gyro_z1 += dt*(mpu1.MPUgyro.Gz)/1000;
 800173c:	4bad      	ldr	r3, [pc, #692]	; (80019f4 <main+0x7cc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001748:	4bab      	ldr	r3, [pc, #684]	; (80019f8 <main+0x7d0>)
 800174a:	edd3 7a03 	vldr	s15, [r3, #12]
 800174e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001752:	eddf 6aaa 	vldr	s13, [pc, #680]	; 80019fc <main+0x7d4>
 8001756:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800175a:	4bab      	ldr	r3, [pc, #684]	; (8001a08 <main+0x7e0>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001764:	4ba8      	ldr	r3, [pc, #672]	; (8001a08 <main+0x7e0>)
 8001766:	edc3 7a00 	vstr	s15, [r3]

	 	gyro_y2 += dt*(mpu2.MPUgyro.Gy-mpu2.offsetY)/1000;
 800176a:	4ba2      	ldr	r3, [pc, #648]	; (80019f4 <main+0x7cc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001776:	4ba5      	ldr	r3, [pc, #660]	; (8001a0c <main+0x7e4>)
 8001778:	edd3 6a02 	vldr	s13, [r3, #8]
 800177c:	4ba3      	ldr	r3, [pc, #652]	; (8001a0c <main+0x7e4>)
 800177e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001782:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178a:	eddf 6a9c 	vldr	s13, [pc, #624]	; 80019fc <main+0x7d4>
 800178e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001792:	4b9f      	ldr	r3, [pc, #636]	; (8001a10 <main+0x7e8>)
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179c:	4b9c      	ldr	r3, [pc, #624]	; (8001a10 <main+0x7e8>)
 800179e:	edc3 7a00 	vstr	s15, [r3]
	 	gyro_x2 += dt*(mpu2.MPUgyro.Gx-mpu2.offsetx)/1000;
 80017a2:	4b94      	ldr	r3, [pc, #592]	; (80019f4 <main+0x7cc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	ee07 3a90 	vmov	s15, r3
 80017aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ae:	4b97      	ldr	r3, [pc, #604]	; (8001a0c <main+0x7e4>)
 80017b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80017b4:	4b95      	ldr	r3, [pc, #596]	; (8001a0c <main+0x7e4>)
 80017b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80017ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c2:	eddf 6a8e 	vldr	s13, [pc, #568]	; 80019fc <main+0x7d4>
 80017c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017ca:	4b92      	ldr	r3, [pc, #584]	; (8001a14 <main+0x7ec>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d4:	4b8f      	ldr	r3, [pc, #572]	; (8001a14 <main+0x7ec>)
 80017d6:	edc3 7a00 	vstr	s15, [r3]
	 	gyro_z2 += dt*(mpu2.MPUgyro.Gz)/1000;
 80017da:	4b86      	ldr	r3, [pc, #536]	; (80019f4 <main+0x7cc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017e6:	4b89      	ldr	r3, [pc, #548]	; (8001a0c <main+0x7e4>)
 80017e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80017ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f0:	eddf 6a82 	vldr	s13, [pc, #520]	; 80019fc <main+0x7d4>
 80017f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017f8:	4b87      	ldr	r3, [pc, #540]	; (8001a18 <main+0x7f0>)
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001802:	4b85      	ldr	r3, [pc, #532]	; (8001a18 <main+0x7f0>)
 8001804:	edc3 7a00 	vstr	s15, [r3]



angulo_y = 0.01*(accel_y1) + 0.9*gyro_y1;
 8001808:	4b84      	ldr	r3, [pc, #528]	; (8001a1c <main+0x7f4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fe47 	bl	80004a0 <__aeabi_f2d>
 8001812:	a373      	add	r3, pc, #460	; (adr r3, 80019e0 <main+0x7b8>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe fe9a 	bl	8000550 <__aeabi_dmul>
 800181c:	4603      	mov	r3, r0
 800181e:	460c      	mov	r4, r1
 8001820:	4698      	mov	r8, r3
 8001822:	46a1      	mov	r9, r4
 8001824:	4b76      	ldr	r3, [pc, #472]	; (8001a00 <main+0x7d8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe39 	bl	80004a0 <__aeabi_f2d>
 800182e:	a36e      	add	r3, pc, #440	; (adr r3, 80019e8 <main+0x7c0>)
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	f7fe fe8c 	bl	8000550 <__aeabi_dmul>
 8001838:	4603      	mov	r3, r0
 800183a:	460c      	mov	r4, r1
 800183c:	461a      	mov	r2, r3
 800183e:	4623      	mov	r3, r4
 8001840:	4640      	mov	r0, r8
 8001842:	4649      	mov	r1, r9
 8001844:	f7fe fcce 	bl	80001e4 <__adddf3>
 8001848:	4603      	mov	r3, r0
 800184a:	460c      	mov	r4, r1
 800184c:	4618      	mov	r0, r3
 800184e:	4621      	mov	r1, r4
 8001850:	f7ff f956 	bl	8000b00 <__aeabi_d2f>
 8001854:	4602      	mov	r2, r0
 8001856:	4b72      	ldr	r3, [pc, #456]	; (8001a20 <main+0x7f8>)
 8001858:	601a      	str	r2, [r3, #0]
angulo_x = 0.01*(accel_x1) + 0.9*gyro_x1;
 800185a:	4b72      	ldr	r3, [pc, #456]	; (8001a24 <main+0x7fc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe1e 	bl	80004a0 <__aeabi_f2d>
 8001864:	a35e      	add	r3, pc, #376	; (adr r3, 80019e0 <main+0x7b8>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7fe fe71 	bl	8000550 <__aeabi_dmul>
 800186e:	4603      	mov	r3, r0
 8001870:	460c      	mov	r4, r1
 8001872:	4698      	mov	r8, r3
 8001874:	46a1      	mov	r9, r4
 8001876:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <main+0x7dc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe10 	bl	80004a0 <__aeabi_f2d>
 8001880:	a359      	add	r3, pc, #356	; (adr r3, 80019e8 <main+0x7c0>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	f7fe fe63 	bl	8000550 <__aeabi_dmul>
 800188a:	4603      	mov	r3, r0
 800188c:	460c      	mov	r4, r1
 800188e:	461a      	mov	r2, r3
 8001890:	4623      	mov	r3, r4
 8001892:	4640      	mov	r0, r8
 8001894:	4649      	mov	r1, r9
 8001896:	f7fe fca5 	bl	80001e4 <__adddf3>
 800189a:	4603      	mov	r3, r0
 800189c:	460c      	mov	r4, r1
 800189e:	4618      	mov	r0, r3
 80018a0:	4621      	mov	r1, r4
 80018a2:	f7ff f92d 	bl	8000b00 <__aeabi_d2f>
 80018a6:	4602      	mov	r2, r0
 80018a8:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <main+0x800>)
 80018aa:	601a      	str	r2, [r3, #0]

angulo_y2 = 0.01*(accel_y2) + 0.9*gyro_y2;
 80018ac:	4b5f      	ldr	r3, [pc, #380]	; (8001a2c <main+0x804>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fdf5 	bl	80004a0 <__aeabi_f2d>
 80018b6:	a34a      	add	r3, pc, #296	; (adr r3, 80019e0 <main+0x7b8>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe fe48 	bl	8000550 <__aeabi_dmul>
 80018c0:	4603      	mov	r3, r0
 80018c2:	460c      	mov	r4, r1
 80018c4:	4698      	mov	r8, r3
 80018c6:	46a1      	mov	r9, r4
 80018c8:	4b51      	ldr	r3, [pc, #324]	; (8001a10 <main+0x7e8>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fde7 	bl	80004a0 <__aeabi_f2d>
 80018d2:	a345      	add	r3, pc, #276	; (adr r3, 80019e8 <main+0x7c0>)
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	f7fe fe3a 	bl	8000550 <__aeabi_dmul>
 80018dc:	4603      	mov	r3, r0
 80018de:	460c      	mov	r4, r1
 80018e0:	461a      	mov	r2, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	4640      	mov	r0, r8
 80018e6:	4649      	mov	r1, r9
 80018e8:	f7fe fc7c 	bl	80001e4 <__adddf3>
 80018ec:	4603      	mov	r3, r0
 80018ee:	460c      	mov	r4, r1
 80018f0:	4618      	mov	r0, r3
 80018f2:	4621      	mov	r1, r4
 80018f4:	f7ff f904 	bl	8000b00 <__aeabi_d2f>
 80018f8:	4602      	mov	r2, r0
 80018fa:	4b4d      	ldr	r3, [pc, #308]	; (8001a30 <main+0x808>)
 80018fc:	601a      	str	r2, [r3, #0]
angulo_x2 = 0.01*(accel_x2) + 0.9*gyro_x2;
 80018fe:	4b4d      	ldr	r3, [pc, #308]	; (8001a34 <main+0x80c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fdcc 	bl	80004a0 <__aeabi_f2d>
 8001908:	a335      	add	r3, pc, #212	; (adr r3, 80019e0 <main+0x7b8>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	f7fe fe1f 	bl	8000550 <__aeabi_dmul>
 8001912:	4603      	mov	r3, r0
 8001914:	460c      	mov	r4, r1
 8001916:	4698      	mov	r8, r3
 8001918:	46a1      	mov	r9, r4
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <main+0x7ec>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fdbe 	bl	80004a0 <__aeabi_f2d>
 8001924:	a330      	add	r3, pc, #192	; (adr r3, 80019e8 <main+0x7c0>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f7fe fe11 	bl	8000550 <__aeabi_dmul>
 800192e:	4603      	mov	r3, r0
 8001930:	460c      	mov	r4, r1
 8001932:	461a      	mov	r2, r3
 8001934:	4623      	mov	r3, r4
 8001936:	4640      	mov	r0, r8
 8001938:	4649      	mov	r1, r9
 800193a:	f7fe fc53 	bl	80001e4 <__adddf3>
 800193e:	4603      	mov	r3, r0
 8001940:	460c      	mov	r4, r1
 8001942:	4618      	mov	r0, r3
 8001944:	4621      	mov	r1, r4
 8001946:	f7ff f8db 	bl	8000b00 <__aeabi_d2f>
 800194a:	4602      	mov	r2, r0
 800194c:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <main+0x810>)
 800194e:	601a      	str	r2, [r3, #0]

//ADC read

P_previa =  P;
 8001950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001952:	64fb      	str	r3, [r7, #76]	; 0x4c


	 	  Kalman = P/(P+var);
 8001954:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001958:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800195c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001960:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001968:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48


HAL_ADC_Start(&hadc1);
 800196c:	4833      	ldr	r0, [pc, #204]	; (8001a3c <main+0x814>)
 800196e:	f000 fe45 	bl	80025fc <HAL_ADC_Start>
	 if(HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY)==HAL_OK){
 8001972:	f04f 31ff 	mov.w	r1, #4294967295
 8001976:	4831      	ldr	r0, [pc, #196]	; (8001a3c <main+0x814>)
 8001978:	f000 ff06 	bl	8002788 <HAL_ADC_PollForConversion>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <main+0x76e>
		 ADC_val=HAL_ADC_GetValue(&hadc1) ;  // entre 2500 y 1500 . quzás ajusatble tocando la resolucion
 8001982:	482e      	ldr	r0, [pc, #184]	; (8001a3c <main+0x814>)
 8001984:	f000 ff84 	bl	8002890 <HAL_ADC_GetValue>
 8001988:	ee07 0a90 	vmov	s15, r0
 800198c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001990:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <main+0x818>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
	 }
	 X_estimate = X + Kalman*(ADC_val-X);
 8001996:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <main+0x81c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a2:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <main+0x818>)
 80019a4:	edd3 6a00 	vldr	s13, [r3]
 80019a8:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <main+0x81c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019b8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c8:	ee17 2a90 	vmov	r2, s15
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <main+0x820>)
 80019ce:	601a      	str	r2, [r3, #0]
		 	  P = (1-Kalman)*P_previa + fabs(X - X_estimate)*0.01;
 80019d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019d4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019d8:	e038      	b.n	8001a4c <main+0x824>
 80019da:	bf00      	nop
 80019dc:	f3af 8000 	nop.w
 80019e0:	47ae147b 	.word	0x47ae147b
 80019e4:	3f847ae1 	.word	0x3f847ae1
 80019e8:	cccccccd 	.word	0xcccccccd
 80019ec:	3feccccc 	.word	0x3feccccc
 80019f0:	20000434 	.word	0x20000434
 80019f4:	20000468 	.word	0x20000468
 80019f8:	20000480 	.word	0x20000480
 80019fc:	447a0000 	.word	0x447a0000
 8001a00:	20000410 	.word	0x20000410
 8001a04:	20000404 	.word	0x20000404
 8001a08:	2000040c 	.word	0x2000040c
 8001a0c:	20000348 	.word	0x20000348
 8001a10:	20000470 	.word	0x20000470
 8001a14:	200002e8 	.word	0x200002e8
 8001a18:	20000440 	.word	0x20000440
 8001a1c:	20000438 	.word	0x20000438
 8001a20:	20000370 	.word	0x20000370
 8001a24:	2000042c 	.word	0x2000042c
 8001a28:	20000428 	.word	0x20000428
 8001a2c:	20000224 	.word	0x20000224
 8001a30:	2000047c 	.word	0x2000047c
 8001a34:	20000214 	.word	0x20000214
 8001a38:	20000444 	.word	0x20000444
 8001a3c:	200003b8 	.word	0x200003b8
 8001a40:	20000430 	.word	0x20000430
 8001a44:	200004a4 	.word	0x200004a4
 8001a48:	2000041c 	.word	0x2000041c
 8001a4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a50:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	ee17 0a90 	vmov	r0, s15
 8001a5c:	f7fe fd20 	bl	80004a0 <__aeabi_f2d>
 8001a60:	4680      	mov	r8, r0
 8001a62:	4689      	mov	r9, r1
 8001a64:	4b48      	ldr	r3, [pc, #288]	; (8001b88 <main+0x960>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <main+0x964>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fd04 	bl	800047c <__aeabi_i2d>
 8001a74:	4603      	mov	r3, r0
 8001a76:	460c      	mov	r4, r1
 8001a78:	461d      	mov	r5, r3
 8001a7a:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 8001a7e:	a340      	add	r3, pc, #256	; (adr r3, 8001b80 <main+0x958>)
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	4628      	mov	r0, r5
 8001a86:	4631      	mov	r1, r6
 8001a88:	f7fe fd62 	bl	8000550 <__aeabi_dmul>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	460c      	mov	r4, r1
 8001a90:	461a      	mov	r2, r3
 8001a92:	4623      	mov	r3, r4
 8001a94:	4640      	mov	r0, r8
 8001a96:	4649      	mov	r1, r9
 8001a98:	f7fe fba4 	bl	80001e4 <__adddf3>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	f7ff f82c 	bl	8000b00 <__aeabi_d2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	663b      	str	r3, [r7, #96]	; 0x60
		 	  X = X_estimate;
 8001aac:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <main+0x964>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a35      	ldr	r2, [pc, #212]	; (8001b88 <main+0x960>)
 8001ab2:	6013      	str	r3, [r2, #0]


//UART
		 	 gcvt(angulo_x,10,palabra);
 8001ab4:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <main+0x968>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fcf1 	bl	80004a0 <__aeabi_f2d>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	4934      	ldr	r1, [pc, #208]	; (8001b94 <main+0x96c>)
 8001ac4:	200a      	movs	r0, #10
 8001ac6:	ec44 3b10 	vmov	d0, r3, r4
 8001aca:	f005 fef7 	bl	80078bc <gcvt>
		 	 gcvt(angulo_x2,10,palabra2);
 8001ace:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <main+0x970>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fce4 	bl	80004a0 <__aeabi_f2d>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	460c      	mov	r4, r1
 8001adc:	492f      	ldr	r1, [pc, #188]	; (8001b9c <main+0x974>)
 8001ade:	200a      	movs	r0, #10
 8001ae0:	ec44 3b10 	vmov	d0, r3, r4
 8001ae4:	f005 feea 	bl	80078bc <gcvt>
		 	  itoa(X_estimate,info_kalman,10);
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <main+0x964>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f107 0108 	add.w	r1, r7, #8
 8001af0:	220a      	movs	r2, #10
 8001af2:	4618      	mov	r0, r3
 8001af4:	f005 ff50 	bl	8007998 <itoa>
		 	  itoa(ADC_val,info_real,10);
 8001af8:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <main+0x978>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b06:	220a      	movs	r2, #10
 8001b08:	4619      	mov	r1, r3
 8001b0a:	ee17 0a90 	vmov	r0, s15
 8001b0e:	f005 ff43 	bl	8007998 <itoa>
		 	 HAL_UART_Transmit(&huart5, (uint8_t*)info_real, sizeof(int), 100);
 8001b12:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001b16:	2364      	movs	r3, #100	; 0x64
 8001b18:	2204      	movs	r2, #4
 8001b1a:	4822      	ldr	r0, [pc, #136]	; (8001ba4 <main+0x97c>)
 8001b1c:	f005 f82f 	bl	8006b7e <HAL_UART_Transmit>
		 	 HAL_UART_Transmit(&huart5, (uint8_t*)comma, sizeof(comma), 100);
 8001b20:	4639      	mov	r1, r7
 8001b22:	2364      	movs	r3, #100	; 0x64
 8001b24:	2202      	movs	r2, #2
 8001b26:	481f      	ldr	r0, [pc, #124]	; (8001ba4 <main+0x97c>)
 8001b28:	f005 f829 	bl	8006b7e <HAL_UART_Transmit>
		 	 HAL_UART_Transmit(&huart5, (uint8_t*)info_kalman, sizeof(int), 100);
 8001b2c:	f107 0108 	add.w	r1, r7, #8
 8001b30:	2364      	movs	r3, #100	; 0x64
 8001b32:	2204      	movs	r2, #4
 8001b34:	481b      	ldr	r0, [pc, #108]	; (8001ba4 <main+0x97c>)
 8001b36:	f005 f822 	bl	8006b7e <HAL_UART_Transmit>
		 	HAL_UART_Transmit(&huart5, (uint8_t*)comma, sizeof(comma), 100);
 8001b3a:	4639      	mov	r1, r7
 8001b3c:	2364      	movs	r3, #100	; 0x64
 8001b3e:	2202      	movs	r2, #2
 8001b40:	4818      	ldr	r0, [pc, #96]	; (8001ba4 <main+0x97c>)
 8001b42:	f005 f81c 	bl	8006b7e <HAL_UART_Transmit>
		 	HAL_UART_Transmit(&huart5,(uint8_t*)palabra,sizeof(float ), 100);//palabra
 8001b46:	2364      	movs	r3, #100	; 0x64
 8001b48:	2204      	movs	r2, #4
 8001b4a:	4912      	ldr	r1, [pc, #72]	; (8001b94 <main+0x96c>)
 8001b4c:	4815      	ldr	r0, [pc, #84]	; (8001ba4 <main+0x97c>)
 8001b4e:	f005 f816 	bl	8006b7e <HAL_UART_Transmit>
		 	HAL_UART_Transmit(&huart5, (uint8_t*)comma, sizeof(comma), 100);
 8001b52:	4639      	mov	r1, r7
 8001b54:	2364      	movs	r3, #100	; 0x64
 8001b56:	2202      	movs	r2, #2
 8001b58:	4812      	ldr	r0, [pc, #72]	; (8001ba4 <main+0x97c>)
 8001b5a:	f005 f810 	bl	8006b7e <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart5,(uint8_t*)palabra2,sizeof(float ), 100);//palabra
 8001b5e:	2364      	movs	r3, #100	; 0x64
 8001b60:	2204      	movs	r2, #4
 8001b62:	490e      	ldr	r1, [pc, #56]	; (8001b9c <main+0x974>)
 8001b64:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <main+0x97c>)
 8001b66:	f005 f80a 	bl	8006b7e <HAL_UART_Transmit>
		 	 HAL_UART_Transmit(&huart5, (uint8_t*)ln, sizeof(comma), 100);
 8001b6a:	1d39      	adds	r1, r7, #4
 8001b6c:	2364      	movs	r3, #100	; 0x64
 8001b6e:	2202      	movs	r2, #2
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <main+0x97c>)
 8001b72:	f005 f804 	bl	8006b7e <HAL_UART_Transmit>
  {
 8001b76:	f7ff bba0 	b.w	80012ba <main+0x92>
 8001b7a:	bf00      	nop
 8001b7c:	f3af 8000 	nop.w
 8001b80:	47ae147b 	.word	0x47ae147b
 8001b84:	3f847ae1 	.word	0x3f847ae1
 8001b88:	200004a4 	.word	0x200004a4
 8001b8c:	2000041c 	.word	0x2000041c
 8001b90:	20000428 	.word	0x20000428
 8001b94:	20000448 	.word	0x20000448
 8001b98:	20000444 	.word	0x20000444
 8001b9c:	20000228 	.word	0x20000228
 8001ba0:	20000430 	.word	0x20000430
 8001ba4:	20000374 	.word	0x20000374

08001ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b094      	sub	sp, #80	; 0x50
 8001bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bae:	f107 0320 	add.w	r3, r7, #32
 8001bb2:	2230      	movs	r2, #48	; 0x30
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f005 fefb 	bl	80079b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <SystemClock_Config+0xcc>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	4a27      	ldr	r2, [pc, #156]	; (8001c74 <SystemClock_Config+0xcc>)
 8001bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bda:	6413      	str	r3, [r2, #64]	; 0x40
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <SystemClock_Config+0xcc>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be8:	2300      	movs	r3, #0
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <SystemClock_Config+0xd0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a21      	ldr	r2, [pc, #132]	; (8001c78 <SystemClock_Config+0xd0>)
 8001bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <SystemClock_Config+0xd0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c04:	2301      	movs	r3, #1
 8001c06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c1c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c22:	2302      	movs	r3, #2
 8001c24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c26:	2307      	movs	r3, #7
 8001c28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c2a:	f107 0320 	add.w	r3, r7, #32
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 ff9e 	bl	8005b70 <HAL_RCC_OscConfig>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c3a:	f000 f9a3 	bl	8001f84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c3e:	230f      	movs	r3, #15
 8001c40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c42:	2302      	movs	r3, #2
 8001c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001c50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c56:	f107 030c 	add.w	r3, r7, #12
 8001c5a:	2105      	movs	r1, #5
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f004 f9f7 	bl	8006050 <HAL_RCC_ClockConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c68:	f000 f98c 	bl	8001f84 <Error_Handler>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3750      	adds	r7, #80	; 0x50
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40007000 	.word	0x40007000

08001c7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c82:	463b      	mov	r3, r7
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <MX_ADC1_Init+0x98>)
 8001c90:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <MX_ADC1_Init+0x9c>)
 8001c92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <MX_ADC1_Init+0x98>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001c9a:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <MX_ADC1_Init+0x98>)
 8001c9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ca0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <MX_ADC1_Init+0x98>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_ADC1_Init+0x98>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <MX_ADC1_Init+0x98>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cb6:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <MX_ADC1_Init+0x98>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <MX_ADC1_Init+0x98>)
 8001cbe:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <MX_ADC1_Init+0xa0>)
 8001cc0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <MX_ADC1_Init+0x98>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <MX_ADC1_Init+0x98>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_ADC1_Init+0x98>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <MX_ADC1_Init+0x98>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cdc:	480d      	ldr	r0, [pc, #52]	; (8001d14 <MX_ADC1_Init+0x98>)
 8001cde:	f000 fc49 	bl	8002574 <HAL_ADC_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ce8:	f000 f94c 	bl	8001f84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_ADC1_Init+0x98>)
 8001cfe:	f000 fdd5 	bl	80028ac <HAL_ADC_ConfigChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d08:	f000 f93c 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200003b8 	.word	0x200003b8
 8001d18:	40012000 	.word	0x40012000
 8001d1c:	0f000001 	.word	0x0f000001

08001d20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d26:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <MX_I2C1_Init+0x54>)
 8001d28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d2c:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <MX_I2C1_Init+0x58>)
 8001d2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d44:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d5c:	4804      	ldr	r0, [pc, #16]	; (8001d70 <MX_I2C1_Init+0x50>)
 8001d5e:	f001 fa9f 	bl	80032a0 <HAL_I2C_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d68:	f000 f90c 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000294 	.word	0x20000294
 8001d74:	40005400 	.word	0x40005400
 8001d78:	000186a0 	.word	0x000186a0

08001d7c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d80:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001d82:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <MX_I2C2_Init+0x54>)
 8001d84:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001d88:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <MX_I2C2_Init+0x58>)
 8001d8a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001d9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d9e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001db8:	4804      	ldr	r0, [pc, #16]	; (8001dcc <MX_I2C2_Init+0x50>)
 8001dba:	f001 fa71 	bl	80032a0 <HAL_I2C_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001dc4:	f000 f8de 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200002ec 	.word	0x200002ec
 8001dd0:	40005800 	.word	0x40005800
 8001dd4:	000186a0 	.word	0x000186a0

08001dd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dde:	f107 0320 	add.w	r3, r7, #32
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	60da      	str	r2, [r3, #12]
 8001df4:	611a      	str	r2, [r3, #16]
 8001df6:	615a      	str	r2, [r3, #20]
 8001df8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <MX_TIM4_Init+0xac>)
 8001dfc:	4a22      	ldr	r2, [pc, #136]	; (8001e88 <MX_TIM4_Init+0xb0>)
 8001dfe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 839;
 8001e00:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <MX_TIM4_Init+0xac>)
 8001e02:	f240 3247 	movw	r2, #839	; 0x347
 8001e06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <MX_TIM4_Init+0xac>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <MX_TIM4_Init+0xac>)
 8001e10:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001e14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <MX_TIM4_Init+0xac>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <MX_TIM4_Init+0xac>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001e22:	4818      	ldr	r0, [pc, #96]	; (8001e84 <MX_TIM4_Init+0xac>)
 8001e24:	f004 fb06 	bl	8006434 <HAL_TIM_OC_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001e2e:	f000 f8a9 	bl	8001f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e3a:	f107 0320 	add.w	r3, r7, #32
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4810      	ldr	r0, [pc, #64]	; (8001e84 <MX_TIM4_Init+0xac>)
 8001e42:	f004 fdd3 	bl	80069ec <HAL_TIMEx_MasterConfigSynchronization>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001e4c:	f000 f89a 	bl	8001f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	2200      	movs	r2, #0
 8001e64:	4619      	mov	r1, r3
 8001e66:	4807      	ldr	r0, [pc, #28]	; (8001e84 <MX_TIM4_Init+0xac>)
 8001e68:	f004 fb10 	bl	800648c <HAL_TIM_OC_ConfigChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001e72:	f000 f887 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e76:	4803      	ldr	r0, [pc, #12]	; (8001e84 <MX_TIM4_Init+0xac>)
 8001e78:	f000 f9a2 	bl	80021c0 <HAL_TIM_MspPostInit>

}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	; 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000254 	.word	0x20000254
 8001e88:	40000800 	.word	0x40000800

08001e8c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <MX_UART5_Init+0x4c>)
 8001e92:	4a12      	ldr	r2, [pc, #72]	; (8001edc <MX_UART5_Init+0x50>)
 8001e94:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <MX_UART5_Init+0x4c>)
 8001e98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e9c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <MX_UART5_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <MX_UART5_Init+0x4c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <MX_UART5_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MX_UART5_Init+0x4c>)
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <MX_UART5_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <MX_UART5_Init+0x4c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <MX_UART5_Init+0x4c>)
 8001ec4:	f004 fe0e 	bl	8006ae4 <HAL_UART_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001ece:	f000 f859 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000374 	.word	0x20000374
 8001edc:	40005000 	.word	0x40005000

08001ee0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <MX_GPIO_Init+0xa0>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a24      	ldr	r2, [pc, #144]	; (8001f80 <MX_GPIO_Init+0xa0>)
 8001ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b22      	ldr	r3, [pc, #136]	; (8001f80 <MX_GPIO_Init+0xa0>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <MX_GPIO_Init+0xa0>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	; (8001f80 <MX_GPIO_Init+0xa0>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <MX_GPIO_Init+0xa0>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <MX_GPIO_Init+0xa0>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a16      	ldr	r2, [pc, #88]	; (8001f80 <MX_GPIO_Init+0xa0>)
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <MX_GPIO_Init+0xa0>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <MX_GPIO_Init+0xa0>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a0f      	ldr	r2, [pc, #60]	; (8001f80 <MX_GPIO_Init+0xa0>)
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <MX_GPIO_Init+0xa0>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_GPIO_Init+0xa0>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <MX_GPIO_Init+0xa0>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_GPIO_Init+0xa0>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]

}
 8001f72:	bf00      	nop
 8001f74:	371c      	adds	r7, #28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800

08001f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <Error_Handler+0x6>

08001f8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_MspInit+0x4c>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	4a0f      	ldr	r2, [pc, #60]	; (8001fd8 <HAL_MspInit+0x4c>)
 8001f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <HAL_MspInit+0x4c>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_MspInit+0x4c>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4a08      	ldr	r2, [pc, #32]	; (8001fd8 <HAL_MspInit+0x4c>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_MspInit+0x4c>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fca:	2007      	movs	r0, #7
 8001fcc:	f000 ff5c 	bl	8002e88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023800 	.word	0x40023800

08001fdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a17      	ldr	r2, [pc, #92]	; (8002058 <HAL_ADC_MspInit+0x7c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d127      	bne.n	800204e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
 8002002:	4b16      	ldr	r3, [pc, #88]	; (800205c <HAL_ADC_MspInit+0x80>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	4a15      	ldr	r2, [pc, #84]	; (800205c <HAL_ADC_MspInit+0x80>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200c:	6453      	str	r3, [r2, #68]	; 0x44
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <HAL_ADC_MspInit+0x80>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b0f      	ldr	r3, [pc, #60]	; (800205c <HAL_ADC_MspInit+0x80>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a0e      	ldr	r2, [pc, #56]	; (800205c <HAL_ADC_MspInit+0x80>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b0c      	ldr	r3, [pc, #48]	; (800205c <HAL_ADC_MspInit+0x80>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002036:	2301      	movs	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800203a:	2303      	movs	r3, #3
 800203c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	4805      	ldr	r0, [pc, #20]	; (8002060 <HAL_ADC_MspInit+0x84>)
 800204a:	f000 ff8f 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800204e:	bf00      	nop
 8002050:	3728      	adds	r7, #40	; 0x28
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40012000 	.word	0x40012000
 800205c:	40023800 	.word	0x40023800
 8002060:	40020000 	.word	0x40020000

08002064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	; 0x30
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a3a      	ldr	r2, [pc, #232]	; (800216c <HAL_I2C_MspInit+0x108>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d13c      	bne.n	8002100 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	4b39      	ldr	r3, [pc, #228]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a38      	ldr	r2, [pc, #224]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 8002090:	f043 0302 	orr.w	r3, r3, #2
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b36      	ldr	r3, [pc, #216]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020a2:	23c0      	movs	r3, #192	; 0xc0
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020a6:	2312      	movs	r3, #18
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020aa:	2301      	movs	r3, #1
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020b2:	2304      	movs	r3, #4
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	4619      	mov	r1, r3
 80020bc:	482d      	ldr	r0, [pc, #180]	; (8002174 <HAL_I2C_MspInit+0x110>)
 80020be:	f000 ff55 	bl	8002f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a29      	ldr	r2, [pc, #164]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 80020cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	201f      	movs	r0, #31
 80020e4:	f000 fedb 	bl	8002e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020e8:	201f      	movs	r0, #31
 80020ea:	f000 fef4 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	2020      	movs	r0, #32
 80020f4:	f000 fed3 	bl	8002e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80020f8:	2020      	movs	r0, #32
 80020fa:	f000 feec 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80020fe:	e031      	b.n	8002164 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a1c      	ldr	r2, [pc, #112]	; (8002178 <HAL_I2C_MspInit+0x114>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d12c      	bne.n	8002164 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a17      	ldr	r2, [pc, #92]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002126:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800212a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800212c:	2312      	movs	r3, #18
 800212e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002130:	2301      	movs	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002134:	2303      	movs	r3, #3
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002138:	2304      	movs	r3, #4
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213c:	f107 031c 	add.w	r3, r7, #28
 8002140:	4619      	mov	r1, r3
 8002142:	480c      	ldr	r0, [pc, #48]	; (8002174 <HAL_I2C_MspInit+0x110>)
 8002144:	f000 ff12 	bl	8002f6c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 8002152:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002156:	6413      	str	r3, [r2, #64]	; 0x40
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_I2C_MspInit+0x10c>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]
}
 8002164:	bf00      	nop
 8002166:	3730      	adds	r7, #48	; 0x30
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40005400 	.word	0x40005400
 8002170:	40023800 	.word	0x40023800
 8002174:	40020400 	.word	0x40020400
 8002178:	40005800 	.word	0x40005800

0800217c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <HAL_TIM_OC_MspInit+0x3c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10d      	bne.n	80021aa <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_TIM_OC_MspInit+0x40>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a09      	ldr	r2, [pc, #36]	; (80021bc <HAL_TIM_OC_MspInit+0x40>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <HAL_TIM_OC_MspInit+0x40>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40000800 	.word	0x40000800
 80021bc:	40023800 	.word	0x40023800

080021c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a12      	ldr	r2, [pc, #72]	; (8002228 <HAL_TIM_MspPostInit+0x68>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d11e      	bne.n	8002220 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_TIM_MspPostInit+0x6c>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a10      	ldr	r2, [pc, #64]	; (800222c <HAL_TIM_MspPostInit+0x6c>)
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_TIM_MspPostInit+0x6c>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002202:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002210:	2302      	movs	r3, #2
 8002212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002214:	f107 030c 	add.w	r3, r7, #12
 8002218:	4619      	mov	r1, r3
 800221a:	4805      	ldr	r0, [pc, #20]	; (8002230 <HAL_TIM_MspPostInit+0x70>)
 800221c:	f000 fea6 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002220:	bf00      	nop
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40000800 	.word	0x40000800
 800222c:	40023800 	.word	0x40023800
 8002230:	40020c00 	.word	0x40020c00

08002234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0314 	add.w	r3, r7, #20
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2c      	ldr	r2, [pc, #176]	; (8002304 <HAL_UART_MspInit+0xd0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d152      	bne.n	80022fc <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <HAL_UART_MspInit+0xd4>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a2a      	ldr	r2, [pc, #168]	; (8002308 <HAL_UART_MspInit+0xd4>)
 8002260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b28      	ldr	r3, [pc, #160]	; (8002308 <HAL_UART_MspInit+0xd4>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_UART_MspInit+0xd4>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a23      	ldr	r2, [pc, #140]	; (8002308 <HAL_UART_MspInit+0xd4>)
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b21      	ldr	r3, [pc, #132]	; (8002308 <HAL_UART_MspInit+0xd4>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_UART_MspInit+0xd4>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <HAL_UART_MspInit+0xd4>)
 8002298:	f043 0308 	orr.w	r3, r3, #8
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_UART_MspInit+0xd4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b4:	2301      	movs	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80022bc:	2308      	movs	r3, #8
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	4811      	ldr	r0, [pc, #68]	; (800230c <HAL_UART_MspInit+0xd8>)
 80022c8:	f000 fe50 	bl	8002f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022cc:	2304      	movs	r3, #4
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d4:	2301      	movs	r3, #1
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80022dc:	2308      	movs	r3, #8
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	480a      	ldr	r0, [pc, #40]	; (8002310 <HAL_UART_MspInit+0xdc>)
 80022e8:	f000 fe40 	bl	8002f6c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	2035      	movs	r0, #53	; 0x35
 80022f2:	f000 fdd4 	bl	8002e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80022f6:	2035      	movs	r0, #53	; 0x35
 80022f8:	f000 fded 	bl	8002ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80022fc:	bf00      	nop
 80022fe:	3728      	adds	r7, #40	; 0x28
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40005000 	.word	0x40005000
 8002308:	40023800 	.word	0x40023800
 800230c:	40020800 	.word	0x40020800
 8002310:	40020c00 	.word	0x40020c00

08002314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <NMI_Handler+0x4>

0800231a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <HardFault_Handler+0x4>

08002320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <MemManage_Handler+0x4>

08002326 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800232a:	e7fe      	b.n	800232a <BusFault_Handler+0x4>

0800232c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002330:	e7fe      	b.n	8002330 <UsageFault_Handler+0x4>

08002332 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002360:	f000 f8e8 	bl	8002534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <I2C1_EV_IRQHandler+0x10>)
 800236e:	f001 fbef 	bl	8003b50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000294 	.word	0x20000294

0800237c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <I2C1_ER_IRQHandler+0x10>)
 8002382:	f001 fd52 	bl	8003e2a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000294 	.word	0x20000294

08002390 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <UART5_IRQHandler+0x10>)
 8002396:	f004 fc8b 	bl	8006cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000374 	.word	0x20000374

080023a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ac:	4a14      	ldr	r2, [pc, #80]	; (8002400 <_sbrk+0x5c>)
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <_sbrk+0x60>)
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <_sbrk+0x64>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <_sbrk+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d207      	bcs.n	80023e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d4:	f005 fa9e 	bl	8007914 <__errno>
 80023d8:	4602      	mov	r2, r0
 80023da:	230c      	movs	r3, #12
 80023dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	e009      	b.n	80023f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <_sbrk+0x64>)
 80023f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20020000 	.word	0x20020000
 8002404:	00000400 	.word	0x00000400
 8002408:	20000208 	.word	0x20000208
 800240c:	200004b0 	.word	0x200004b0

08002410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <SystemInit+0x28>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	4a07      	ldr	r2, [pc, #28]	; (8002438 <SystemInit+0x28>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <SystemInit+0x28>)
 8002426:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800242a:	609a      	str	r2, [r3, #8]
#endif
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800243c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002474 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002440:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002442:	e003      	b.n	800244c <LoopCopyDataInit>

08002444 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002446:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002448:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800244a:	3104      	adds	r1, #4

0800244c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800244c:	480b      	ldr	r0, [pc, #44]	; (800247c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002450:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002452:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002454:	d3f6      	bcc.n	8002444 <CopyDataInit>
  ldr  r2, =_sbss
 8002456:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002458:	e002      	b.n	8002460 <LoopFillZerobss>

0800245a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800245a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800245c:	f842 3b04 	str.w	r3, [r2], #4

08002460 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002462:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002464:	d3f9      	bcc.n	800245a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002466:	f7ff ffd3 	bl	8002410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800246a:	f005 fa59 	bl	8007920 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800246e:	f7fe fedb 	bl	8001228 <main>
  bx  lr    
 8002472:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002474:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002478:	0800af00 	.word	0x0800af00
  ldr  r0, =_sdata
 800247c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002480:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8002484:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002488:	200004b0 	.word	0x200004b0

0800248c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC_IRQHandler>
	...

08002490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002494:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <HAL_Init+0x40>)
 800249a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_Init+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <HAL_Init+0x40>)
 80024a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ac:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <HAL_Init+0x40>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a07      	ldr	r2, [pc, #28]	; (80024d0 <HAL_Init+0x40>)
 80024b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b8:	2003      	movs	r0, #3
 80024ba:	f000 fce5 	bl	8002e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024be:	2000      	movs	r0, #0
 80024c0:	f000 f808 	bl	80024d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c4:	f7ff fd62 	bl	8001f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00

080024d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <HAL_InitTick+0x54>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_InitTick+0x58>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	4619      	mov	r1, r3
 80024e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fcfd 	bl	8002ef2 <HAL_SYSTICK_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e00e      	b.n	8002520 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b0f      	cmp	r3, #15
 8002506:	d80a      	bhi.n	800251e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002508:	2200      	movs	r2, #0
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f000 fcc5 	bl	8002e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002514:	4a06      	ldr	r2, [pc, #24]	; (8002530 <HAL_InitTick+0x5c>)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e000      	b.n	8002520 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000000 	.word	0x20000000
 800252c:	20000008 	.word	0x20000008
 8002530:	20000004 	.word	0x20000004

08002534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_IncTick+0x20>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_IncTick+0x24>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4413      	add	r3, r2
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <HAL_IncTick+0x24>)
 8002546:	6013      	str	r3, [r2, #0]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000008 	.word	0x20000008
 8002558:	200004a8 	.word	0x200004a8

0800255c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return uwTick;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_GetTick+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	200004a8 	.word	0x200004a8

08002574 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e033      	b.n	80025f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff fd22 	bl	8001fdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d118      	bne.n	80025e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025ba:	f023 0302 	bic.w	r3, r3, #2
 80025be:	f043 0202 	orr.w	r2, r3, #2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fa92 	bl	8002af0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f023 0303 	bic.w	r3, r3, #3
 80025da:	f043 0201 	orr.w	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
 80025e2:	e001      	b.n	80025e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_ADC_Start+0x1a>
 8002612:	2302      	movs	r3, #2
 8002614:	e0a5      	b.n	8002762 <HAL_ADC_Start+0x166>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d018      	beq.n	800265e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800263c:	4b4c      	ldr	r3, [pc, #304]	; (8002770 <HAL_ADC_Start+0x174>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a4c      	ldr	r2, [pc, #304]	; (8002774 <HAL_ADC_Start+0x178>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	0c9a      	lsrs	r2, r3, #18
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002650:	e002      	b.n	8002658 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	3b01      	subs	r3, #1
 8002656:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f9      	bne.n	8002652 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b01      	cmp	r3, #1
 800266a:	d179      	bne.n	8002760 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268a:	2b00      	cmp	r3, #0
 800268c:	d007      	beq.n	800269e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002696:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026aa:	d106      	bne.n	80026ba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	f023 0206 	bic.w	r2, r3, #6
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	645a      	str	r2, [r3, #68]	; 0x44
 80026b8:	e002      	b.n	80026c0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c8:	4b2b      	ldr	r3, [pc, #172]	; (8002778 <HAL_ADC_Start+0x17c>)
 80026ca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026d4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 031f 	and.w	r3, r3, #31
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d12a      	bne.n	8002738 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a25      	ldr	r2, [pc, #148]	; (800277c <HAL_ADC_Start+0x180>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d015      	beq.n	8002718 <HAL_ADC_Start+0x11c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a23      	ldr	r2, [pc, #140]	; (8002780 <HAL_ADC_Start+0x184>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d105      	bne.n	8002702 <HAL_ADC_Start+0x106>
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <HAL_ADC_Start+0x17c>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1f      	ldr	r2, [pc, #124]	; (8002784 <HAL_ADC_Start+0x188>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d129      	bne.n	8002760 <HAL_ADC_Start+0x164>
 800270c:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <HAL_ADC_Start+0x17c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	2b0f      	cmp	r3, #15
 8002716:	d823      	bhi.n	8002760 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d11c      	bne.n	8002760 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002734:	609a      	str	r2, [r3, #8]
 8002736:	e013      	b.n	8002760 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0f      	ldr	r2, [pc, #60]	; (800277c <HAL_ADC_Start+0x180>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d10e      	bne.n	8002760 <HAL_ADC_Start+0x164>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d107      	bne.n	8002760 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800275e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000000 	.word	0x20000000
 8002774:	431bde83 	.word	0x431bde83
 8002778:	40012300 	.word	0x40012300
 800277c:	40012000 	.word	0x40012000
 8002780:	40012100 	.word	0x40012100
 8002784:	40012200 	.word	0x40012200

08002788 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a4:	d113      	bne.n	80027ce <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b4:	d10b      	bne.n	80027ce <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f043 0220 	orr.w	r2, r3, #32
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e05c      	b.n	8002888 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80027ce:	f7ff fec5 	bl	800255c <HAL_GetTick>
 80027d2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027d4:	e01a      	b.n	800280c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d016      	beq.n	800280c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_ADC_PollForConversion+0x6c>
 80027e4:	f7ff feba 	bl	800255c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d20b      	bcs.n	800280c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	f043 0204 	orr.w	r2, r3, #4
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e03d      	b.n	8002888 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b02      	cmp	r3, #2
 8002818:	d1dd      	bne.n	80027d6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f06f 0212 	mvn.w	r2, #18
 8002822:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d123      	bne.n	8002886 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002842:	2b00      	cmp	r3, #0
 8002844:	d11f      	bne.n	8002886 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002850:	2b00      	cmp	r3, #0
 8002852:	d006      	beq.n	8002862 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800285e:	2b00      	cmp	r3, #0
 8002860:	d111      	bne.n	8002886 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d105      	bne.n	8002886 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f043 0201 	orr.w	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x1c>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e105      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x228>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b09      	cmp	r3, #9
 80028d6:	d925      	bls.n	8002924 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68d9      	ldr	r1, [r3, #12]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	3b1e      	subs	r3, #30
 80028ee:	2207      	movs	r2, #7
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43da      	mvns	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	400a      	ands	r2, r1
 80028fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68d9      	ldr	r1, [r3, #12]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	4618      	mov	r0, r3
 8002910:	4603      	mov	r3, r0
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4403      	add	r3, r0
 8002916:	3b1e      	subs	r3, #30
 8002918:	409a      	lsls	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	e022      	b.n	800296a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6919      	ldr	r1, [r3, #16]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	2207      	movs	r2, #7
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43da      	mvns	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	400a      	ands	r2, r1
 8002946:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6919      	ldr	r1, [r3, #16]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	4618      	mov	r0, r3
 800295a:	4603      	mov	r3, r0
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4403      	add	r3, r0
 8002960:	409a      	lsls	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b06      	cmp	r3, #6
 8002970:	d824      	bhi.n	80029bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	3b05      	subs	r3, #5
 8002984:	221f      	movs	r2, #31
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43da      	mvns	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	400a      	ands	r2, r1
 8002992:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	4618      	mov	r0, r3
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	3b05      	subs	r3, #5
 80029ae:	fa00 f203 	lsl.w	r2, r0, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ba:	e04c      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b0c      	cmp	r3, #12
 80029c2:	d824      	bhi.n	8002a0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	3b23      	subs	r3, #35	; 0x23
 80029d6:	221f      	movs	r2, #31
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43da      	mvns	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	400a      	ands	r2, r1
 80029e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	4618      	mov	r0, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	3b23      	subs	r3, #35	; 0x23
 8002a00:	fa00 f203 	lsl.w	r2, r0, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a0c:	e023      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3b41      	subs	r3, #65	; 0x41
 8002a20:	221f      	movs	r2, #31
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	3b41      	subs	r3, #65	; 0x41
 8002a4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_ADC_ConfigChannel+0x234>)
 8002a58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a21      	ldr	r2, [pc, #132]	; (8002ae4 <HAL_ADC_ConfigChannel+0x238>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d109      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x1cc>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b12      	cmp	r3, #18
 8002a6a:	d105      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a19      	ldr	r2, [pc, #100]	; (8002ae4 <HAL_ADC_ConfigChannel+0x238>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d123      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x21e>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d003      	beq.n	8002a92 <HAL_ADC_ConfigChannel+0x1e6>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b11      	cmp	r3, #17
 8002a90:	d11b      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b10      	cmp	r3, #16
 8002aa4:	d111      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002aa6:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <HAL_ADC_ConfigChannel+0x23c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a10      	ldr	r2, [pc, #64]	; (8002aec <HAL_ADC_ConfigChannel+0x240>)
 8002aac:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab0:	0c9a      	lsrs	r2, r3, #18
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002abc:	e002      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f9      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40012300 	.word	0x40012300
 8002ae4:	40012000 	.word	0x40012000
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	431bde83 	.word	0x431bde83

08002af0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002af8:	4b79      	ldr	r3, [pc, #484]	; (8002ce0 <ADC_Init+0x1f0>)
 8002afa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	021a      	lsls	r2, r3, #8
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689a      	ldr	r2, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6899      	ldr	r1, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	4a58      	ldr	r2, [pc, #352]	; (8002ce4 <ADC_Init+0x1f4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d022      	beq.n	8002bce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6899      	ldr	r1, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6899      	ldr	r1, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	e00f      	b.n	8002bee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0202 	bic.w	r2, r2, #2
 8002bfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6899      	ldr	r1, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7e1b      	ldrb	r3, [r3, #24]
 8002c08:	005a      	lsls	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d01b      	beq.n	8002c54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6859      	ldr	r1, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	3b01      	subs	r3, #1
 8002c48:	035a      	lsls	r2, r3, #13
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	e007      	b.n	8002c64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	051a      	lsls	r2, r3, #20
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6899      	ldr	r1, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ca6:	025a      	lsls	r2, r3, #9
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6899      	ldr	r1, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	029a      	lsls	r2, r3, #10
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40012300 	.word	0x40012300
 8002ce4:	0f000001 	.word	0x0f000001

08002ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <__NVIC_SetPriorityGrouping+0x44>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d04:	4013      	ands	r3, r2
 8002d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d1a:	4a04      	ldr	r2, [pc, #16]	; (8002d2c <__NVIC_SetPriorityGrouping+0x44>)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	60d3      	str	r3, [r2, #12]
}
 8002d20:	bf00      	nop
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d34:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <__NVIC_GetPriorityGrouping+0x18>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	0a1b      	lsrs	r3, r3, #8
 8002d3a:	f003 0307 	and.w	r3, r3, #7
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	db0b      	blt.n	8002d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	f003 021f 	and.w	r2, r3, #31
 8002d64:	4907      	ldr	r1, [pc, #28]	; (8002d84 <__NVIC_EnableIRQ+0x38>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	e000e100 	.word	0xe000e100

08002d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	6039      	str	r1, [r7, #0]
 8002d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	db0a      	blt.n	8002db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	490c      	ldr	r1, [pc, #48]	; (8002dd4 <__NVIC_SetPriority+0x4c>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	0112      	lsls	r2, r2, #4
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	440b      	add	r3, r1
 8002dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002db0:	e00a      	b.n	8002dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4908      	ldr	r1, [pc, #32]	; (8002dd8 <__NVIC_SetPriority+0x50>)
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	3b04      	subs	r3, #4
 8002dc0:	0112      	lsls	r2, r2, #4
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	761a      	strb	r2, [r3, #24]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000e100 	.word	0xe000e100
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f1c3 0307 	rsb	r3, r3, #7
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	bf28      	it	cs
 8002dfa:	2304      	movcs	r3, #4
 8002dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3304      	adds	r3, #4
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d902      	bls.n	8002e0c <NVIC_EncodePriority+0x30>
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3b03      	subs	r3, #3
 8002e0a:	e000      	b.n	8002e0e <NVIC_EncodePriority+0x32>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	f04f 32ff 	mov.w	r2, #4294967295
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	401a      	ands	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e24:	f04f 31ff 	mov.w	r1, #4294967295
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	43d9      	mvns	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e34:	4313      	orrs	r3, r2
         );
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3724      	adds	r7, #36	; 0x24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e54:	d301      	bcc.n	8002e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00f      	b.n	8002e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <SysTick_Config+0x40>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e62:	210f      	movs	r1, #15
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295
 8002e68:	f7ff ff8e 	bl	8002d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <SysTick_Config+0x40>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e72:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <SysTick_Config+0x40>)
 8002e74:	2207      	movs	r2, #7
 8002e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	e000e010 	.word	0xe000e010

08002e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff ff29 	bl	8002ce8 <__NVIC_SetPriorityGrouping>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eb0:	f7ff ff3e 	bl	8002d30 <__NVIC_GetPriorityGrouping>
 8002eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68b9      	ldr	r1, [r7, #8]
 8002eba:	6978      	ldr	r0, [r7, #20]
 8002ebc:	f7ff ff8e 	bl	8002ddc <NVIC_EncodePriority>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff5d 	bl	8002d88 <__NVIC_SetPriority>
}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff31 	bl	8002d4c <__NVIC_EnableIRQ>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ffa2 	bl	8002e44 <SysTick_Config>
 8002f00:	4603      	mov	r3, r0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d004      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2280      	movs	r2, #128	; 0x80
 8002f22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e00c      	b.n	8002f42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2205      	movs	r2, #5
 8002f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f5c:	b2db      	uxtb	r3, r3
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	e16b      	b.n	8003260 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	f040 815a 	bne.w	800325a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d00b      	beq.n	8002fc6 <HAL_GPIO_Init+0x5a>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d007      	beq.n	8002fc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fba:	2b11      	cmp	r3, #17
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b12      	cmp	r3, #18
 8002fc4:	d130      	bne.n	8003028 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 0201 	and.w	r2, r3, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	2203      	movs	r2, #3
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0xfc>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b12      	cmp	r3, #18
 8003066:	d123      	bne.n	80030b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	08da      	lsrs	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3208      	adds	r2, #8
 8003070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	220f      	movs	r2, #15
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	08da      	lsrs	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3208      	adds	r2, #8
 80030aa:	69b9      	ldr	r1, [r7, #24]
 80030ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	2203      	movs	r2, #3
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0203 	and.w	r2, r3, #3
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80b4 	beq.w	800325a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	4b5f      	ldr	r3, [pc, #380]	; (8003274 <HAL_GPIO_Init+0x308>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	4a5e      	ldr	r2, [pc, #376]	; (8003274 <HAL_GPIO_Init+0x308>)
 80030fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003100:	6453      	str	r3, [r2, #68]	; 0x44
 8003102:	4b5c      	ldr	r3, [pc, #368]	; (8003274 <HAL_GPIO_Init+0x308>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800310e:	4a5a      	ldr	r2, [pc, #360]	; (8003278 <HAL_GPIO_Init+0x30c>)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	3302      	adds	r3, #2
 8003116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	220f      	movs	r2, #15
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a51      	ldr	r2, [pc, #324]	; (800327c <HAL_GPIO_Init+0x310>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d02b      	beq.n	8003192 <HAL_GPIO_Init+0x226>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a50      	ldr	r2, [pc, #320]	; (8003280 <HAL_GPIO_Init+0x314>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d025      	beq.n	800318e <HAL_GPIO_Init+0x222>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4f      	ldr	r2, [pc, #316]	; (8003284 <HAL_GPIO_Init+0x318>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01f      	beq.n	800318a <HAL_GPIO_Init+0x21e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a4e      	ldr	r2, [pc, #312]	; (8003288 <HAL_GPIO_Init+0x31c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d019      	beq.n	8003186 <HAL_GPIO_Init+0x21a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4d      	ldr	r2, [pc, #308]	; (800328c <HAL_GPIO_Init+0x320>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_GPIO_Init+0x216>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4c      	ldr	r2, [pc, #304]	; (8003290 <HAL_GPIO_Init+0x324>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00d      	beq.n	800317e <HAL_GPIO_Init+0x212>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4b      	ldr	r2, [pc, #300]	; (8003294 <HAL_GPIO_Init+0x328>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d007      	beq.n	800317a <HAL_GPIO_Init+0x20e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a4a      	ldr	r2, [pc, #296]	; (8003298 <HAL_GPIO_Init+0x32c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d101      	bne.n	8003176 <HAL_GPIO_Init+0x20a>
 8003172:	2307      	movs	r3, #7
 8003174:	e00e      	b.n	8003194 <HAL_GPIO_Init+0x228>
 8003176:	2308      	movs	r3, #8
 8003178:	e00c      	b.n	8003194 <HAL_GPIO_Init+0x228>
 800317a:	2306      	movs	r3, #6
 800317c:	e00a      	b.n	8003194 <HAL_GPIO_Init+0x228>
 800317e:	2305      	movs	r3, #5
 8003180:	e008      	b.n	8003194 <HAL_GPIO_Init+0x228>
 8003182:	2304      	movs	r3, #4
 8003184:	e006      	b.n	8003194 <HAL_GPIO_Init+0x228>
 8003186:	2303      	movs	r3, #3
 8003188:	e004      	b.n	8003194 <HAL_GPIO_Init+0x228>
 800318a:	2302      	movs	r3, #2
 800318c:	e002      	b.n	8003194 <HAL_GPIO_Init+0x228>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <HAL_GPIO_Init+0x228>
 8003192:	2300      	movs	r3, #0
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	f002 0203 	and.w	r2, r2, #3
 800319a:	0092      	lsls	r2, r2, #2
 800319c:	4093      	lsls	r3, r2
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a4:	4934      	ldr	r1, [pc, #208]	; (8003278 <HAL_GPIO_Init+0x30c>)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	089b      	lsrs	r3, r3, #2
 80031aa:	3302      	adds	r3, #2
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b2:	4b3a      	ldr	r3, [pc, #232]	; (800329c <HAL_GPIO_Init+0x330>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d6:	4a31      	ldr	r2, [pc, #196]	; (800329c <HAL_GPIO_Init+0x330>)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031dc:	4b2f      	ldr	r3, [pc, #188]	; (800329c <HAL_GPIO_Init+0x330>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003200:	4a26      	ldr	r2, [pc, #152]	; (800329c <HAL_GPIO_Init+0x330>)
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003206:	4b25      	ldr	r3, [pc, #148]	; (800329c <HAL_GPIO_Init+0x330>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	43db      	mvns	r3, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800322a:	4a1c      	ldr	r2, [pc, #112]	; (800329c <HAL_GPIO_Init+0x330>)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003230:	4b1a      	ldr	r3, [pc, #104]	; (800329c <HAL_GPIO_Init+0x330>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003254:	4a11      	ldr	r2, [pc, #68]	; (800329c <HAL_GPIO_Init+0x330>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3301      	adds	r3, #1
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	2b0f      	cmp	r3, #15
 8003264:	f67f ae90 	bls.w	8002f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003268:	bf00      	nop
 800326a:	3724      	adds	r7, #36	; 0x24
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40023800 	.word	0x40023800
 8003278:	40013800 	.word	0x40013800
 800327c:	40020000 	.word	0x40020000
 8003280:	40020400 	.word	0x40020400
 8003284:	40020800 	.word	0x40020800
 8003288:	40020c00 	.word	0x40020c00
 800328c:	40021000 	.word	0x40021000
 8003290:	40021400 	.word	0x40021400
 8003294:	40021800 	.word	0x40021800
 8003298:	40021c00 	.word	0x40021c00
 800329c:	40013c00 	.word	0x40013c00

080032a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e11f      	b.n	80034f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fe fecc 	bl	8002064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2224      	movs	r2, #36	; 0x24
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003304:	f003 f86e 	bl	80063e4 <HAL_RCC_GetPCLK1Freq>
 8003308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4a7b      	ldr	r2, [pc, #492]	; (80034fc <HAL_I2C_Init+0x25c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d807      	bhi.n	8003324 <HAL_I2C_Init+0x84>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a7a      	ldr	r2, [pc, #488]	; (8003500 <HAL_I2C_Init+0x260>)
 8003318:	4293      	cmp	r3, r2
 800331a:	bf94      	ite	ls
 800331c:	2301      	movls	r3, #1
 800331e:	2300      	movhi	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e006      	b.n	8003332 <HAL_I2C_Init+0x92>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a77      	ldr	r2, [pc, #476]	; (8003504 <HAL_I2C_Init+0x264>)
 8003328:	4293      	cmp	r3, r2
 800332a:	bf94      	ite	ls
 800332c:	2301      	movls	r3, #1
 800332e:	2300      	movhi	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e0db      	b.n	80034f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a72      	ldr	r2, [pc, #456]	; (8003508 <HAL_I2C_Init+0x268>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	0c9b      	lsrs	r3, r3, #18
 8003344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a64      	ldr	r2, [pc, #400]	; (80034fc <HAL_I2C_Init+0x25c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d802      	bhi.n	8003374 <HAL_I2C_Init+0xd4>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	3301      	adds	r3, #1
 8003372:	e009      	b.n	8003388 <HAL_I2C_Init+0xe8>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800337a:	fb02 f303 	mul.w	r3, r2, r3
 800337e:	4a63      	ldr	r2, [pc, #396]	; (800350c <HAL_I2C_Init+0x26c>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	099b      	lsrs	r3, r3, #6
 8003386:	3301      	adds	r3, #1
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	430b      	orrs	r3, r1
 800338e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800339a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4956      	ldr	r1, [pc, #344]	; (80034fc <HAL_I2C_Init+0x25c>)
 80033a4:	428b      	cmp	r3, r1
 80033a6:	d80d      	bhi.n	80033c4 <HAL_I2C_Init+0x124>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1e59      	subs	r1, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033bc:	2b04      	cmp	r3, #4
 80033be:	bf38      	it	cc
 80033c0:	2304      	movcc	r3, #4
 80033c2:	e04f      	b.n	8003464 <HAL_I2C_Init+0x1c4>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d111      	bne.n	80033f0 <HAL_I2C_Init+0x150>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1e58      	subs	r0, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	440b      	add	r3, r1
 80033da:	fbb0 f3f3 	udiv	r3, r0, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	e012      	b.n	8003416 <HAL_I2C_Init+0x176>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1e58      	subs	r0, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	0099      	lsls	r1, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	fbb0 f3f3 	udiv	r3, r0, r3
 8003406:	3301      	adds	r3, #1
 8003408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_Init+0x17e>
 800341a:	2301      	movs	r3, #1
 800341c:	e022      	b.n	8003464 <HAL_I2C_Init+0x1c4>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10e      	bne.n	8003444 <HAL_I2C_Init+0x1a4>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1e58      	subs	r0, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	440b      	add	r3, r1
 8003434:	fbb0 f3f3 	udiv	r3, r0, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003442:	e00f      	b.n	8003464 <HAL_I2C_Init+0x1c4>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1e58      	subs	r0, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	0099      	lsls	r1, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	fbb0 f3f3 	udiv	r3, r0, r3
 800345a:	3301      	adds	r3, #1
 800345c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	6809      	ldr	r1, [r1, #0]
 8003468:	4313      	orrs	r3, r2
 800346a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003492:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6911      	ldr	r1, [r2, #16]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68d2      	ldr	r2, [r2, #12]
 800349e:	4311      	orrs	r1, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	000186a0 	.word	0x000186a0
 8003500:	001e847f 	.word	0x001e847f
 8003504:	003d08ff 	.word	0x003d08ff
 8003508:	431bde83 	.word	0x431bde83
 800350c:	10624dd3 	.word	0x10624dd3

08003510 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	4608      	mov	r0, r1
 800351a:	4611      	mov	r1, r2
 800351c:	461a      	mov	r2, r3
 800351e:	4603      	mov	r3, r0
 8003520:	817b      	strh	r3, [r7, #10]
 8003522:	460b      	mov	r3, r1
 8003524:	813b      	strh	r3, [r7, #8]
 8003526:	4613      	mov	r3, r2
 8003528:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800352a:	f7ff f817 	bl	800255c <HAL_GetTick>
 800352e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b20      	cmp	r3, #32
 800353a:	f040 80d9 	bne.w	80036f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	2319      	movs	r3, #25
 8003544:	2201      	movs	r2, #1
 8003546:	496d      	ldr	r1, [pc, #436]	; (80036fc <HAL_I2C_Mem_Write+0x1ec>)
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f002 f8e7 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
 8003556:	e0cc      	b.n	80036f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_I2C_Mem_Write+0x56>
 8003562:	2302      	movs	r3, #2
 8003564:	e0c5      	b.n	80036f2 <HAL_I2C_Mem_Write+0x1e2>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d007      	beq.n	800358c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800359a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2221      	movs	r2, #33	; 0x21
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2240      	movs	r2, #64	; 0x40
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a3a      	ldr	r2, [r7, #32]
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4a4d      	ldr	r2, [pc, #308]	; (8003700 <HAL_I2C_Mem_Write+0x1f0>)
 80035cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035ce:	88f8      	ldrh	r0, [r7, #6]
 80035d0:	893a      	ldrh	r2, [r7, #8]
 80035d2:	8979      	ldrh	r1, [r7, #10]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	4603      	mov	r3, r0
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f001 fe76 	bl	80052d0 <I2C_RequestMemoryWrite>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d052      	beq.n	8003690 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e081      	b.n	80036f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f002 f968 	bl	80058c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00d      	beq.n	800361a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	2b04      	cmp	r3, #4
 8003604:	d107      	bne.n	8003616 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003614:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e06b      	b.n	80036f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	781a      	ldrb	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29b      	uxth	r3, r3
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b04      	cmp	r3, #4
 8003656:	d11b      	bne.n	8003690 <HAL_I2C_Mem_Write+0x180>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365c:	2b00      	cmp	r3, #0
 800365e:	d017      	beq.n	8003690 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1aa      	bne.n	80035ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f002 f954 	bl	800594a <I2C_WaitOnBTFFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00d      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d107      	bne.n	80036c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e016      	b.n	80036f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e000      	b.n	80036f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036f0:	2302      	movs	r3, #2
  }
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	00100002 	.word	0x00100002
 8003700:	ffff0000 	.word	0xffff0000

08003704 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08c      	sub	sp, #48	; 0x30
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	4608      	mov	r0, r1
 800370e:	4611      	mov	r1, r2
 8003710:	461a      	mov	r2, r3
 8003712:	4603      	mov	r3, r0
 8003714:	817b      	strh	r3, [r7, #10]
 8003716:	460b      	mov	r3, r1
 8003718:	813b      	strh	r3, [r7, #8]
 800371a:	4613      	mov	r3, r2
 800371c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800371e:	f7fe ff1d 	bl	800255c <HAL_GetTick>
 8003722:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b20      	cmp	r3, #32
 800372e:	f040 8208 	bne.w	8003b42 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2319      	movs	r3, #25
 8003738:	2201      	movs	r2, #1
 800373a:	497b      	ldr	r1, [pc, #492]	; (8003928 <HAL_I2C_Mem_Read+0x224>)
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f001 ffed 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
 800374a:	e1fb      	b.n	8003b44 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_I2C_Mem_Read+0x56>
 8003756:	2302      	movs	r3, #2
 8003758:	e1f4      	b.n	8003b44 <HAL_I2C_Mem_Read+0x440>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b01      	cmp	r3, #1
 800376e:	d007      	beq.n	8003780 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800378e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2222      	movs	r2, #34	; 0x22
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2240      	movs	r2, #64	; 0x40
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a5b      	ldr	r2, [pc, #364]	; (800392c <HAL_I2C_Mem_Read+0x228>)
 80037c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037c2:	88f8      	ldrh	r0, [r7, #6]
 80037c4:	893a      	ldrh	r2, [r7, #8]
 80037c6:	8979      	ldrh	r1, [r7, #10]
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	9301      	str	r3, [sp, #4]
 80037cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	4603      	mov	r3, r0
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f001 fe12 	bl	80053fc <I2C_RequestMemoryRead>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e1b0      	b.n	8003b44 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d113      	bne.n	8003812 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ea:	2300      	movs	r3, #0
 80037ec:	623b      	str	r3, [r7, #32]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	623b      	str	r3, [r7, #32]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	623b      	str	r3, [r7, #32]
 80037fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e184      	b.n	8003b1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003816:	2b01      	cmp	r3, #1
 8003818:	d11b      	bne.n	8003852 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003828:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	e164      	b.n	8003b1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003856:	2b02      	cmp	r3, #2
 8003858:	d11b      	bne.n	8003892 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003868:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003878:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	e144      	b.n	8003b1c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038a8:	e138      	b.n	8003b1c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	f200 80f1 	bhi.w	8003a96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d123      	bne.n	8003904 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f002 f8b5 	bl	8005a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e139      	b.n	8003b44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	691a      	ldr	r2, [r3, #16]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003902:	e10b      	b.n	8003b1c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003908:	2b02      	cmp	r3, #2
 800390a:	d14e      	bne.n	80039aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003912:	2200      	movs	r2, #0
 8003914:	4906      	ldr	r1, [pc, #24]	; (8003930 <HAL_I2C_Mem_Read+0x22c>)
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f001 ff00 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e10e      	b.n	8003b44 <HAL_I2C_Mem_Read+0x440>
 8003926:	bf00      	nop
 8003928:	00100002 	.word	0x00100002
 800392c:	ffff0000 	.word	0xffff0000
 8003930:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003942:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039a8:	e0b8      	b.n	8003b1c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b0:	2200      	movs	r2, #0
 80039b2:	4966      	ldr	r1, [pc, #408]	; (8003b4c <HAL_I2C_Mem_Read+0x448>)
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f001 feb1 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0bf      	b.n	8003b44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	494f      	ldr	r1, [pc, #316]	; (8003b4c <HAL_I2C_Mem_Read+0x448>)
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f001 fe83 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e091      	b.n	8003b44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a94:	e042      	b.n	8003b1c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f001 ffc8 	bl	8005a30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e04c      	b.n	8003b44 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d118      	bne.n	8003b1c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f47f aec2 	bne.w	80038aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e000      	b.n	8003b44 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b42:	2302      	movs	r3, #2
  }
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3728      	adds	r7, #40	; 0x28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	00010004 	.word	0x00010004

08003b50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b78:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d003      	beq.n	8003b88 <HAL_I2C_EV_IRQHandler+0x38>
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	2b40      	cmp	r3, #64	; 0x40
 8003b84:	f040 80bd 	bne.w	8003d02 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10d      	bne.n	8003bbe <HAL_I2C_EV_IRQHandler+0x6e>
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003ba8:	d003      	beq.n	8003bb2 <HAL_I2C_EV_IRQHandler+0x62>
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003bb0:	d101      	bne.n	8003bb6 <HAL_I2C_EV_IRQHandler+0x66>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <HAL_I2C_EV_IRQHandler+0x68>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	f000 812e 	beq.w	8003e1a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00c      	beq.n	8003be2 <HAL_I2C_EV_IRQHandler+0x92>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	0a5b      	lsrs	r3, r3, #9
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d006      	beq.n	8003be2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f001 ffb0 	bl	8005b3a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fd62 	bl	80046a4 <I2C_Master_SB>
 8003be0:	e08e      	b.n	8003d00 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	08db      	lsrs	r3, r3, #3
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_I2C_EV_IRQHandler+0xb2>
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	0a5b      	lsrs	r3, r3, #9
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fdd8 	bl	80047b0 <I2C_Master_ADD10>
 8003c00:	e07e      	b.n	8003d00 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	085b      	lsrs	r3, r3, #1
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <HAL_I2C_EV_IRQHandler+0xd2>
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	0a5b      	lsrs	r3, r3, #9
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fdf2 	bl	8004804 <I2C_Master_ADDR>
 8003c20:	e06e      	b.n	8003d00 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	089b      	lsrs	r3, r3, #2
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d037      	beq.n	8003c9e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c3c:	f000 80ef 	beq.w	8003e1e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	09db      	lsrs	r3, r3, #7
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00f      	beq.n	8003c6c <HAL_I2C_EV_IRQHandler+0x11c>
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	0a9b      	lsrs	r3, r3, #10
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d009      	beq.n	8003c6c <HAL_I2C_EV_IRQHandler+0x11c>
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d103      	bne.n	8003c6c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f9ef 	bl	8004048 <I2C_MasterTransmit_TXE>
 8003c6a:	e049      	b.n	8003d00 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80d2 	beq.w	8003e1e <HAL_I2C_EV_IRQHandler+0x2ce>
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	0a5b      	lsrs	r3, r3, #9
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80cb 	beq.w	8003e1e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d103      	bne.n	8003c96 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fa76 	bl	8004180 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c94:	e0c3      	b.n	8003e1e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fada 	bl	8004250 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c9c:	e0bf      	b.n	8003e1e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cac:	f000 80b7 	beq.w	8003e1e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	099b      	lsrs	r3, r3, #6
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00f      	beq.n	8003cdc <HAL_I2C_EV_IRQHandler+0x18c>
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	0a9b      	lsrs	r3, r3, #10
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d009      	beq.n	8003cdc <HAL_I2C_EV_IRQHandler+0x18c>
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d103      	bne.n	8003cdc <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fb4a 	bl	800436e <I2C_MasterReceive_RXNE>
 8003cda:	e011      	b.n	8003d00 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	089b      	lsrs	r3, r3, #2
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 809a 	beq.w	8003e1e <HAL_I2C_EV_IRQHandler+0x2ce>
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	0a5b      	lsrs	r3, r3, #9
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8093 	beq.w	8003e1e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fbe9 	bl	80044d0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cfe:	e08e      	b.n	8003e1e <HAL_I2C_EV_IRQHandler+0x2ce>
 8003d00:	e08d      	b.n	8003e1e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	e007      	b.n	8003d24 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	085b      	lsrs	r3, r3, #1
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d012      	beq.n	8003d56 <HAL_I2C_EV_IRQHandler+0x206>
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	0a5b      	lsrs	r3, r3, #9
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00c      	beq.n	8003d56 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003d4c:	69b9      	ldr	r1, [r7, #24]
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 ffa7 	bl	8004ca2 <I2C_Slave_ADDR>
 8003d54:	e066      	b.n	8003e24 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d009      	beq.n	8003d76 <HAL_I2C_EV_IRQHandler+0x226>
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	0a5b      	lsrs	r3, r3, #9
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 ffdc 	bl	8004d2c <I2C_Slave_STOPF>
 8003d74:	e056      	b.n	8003e24 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d76:	7bbb      	ldrb	r3, [r7, #14]
 8003d78:	2b21      	cmp	r3, #33	; 0x21
 8003d7a:	d002      	beq.n	8003d82 <HAL_I2C_EV_IRQHandler+0x232>
 8003d7c:	7bbb      	ldrb	r3, [r7, #14]
 8003d7e:	2b29      	cmp	r3, #41	; 0x29
 8003d80:	d125      	bne.n	8003dce <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	09db      	lsrs	r3, r3, #7
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00f      	beq.n	8003dae <HAL_I2C_EV_IRQHandler+0x25e>
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	0a9b      	lsrs	r3, r3, #10
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_I2C_EV_IRQHandler+0x25e>
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	089b      	lsrs	r3, r3, #2
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d103      	bne.n	8003dae <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 febd 	bl	8004b26 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dac:	e039      	b.n	8003e22 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	089b      	lsrs	r3, r3, #2
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d033      	beq.n	8003e22 <HAL_I2C_EV_IRQHandler+0x2d2>
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	0a5b      	lsrs	r3, r3, #9
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d02d      	beq.n	8003e22 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 feea 	bl	8004ba0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dcc:	e029      	b.n	8003e22 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	099b      	lsrs	r3, r3, #6
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00f      	beq.n	8003dfa <HAL_I2C_EV_IRQHandler+0x2aa>
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	0a9b      	lsrs	r3, r3, #10
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <HAL_I2C_EV_IRQHandler+0x2aa>
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d103      	bne.n	8003dfa <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fef5 	bl	8004be2 <I2C_SlaveReceive_RXNE>
 8003df8:	e014      	b.n	8003e24 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	089b      	lsrs	r3, r3, #2
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00e      	beq.n	8003e24 <HAL_I2C_EV_IRQHandler+0x2d4>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	0a5b      	lsrs	r3, r3, #9
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d008      	beq.n	8003e24 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 ff23 	bl	8004c5e <I2C_SlaveReceive_BTF>
 8003e18:	e004      	b.n	8003e24 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8003e1a:	bf00      	nop
 8003e1c:	e002      	b.n	8003e24 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e1e:	bf00      	nop
 8003e20:	e000      	b.n	8003e24 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e22:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b08a      	sub	sp, #40	; 0x28
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003e42:	2300      	movs	r3, #0
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e4c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	0a1b      	lsrs	r3, r3, #8
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00e      	beq.n	8003e78 <HAL_I2C_ER_IRQHandler+0x4e>
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	0a1b      	lsrs	r3, r3, #8
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d008      	beq.n	8003e78 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e76:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	0a5b      	lsrs	r3, r3, #9
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00e      	beq.n	8003ea2 <HAL_I2C_ER_IRQHandler+0x78>
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	f043 0302 	orr.w	r3, r3, #2
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003ea0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	0a9b      	lsrs	r3, r3, #10
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d03f      	beq.n	8003f2e <HAL_I2C_ER_IRQHandler+0x104>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	0a1b      	lsrs	r3, r3, #8
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d039      	beq.n	8003f2e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003eba:	7efb      	ldrb	r3, [r7, #27]
 8003ebc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003ed4:	7ebb      	ldrb	r3, [r7, #26]
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	d112      	bne.n	8003f00 <HAL_I2C_ER_IRQHandler+0xd6>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10f      	bne.n	8003f00 <HAL_I2C_ER_IRQHandler+0xd6>
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	2b21      	cmp	r3, #33	; 0x21
 8003ee4:	d008      	beq.n	8003ef8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003ee6:	7cfb      	ldrb	r3, [r7, #19]
 8003ee8:	2b29      	cmp	r3, #41	; 0x29
 8003eea:	d005      	beq.n	8003ef8 <HAL_I2C_ER_IRQHandler+0xce>
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	2b28      	cmp	r3, #40	; 0x28
 8003ef0:	d106      	bne.n	8003f00 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b21      	cmp	r3, #33	; 0x21
 8003ef6:	d103      	bne.n	8003f00 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f001 f847 	bl	8004f8c <I2C_Slave_AF>
 8003efe:	e016      	b.n	8003f2e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f08:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	f043 0304 	orr.w	r3, r3, #4
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f12:	7efb      	ldrb	r3, [r7, #27]
 8003f14:	2b10      	cmp	r3, #16
 8003f16:	d002      	beq.n	8003f1e <HAL_I2C_ER_IRQHandler+0xf4>
 8003f18:	7efb      	ldrb	r3, [r7, #27]
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d107      	bne.n	8003f2e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	0adb      	lsrs	r3, r3, #11
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00e      	beq.n	8003f58 <HAL_I2C_ER_IRQHandler+0x12e>
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	0a1b      	lsrs	r3, r3, #8
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d008      	beq.n	8003f58 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	f043 0308 	orr.w	r3, r3, #8
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003f56:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d008      	beq.n	8003f70 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f001 f87e 	bl	800506c <I2C_ITError>
  }
}
 8003f70:	bf00      	nop
 8003f72:	3728      	adds	r7, #40	; 0x28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	70fb      	strb	r3, [r7, #3]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004056:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800405e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406a:	2b00      	cmp	r3, #0
 800406c:	d150      	bne.n	8004110 <I2C_MasterTransmit_TXE+0xc8>
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	2b21      	cmp	r3, #33	; 0x21
 8004072:	d14d      	bne.n	8004110 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b08      	cmp	r3, #8
 8004078:	d01d      	beq.n	80040b6 <I2C_MasterTransmit_TXE+0x6e>
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b20      	cmp	r3, #32
 800407e:	d01a      	beq.n	80040b6 <I2C_MasterTransmit_TXE+0x6e>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004086:	d016      	beq.n	80040b6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004096:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2211      	movs	r2, #17
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff ff62 	bl	8003f78 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040b4:	e060      	b.n	8004178 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80040c4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b40      	cmp	r3, #64	; 0x40
 80040ee:	d107      	bne.n	8004100 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff ff7d 	bl	8003ff8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040fe:	e03b      	b.n	8004178 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ff35 	bl	8003f78 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800410e:	e033      	b.n	8004178 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	2b21      	cmp	r3, #33	; 0x21
 8004114:	d005      	beq.n	8004122 <I2C_MasterTransmit_TXE+0xda>
 8004116:	7bbb      	ldrb	r3, [r7, #14]
 8004118:	2b40      	cmp	r3, #64	; 0x40
 800411a:	d12d      	bne.n	8004178 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	2b22      	cmp	r3, #34	; 0x22
 8004120:	d12a      	bne.n	8004178 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d108      	bne.n	800413e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800413c:	e01c      	b.n	8004178 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b40      	cmp	r3, #64	; 0x40
 8004148:	d103      	bne.n	8004152 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f880 	bl	8004250 <I2C_MemoryTransmit_TXE_BTF>
}
 8004150:	e012      	b.n	8004178 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	781a      	ldrb	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b01      	subs	r3, #1
 8004170:	b29a      	uxth	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004176:	e7ff      	b.n	8004178 <I2C_MasterTransmit_TXE+0x130>
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b21      	cmp	r3, #33	; 0x21
 8004198:	d156      	bne.n	8004248 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d012      	beq.n	80041ca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	781a      	ldrb	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80041c8:	e03e      	b.n	8004248 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d01d      	beq.n	800420c <I2C_MasterTransmit_BTF+0x8c>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d01a      	beq.n	800420c <I2C_MasterTransmit_BTF+0x8c>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041dc:	d016      	beq.n	800420c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041ec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2211      	movs	r2, #17
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff feb7 	bl	8003f78 <HAL_I2C_MasterTxCpltCallback>
}
 800420a:	e01d      	b.n	8004248 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800421a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff fe98 	bl	8003f78 <HAL_I2C_MasterTxCpltCallback>
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004264:	2b00      	cmp	r3, #0
 8004266:	d11d      	bne.n	80042a4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d10b      	bne.n	8004288 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004274:	b2da      	uxtb	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004280:	1c9a      	adds	r2, r3, #2
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004286:	e06e      	b.n	8004366 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428c:	b29b      	uxth	r3, r3
 800428e:	121b      	asrs	r3, r3, #8
 8004290:	b2da      	uxtb	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042a2:	e060      	b.n	8004366 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d10b      	bne.n	80042c4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042c2:	e050      	b.n	8004366 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d14c      	bne.n	8004366 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b22      	cmp	r3, #34	; 0x22
 80042d0:	d108      	bne.n	80042e4 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e0:	601a      	str	r2, [r3, #0]
}
 80042e2:	e040      	b.n	8004366 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d015      	beq.n	800431a <I2C_MemoryTransmit_TXE_BTF+0xca>
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	2b21      	cmp	r3, #33	; 0x21
 80042f2:	d112      	bne.n	800431a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	781a      	ldrb	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004318:	e025      	b.n	8004366 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d120      	bne.n	8004366 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	2b21      	cmp	r3, #33	; 0x21
 8004328:	d11d      	bne.n	8004366 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004338:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004348:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff fe49 	bl	8003ff8 <HAL_I2C_MemTxCpltCallback>
}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b22      	cmp	r3, #34	; 0x22
 8004380:	f040 80a2 	bne.w	80044c8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b03      	cmp	r3, #3
 8004390:	d921      	bls.n	80043d6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b03      	cmp	r3, #3
 80043c0:	f040 8082 	bne.w	80044c8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80043d4:	e078      	b.n	80044c8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d074      	beq.n	80044c8 <I2C_MasterReceive_RXNE+0x15a>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d002      	beq.n	80043ea <I2C_MasterReceive_RXNE+0x7c>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d16e      	bne.n	80044c8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f001 faee 	bl	80059cc <I2C_WaitOnSTOPRequestThroughIT>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d142      	bne.n	800447c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004404:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004414:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b40      	cmp	r3, #64	; 0x40
 800444e:	d10a      	bne.n	8004466 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7ff fdd4 	bl	800400c <HAL_I2C_MemRxCpltCallback>
}
 8004464:	e030      	b.n	80044c8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2212      	movs	r2, #18
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff fd89 	bl	8003f8c <HAL_I2C_MasterRxCpltCallback>
}
 800447a:	e025      	b.n	80044c8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800448a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff fdac 	bl	8004020 <HAL_I2C_ErrorCallback>
}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d11b      	bne.n	8004520 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800451e:	e0bd      	b.n	800469c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b03      	cmp	r3, #3
 8004528:	d129      	bne.n	800457e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004538:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b04      	cmp	r3, #4
 800453e:	d00a      	beq.n	8004556 <I2C_MasterReceive_BTF+0x86>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d007      	beq.n	8004556 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004554:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800457c:	e08e      	b.n	800469c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d176      	bne.n	8004676 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d002      	beq.n	8004594 <I2C_MasterReceive_BTF+0xc4>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b10      	cmp	r3, #16
 8004592:	d108      	bne.n	80045a6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	e019      	b.n	80045da <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d002      	beq.n	80045b2 <I2C_MasterReceive_BTF+0xe2>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d108      	bne.n	80045c4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e00a      	b.n	80045da <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d007      	beq.n	80045da <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691a      	ldr	r2, [r3, #16]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	b2d2      	uxtb	r2, r2
 80045e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004634:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b40      	cmp	r3, #64	; 0x40
 8004648:	d10a      	bne.n	8004660 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff fcd7 	bl	800400c <HAL_I2C_MemRxCpltCallback>
}
 800465e:	e01d      	b.n	800469c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2212      	movs	r2, #18
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff fc8c 	bl	8003f8c <HAL_I2C_MasterRxCpltCallback>
}
 8004674:	e012      	b.n	800469c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800469c:	bf00      	nop
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b40      	cmp	r3, #64	; 0x40
 80046b6:	d117      	bne.n	80046e8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d109      	bne.n	80046d4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	461a      	mov	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046d0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80046d2:	e067      	b.n	80047a4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	611a      	str	r2, [r3, #16]
}
 80046e6:	e05d      	b.n	80047a4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046f0:	d133      	bne.n	800475a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b21      	cmp	r3, #33	; 0x21
 80046fc:	d109      	bne.n	8004712 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	b2db      	uxtb	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800470e:	611a      	str	r2, [r3, #16]
 8004710:	e008      	b.n	8004724 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	b2db      	uxtb	r3, r3
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	b2da      	uxtb	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004728:	2b00      	cmp	r3, #0
 800472a:	d004      	beq.n	8004736 <I2C_Master_SB+0x92>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	2b00      	cmp	r3, #0
 8004734:	d108      	bne.n	8004748 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	2b00      	cmp	r3, #0
 800473c:	d032      	beq.n	80047a4 <I2C_Master_SB+0x100>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d02d      	beq.n	80047a4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004756:	605a      	str	r2, [r3, #4]
}
 8004758:	e024      	b.n	80047a4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10e      	bne.n	8004780 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	b29b      	uxth	r3, r3
 8004768:	11db      	asrs	r3, r3, #7
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f003 0306 	and.w	r3, r3, #6
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f063 030f 	orn	r3, r3, #15
 8004776:	b2da      	uxtb	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	611a      	str	r2, [r3, #16]
}
 800477e:	e011      	b.n	80047a4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004784:	2b01      	cmp	r3, #1
 8004786:	d10d      	bne.n	80047a4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478c:	b29b      	uxth	r3, r3
 800478e:	11db      	asrs	r3, r3, #7
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f003 0306 	and.w	r3, r3, #6
 8004796:	b2db      	uxtb	r3, r3
 8004798:	f063 030e 	orn	r3, r3, #14
 800479c:	b2da      	uxtb	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	611a      	str	r2, [r3, #16]
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d103      	bne.n	80047d4 <I2C_Master_ADD10+0x24>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d011      	beq.n	80047f8 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d104      	bne.n	80047e8 <I2C_Master_ADD10+0x38>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047f6:	605a      	str	r2, [r3, #4]
    }
  }
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004804:	b480      	push	{r7}
 8004806:	b091      	sub	sp, #68	; 0x44
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004812:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b22      	cmp	r3, #34	; 0x22
 800482c:	f040 8169 	bne.w	8004b02 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10f      	bne.n	8004858 <I2C_Master_ADDR+0x54>
 8004838:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d10b      	bne.n	8004858 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004840:	2300      	movs	r3, #0
 8004842:	633b      	str	r3, [r7, #48]	; 0x30
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	633b      	str	r3, [r7, #48]	; 0x30
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	633b      	str	r3, [r7, #48]	; 0x30
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	e160      	b.n	8004b1a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485c:	2b00      	cmp	r3, #0
 800485e:	d11d      	bne.n	800489c <I2C_Master_ADDR+0x98>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004868:	d118      	bne.n	800489c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800486a:	2300      	movs	r3, #0
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800488e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	651a      	str	r2, [r3, #80]	; 0x50
 800489a:	e13e      	b.n	8004b1a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d113      	bne.n	80048ce <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a6:	2300      	movs	r3, #0
 80048a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	e115      	b.n	8004afa <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	f040 808a 	bne.w	80049ee <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80048da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048e0:	d137      	bne.n	8004952 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004900:	d113      	bne.n	800492a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004910:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	e0e7      	b.n	8004afa <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492a:	2300      	movs	r3, #0
 800492c:	623b      	str	r3, [r7, #32]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	623b      	str	r3, [r7, #32]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	623b      	str	r3, [r7, #32]
 800493e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	e0d3      	b.n	8004afa <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004954:	2b08      	cmp	r3, #8
 8004956:	d02e      	beq.n	80049b6 <I2C_Master_ADDR+0x1b2>
 8004958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495a:	2b20      	cmp	r3, #32
 800495c:	d02b      	beq.n	80049b6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800495e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004960:	2b12      	cmp	r3, #18
 8004962:	d102      	bne.n	800496a <I2C_Master_ADDR+0x166>
 8004964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004966:	2b01      	cmp	r3, #1
 8004968:	d125      	bne.n	80049b6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800496a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496c:	2b04      	cmp	r3, #4
 800496e:	d00e      	beq.n	800498e <I2C_Master_ADDR+0x18a>
 8004970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004972:	2b02      	cmp	r3, #2
 8004974:	d00b      	beq.n	800498e <I2C_Master_ADDR+0x18a>
 8004976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004978:	2b10      	cmp	r3, #16
 800497a:	d008      	beq.n	800498e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e007      	b.n	800499e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800499c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	e0a1      	b.n	8004afa <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049c4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c6:	2300      	movs	r3, #0
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	61bb      	str	r3, [r7, #24]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e085      	b.n	8004afa <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d14d      	bne.n	8004a94 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d016      	beq.n	8004a2c <I2C_Master_ADDR+0x228>
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d013      	beq.n	8004a2c <I2C_Master_ADDR+0x228>
 8004a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a06:	2b10      	cmp	r3, #16
 8004a08:	d010      	beq.n	8004a2c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a18:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e007      	b.n	8004a3c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a3a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4a:	d117      	bne.n	8004a7c <I2C_Master_ADDR+0x278>
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a52:	d00b      	beq.n	8004a6c <I2C_Master_ADDR+0x268>
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d008      	beq.n	8004a6c <I2C_Master_ADDR+0x268>
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d005      	beq.n	8004a6c <I2C_Master_ADDR+0x268>
 8004a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a62:	2b10      	cmp	r3, #16
 8004a64:	d002      	beq.n	8004a6c <I2C_Master_ADDR+0x268>
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d107      	bne.n	8004a7c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a7a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	e032      	b.n	8004afa <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aa2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab2:	d117      	bne.n	8004ae4 <I2C_Master_ADDR+0x2e0>
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004aba:	d00b      	beq.n	8004ad4 <I2C_Master_ADDR+0x2d0>
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d008      	beq.n	8004ad4 <I2C_Master_ADDR+0x2d0>
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d005      	beq.n	8004ad4 <I2C_Master_ADDR+0x2d0>
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	2b10      	cmp	r3, #16
 8004acc:	d002      	beq.n	8004ad4 <I2C_Master_ADDR+0x2d0>
 8004ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d107      	bne.n	8004ae4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ae2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b00:	e00b      	b.n	8004b1a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	68fb      	ldr	r3, [r7, #12]
}
 8004b18:	e7ff      	b.n	8004b1a <I2C_Master_ADDR+0x316>
 8004b1a:	bf00      	nop
 8004b1c:	3744      	adds	r7, #68	; 0x44
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b34:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d02b      	beq.n	8004b98 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	781a      	ldrb	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d114      	bne.n	8004b98 <I2C_SlaveTransmit_TXE+0x72>
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	2b29      	cmp	r3, #41	; 0x29
 8004b72:	d111      	bne.n	8004b98 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b82:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2221      	movs	r2, #33	; 0x21
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2228      	movs	r2, #40	; 0x28
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fa04 	bl	8003fa0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d011      	beq.n	8004bd6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	781a      	ldrb	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d02c      	beq.n	8004c56 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d114      	bne.n	8004c56 <I2C_SlaveReceive_RXNE+0x74>
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c30:	d111      	bne.n	8004c56 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c40:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2222      	movs	r2, #34	; 0x22
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2228      	movs	r2, #40	; 0x28
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff f9af 	bl	8003fb4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d012      	beq.n	8004c96 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cbc:	2b28      	cmp	r3, #40	; 0x28
 8004cbe:	d127      	bne.n	8004d10 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cce:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	09db      	lsrs	r3, r3, #7
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d103      	bne.n	8004cf4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	81bb      	strh	r3, [r7, #12]
 8004cf2:	e002      	b.n	8004cfa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d02:	89ba      	ldrh	r2, [r7, #12]
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	4619      	mov	r1, r3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff f95d 	bl	8003fc8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d0e:	e008      	b.n	8004d22 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0202 	mvn.w	r2, #2
 8004d18:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d4a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f042 0201 	orr.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d78:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d88:	d172      	bne.n	8004e70 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
 8004d8c:	2b22      	cmp	r3, #34	; 0x22
 8004d8e:	d002      	beq.n	8004d96 <I2C_Slave_STOPF+0x6a>
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b2a      	cmp	r3, #42	; 0x2a
 8004d94:	d135      	bne.n	8004e02 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d005      	beq.n	8004dba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f043 0204 	orr.w	r2, r3, #4
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dc8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe f8bd 	bl	8002f4e <HAL_DMA_GetState>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d049      	beq.n	8004e6e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	4a69      	ldr	r2, [pc, #420]	; (8004f84 <I2C_Slave_STOPF+0x258>)
 8004de0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe f88f 	bl	8002f0a <HAL_DMA_Abort_IT>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d03d      	beq.n	8004e6e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e00:	e035      	b.n	8004e6e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f043 0204 	orr.w	r2, r3, #4
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe f887 	bl	8002f4e <HAL_DMA_GetState>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d014      	beq.n	8004e70 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4a:	4a4e      	ldr	r2, [pc, #312]	; (8004f84 <I2C_Slave_STOPF+0x258>)
 8004e4c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fe f859 	bl	8002f0a <HAL_DMA_Abort_IT>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d008      	beq.n	8004e70 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e68:	4610      	mov	r0, r2
 8004e6a:	4798      	blx	r3
 8004e6c:	e000      	b.n	8004e70 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e6e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d03e      	beq.n	8004ef8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d112      	bne.n	8004eae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb8:	2b40      	cmp	r3, #64	; 0x40
 8004eba:	d112      	bne.n	8004ee2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	f043 0204 	orr.w	r2, r3, #4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f8b3 	bl	800506c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f06:	e039      	b.n	8004f7c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f0c:	d109      	bne.n	8004f22 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2228      	movs	r2, #40	; 0x28
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff f849 	bl	8003fb4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b28      	cmp	r3, #40	; 0x28
 8004f2c:	d111      	bne.n	8004f52 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <I2C_Slave_STOPF+0x25c>)
 8004f32:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff f84a 	bl	8003fe4 <HAL_I2C_ListenCpltCallback>
}
 8004f50:	e014      	b.n	8004f7c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	2b22      	cmp	r3, #34	; 0x22
 8004f58:	d002      	beq.n	8004f60 <I2C_Slave_STOPF+0x234>
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	2b22      	cmp	r3, #34	; 0x22
 8004f5e:	d10d      	bne.n	8004f7c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff f81c 	bl	8003fb4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	080055cd 	.word	0x080055cd
 8004f88:	ffff0000 	.word	0xffff0000

08004f8c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d002      	beq.n	8004fae <I2C_Slave_AF+0x22>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b20      	cmp	r3, #32
 8004fac:	d129      	bne.n	8005002 <I2C_Slave_AF+0x76>
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	2b28      	cmp	r3, #40	; 0x28
 8004fb2:	d126      	bne.n	8005002 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a2c      	ldr	r2, [pc, #176]	; (8005068 <I2C_Slave_AF+0xdc>)
 8004fb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fc8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fd2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fe fff2 	bl	8003fe4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005000:	e02e      	b.n	8005060 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b21      	cmp	r3, #33	; 0x21
 8005006:	d126      	bne.n	8005056 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a17      	ldr	r2, [pc, #92]	; (8005068 <I2C_Slave_AF+0xdc>)
 800500c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2221      	movs	r2, #33	; 0x21
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005032:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800503c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fe ffa6 	bl	8003fa0 <HAL_I2C_SlaveTxCpltCallback>
}
 8005054:	e004      	b.n	8005060 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800505e:	615a      	str	r2, [r3, #20]
}
 8005060:	bf00      	nop
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	ffff0000 	.word	0xffff0000

0800506c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005082:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005084:	7bbb      	ldrb	r3, [r7, #14]
 8005086:	2b10      	cmp	r3, #16
 8005088:	d002      	beq.n	8005090 <I2C_ITError+0x24>
 800508a:	7bbb      	ldrb	r3, [r7, #14]
 800508c:	2b40      	cmp	r3, #64	; 0x40
 800508e:	d10a      	bne.n	80050a6 <I2C_ITError+0x3a>
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b22      	cmp	r3, #34	; 0x22
 8005094:	d107      	bne.n	80050a6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050a4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050ac:	2b28      	cmp	r3, #40	; 0x28
 80050ae:	d107      	bne.n	80050c0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2228      	movs	r2, #40	; 0x28
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80050be:	e015      	b.n	80050ec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ce:	d00a      	beq.n	80050e6 <I2C_ITError+0x7a>
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	2b60      	cmp	r3, #96	; 0x60
 80050d4:	d007      	beq.n	80050e6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050fa:	d162      	bne.n	80051c2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800510a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b01      	cmp	r3, #1
 8005118:	d020      	beq.n	800515c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511e:	4a6a      	ldr	r2, [pc, #424]	; (80052c8 <I2C_ITError+0x25c>)
 8005120:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005126:	4618      	mov	r0, r3
 8005128:	f7fd feef 	bl	8002f0a <HAL_DMA_Abort_IT>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 8089 	beq.w	8005246 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0201 	bic.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005156:	4610      	mov	r0, r2
 8005158:	4798      	blx	r3
 800515a:	e074      	b.n	8005246 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	4a59      	ldr	r2, [pc, #356]	; (80052c8 <I2C_ITError+0x25c>)
 8005162:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	4618      	mov	r0, r3
 800516a:	f7fd fece 	bl	8002f0a <HAL_DMA_Abort_IT>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d068      	beq.n	8005246 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517e:	2b40      	cmp	r3, #64	; 0x40
 8005180:	d10b      	bne.n	800519a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0201 	bic.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051bc:	4610      	mov	r0, r2
 80051be:	4798      	blx	r3
 80051c0:	e041      	b.n	8005246 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b60      	cmp	r3, #96	; 0x60
 80051cc:	d125      	bne.n	800521a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	d10b      	bne.n	8005202 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fe ff0e 	bl	8004034 <HAL_I2C_AbortCpltCallback>
 8005218:	e015      	b.n	8005246 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005224:	2b40      	cmp	r3, #64	; 0x40
 8005226:	d10b      	bne.n	8005240 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7fe feed 	bl	8004020 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10e      	bne.n	8005274 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800525c:	2b00      	cmp	r3, #0
 800525e:	d109      	bne.n	8005274 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005266:	2b00      	cmp	r3, #0
 8005268:	d104      	bne.n	8005274 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005270:	2b00      	cmp	r3, #0
 8005272:	d007      	beq.n	8005284 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005282:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	f003 0304 	and.w	r3, r3, #4
 8005294:	2b04      	cmp	r3, #4
 8005296:	d113      	bne.n	80052c0 <I2C_ITError+0x254>
 8005298:	7bfb      	ldrb	r3, [r7, #15]
 800529a:	2b28      	cmp	r3, #40	; 0x28
 800529c:	d110      	bne.n	80052c0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <I2C_ITError+0x260>)
 80052a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7fe fe92 	bl	8003fe4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	080055cd 	.word	0x080055cd
 80052cc:	ffff0000 	.word	0xffff0000

080052d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	4608      	mov	r0, r1
 80052da:	4611      	mov	r1, r2
 80052dc:	461a      	mov	r2, r3
 80052de:	4603      	mov	r3, r0
 80052e0:	817b      	strh	r3, [r7, #10]
 80052e2:	460b      	mov	r3, r1
 80052e4:	813b      	strh	r3, [r7, #8]
 80052e6:	4613      	mov	r3, r2
 80052e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	2200      	movs	r2, #0
 8005302:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 fa08 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00d      	beq.n	800532e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005320:	d103      	bne.n	800532a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005328:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e05f      	b.n	80053ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800532e:	897b      	ldrh	r3, [r7, #10]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800533c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	6a3a      	ldr	r2, [r7, #32]
 8005342:	492d      	ldr	r1, [pc, #180]	; (80053f8 <I2C_RequestMemoryWrite+0x128>)
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fa40 	bl	80057ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e04c      	b.n	80053ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800536a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800536c:	6a39      	ldr	r1, [r7, #32]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 faaa 	bl	80058c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00d      	beq.n	8005396 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	2b04      	cmp	r3, #4
 8005380:	d107      	bne.n	8005392 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005390:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e02b      	b.n	80053ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d105      	bne.n	80053a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800539c:	893b      	ldrh	r3, [r7, #8]
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	611a      	str	r2, [r3, #16]
 80053a6:	e021      	b.n	80053ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053a8:	893b      	ldrh	r3, [r7, #8]
 80053aa:	0a1b      	lsrs	r3, r3, #8
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b8:	6a39      	ldr	r1, [r7, #32]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 fa84 	bl	80058c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00d      	beq.n	80053e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d107      	bne.n	80053de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e005      	b.n	80053ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053e2:	893b      	ldrh	r3, [r7, #8]
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	00010002 	.word	0x00010002

080053fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af02      	add	r7, sp, #8
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	4608      	mov	r0, r1
 8005406:	4611      	mov	r1, r2
 8005408:	461a      	mov	r2, r3
 800540a:	4603      	mov	r3, r0
 800540c:	817b      	strh	r3, [r7, #10]
 800540e:	460b      	mov	r3, r1
 8005410:	813b      	strh	r3, [r7, #8]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005424:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005434:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	2200      	movs	r2, #0
 800543e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f96a 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00d      	beq.n	800546a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545c:	d103      	bne.n	8005466 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005464:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e0aa      	b.n	80055c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800546a:	897b      	ldrh	r3, [r7, #10]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005478:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	6a3a      	ldr	r2, [r7, #32]
 800547e:	4952      	ldr	r1, [pc, #328]	; (80055c8 <I2C_RequestMemoryRead+0x1cc>)
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f9a2 	bl	80057ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e097      	b.n	80055c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a8:	6a39      	ldr	r1, [r7, #32]
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 fa0c 	bl	80058c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00d      	beq.n	80054d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d107      	bne.n	80054ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e076      	b.n	80055c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d105      	bne.n	80054e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054d8:	893b      	ldrh	r3, [r7, #8]
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	611a      	str	r2, [r3, #16]
 80054e2:	e021      	b.n	8005528 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054e4:	893b      	ldrh	r3, [r7, #8]
 80054e6:	0a1b      	lsrs	r3, r3, #8
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f4:	6a39      	ldr	r1, [r7, #32]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f9e6 	bl	80058c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00d      	beq.n	800551e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	2b04      	cmp	r3, #4
 8005508:	d107      	bne.n	800551a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005518:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e050      	b.n	80055c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800551e:	893b      	ldrh	r3, [r7, #8]
 8005520:	b2da      	uxtb	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552a:	6a39      	ldr	r1, [r7, #32]
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f9cb 	bl	80058c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00d      	beq.n	8005554 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	2b04      	cmp	r3, #4
 800553e:	d107      	bne.n	8005550 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800554e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e035      	b.n	80055c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005562:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	2200      	movs	r2, #0
 800556c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f8d3 	bl	800571c <I2C_WaitOnFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00d      	beq.n	8005598 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558a:	d103      	bne.n	8005594 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005592:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e013      	b.n	80055c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005598:	897b      	ldrh	r3, [r7, #10]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	6a3a      	ldr	r2, [r7, #32]
 80055ac:	4906      	ldr	r1, [pc, #24]	; (80055c8 <I2C_RequestMemoryRead+0x1cc>)
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 f90b 	bl	80057ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e000      	b.n	80055c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	00010002 	.word	0x00010002

080055cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80055e6:	4b4b      	ldr	r3, [pc, #300]	; (8005714 <I2C_DMAAbort+0x148>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	08db      	lsrs	r3, r3, #3
 80055ec:	4a4a      	ldr	r2, [pc, #296]	; (8005718 <I2C_DMAAbort+0x14c>)
 80055ee:	fba2 2303 	umull	r2, r3, r2, r3
 80055f2:	0a1a      	lsrs	r2, r3, #8
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	00da      	lsls	r2, r3, #3
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f043 0220 	orr.w	r2, r3, #32
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005612:	e00a      	b.n	800562a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3b01      	subs	r3, #1
 8005618:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005628:	d0ea      	beq.n	8005600 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	2200      	movs	r2, #0
 8005638:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	2200      	movs	r2, #0
 8005648:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005658:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2200      	movs	r2, #0
 800565e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566c:	2200      	movs	r2, #0
 800566e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	2200      	movs	r2, #0
 800567e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b60      	cmp	r3, #96	; 0x60
 800569a:	d10e      	bne.n	80056ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2200      	movs	r2, #0
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056b2:	6978      	ldr	r0, [r7, #20]
 80056b4:	f7fe fcbe 	bl	8004034 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056b8:	e027      	b.n	800570a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056ba:	7cfb      	ldrb	r3, [r7, #19]
 80056bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056c0:	2b28      	cmp	r3, #40	; 0x28
 80056c2:	d117      	bne.n	80056f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2200      	movs	r2, #0
 80056e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2228      	movs	r2, #40	; 0x28
 80056ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80056f2:	e007      	b.n	8005704 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005704:	6978      	ldr	r0, [r7, #20]
 8005706:	f7fe fc8b 	bl	8004020 <HAL_I2C_ErrorCallback>
}
 800570a:	bf00      	nop
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000000 	.word	0x20000000
 8005718:	14f8b589 	.word	0x14f8b589

0800571c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800572c:	e025      	b.n	800577a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005734:	d021      	beq.n	800577a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005736:	f7fc ff11 	bl	800255c <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	429a      	cmp	r2, r3
 8005744:	d302      	bcc.n	800574c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d116      	bne.n	800577a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f043 0220 	orr.w	r2, r3, #32
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e023      	b.n	80057c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	0c1b      	lsrs	r3, r3, #16
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	d10d      	bne.n	80057a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	43da      	mvns	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4013      	ands	r3, r2
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	bf0c      	ite	eq
 8005796:	2301      	moveq	r3, #1
 8005798:	2300      	movne	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	461a      	mov	r2, r3
 800579e:	e00c      	b.n	80057ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	43da      	mvns	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4013      	ands	r3, r2
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bf0c      	ite	eq
 80057b2:	2301      	moveq	r3, #1
 80057b4:	2300      	movne	r3, #0
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d0b6      	beq.n	800572e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
 80057d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057d8:	e051      	b.n	800587e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e8:	d123      	bne.n	8005832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005802:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	f043 0204 	orr.w	r2, r3, #4
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e046      	b.n	80058c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005838:	d021      	beq.n	800587e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583a:	f7fc fe8f 	bl	800255c <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	429a      	cmp	r2, r3
 8005848:	d302      	bcc.n	8005850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d116      	bne.n	800587e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	f043 0220 	orr.w	r2, r3, #32
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e020      	b.n	80058c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	0c1b      	lsrs	r3, r3, #16
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b01      	cmp	r3, #1
 8005886:	d10c      	bne.n	80058a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	43da      	mvns	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4013      	ands	r3, r2
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	bf14      	ite	ne
 800589a:	2301      	movne	r3, #1
 800589c:	2300      	moveq	r3, #0
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	e00b      	b.n	80058ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	43da      	mvns	r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	4013      	ands	r3, r2
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	bf14      	ite	ne
 80058b4:	2301      	movne	r3, #1
 80058b6:	2300      	moveq	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d18d      	bne.n	80057da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058d4:	e02d      	b.n	8005932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 f900 	bl	8005adc <I2C_IsAcknowledgeFailed>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e02d      	b.n	8005942 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ec:	d021      	beq.n	8005932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ee:	f7fc fe35 	bl	800255c <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d302      	bcc.n	8005904 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d116      	bne.n	8005932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f043 0220 	orr.w	r2, r3, #32
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e007      	b.n	8005942 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593c:	2b80      	cmp	r3, #128	; 0x80
 800593e:	d1ca      	bne.n	80058d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	60f8      	str	r0, [r7, #12]
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005956:	e02d      	b.n	80059b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f8bf 	bl	8005adc <I2C_IsAcknowledgeFailed>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e02d      	b.n	80059c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596e:	d021      	beq.n	80059b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005970:	f7fc fdf4 	bl	800255c <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	429a      	cmp	r2, r3
 800597e:	d302      	bcc.n	8005986 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d116      	bne.n	80059b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	f043 0220 	orr.w	r2, r3, #32
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e007      	b.n	80059c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d1ca      	bne.n	8005958 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80059d8:	4b13      	ldr	r3, [pc, #76]	; (8005a28 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	08db      	lsrs	r3, r3, #3
 80059de:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80059e0:	fba2 2303 	umull	r2, r3, r2, r3
 80059e4:	0a1a      	lsrs	r2, r3, #8
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d107      	bne.n	8005a0a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	f043 0220 	orr.w	r2, r3, #32
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e008      	b.n	8005a1c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a18:	d0e9      	beq.n	80059ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3714      	adds	r7, #20
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	20000000 	.word	0x20000000
 8005a2c:	14f8b589 	.word	0x14f8b589

08005a30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a3c:	e042      	b.n	8005ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b10      	cmp	r3, #16
 8005a4a:	d119      	bne.n	8005a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0210 	mvn.w	r2, #16
 8005a54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e029      	b.n	8005ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a80:	f7fc fd6c 	bl	800255c <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d302      	bcc.n	8005a96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d116      	bne.n	8005ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab0:	f043 0220 	orr.w	r2, r3, #32
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e007      	b.n	8005ad4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ace:	2b40      	cmp	r3, #64	; 0x40
 8005ad0:	d1b5      	bne.n	8005a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af2:	d11b      	bne.n	8005b2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005afc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	f043 0204 	orr.w	r2, r3, #4
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b46:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b4a:	d103      	bne.n	8005b54 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b52:	e007      	b.n	8005b64 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b58:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b5c:	d102      	bne.n	8005b64 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2208      	movs	r2, #8
 8005b62:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e25b      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d075      	beq.n	8005c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b8e:	4ba3      	ldr	r3, [pc, #652]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 030c 	and.w	r3, r3, #12
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d00c      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b9a:	4ba0      	ldr	r3, [pc, #640]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ba2:	2b08      	cmp	r3, #8
 8005ba4:	d112      	bne.n	8005bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ba6:	4b9d      	ldr	r3, [pc, #628]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bb2:	d10b      	bne.n	8005bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb4:	4b99      	ldr	r3, [pc, #612]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d05b      	beq.n	8005c78 <HAL_RCC_OscConfig+0x108>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d157      	bne.n	8005c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e236      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd4:	d106      	bne.n	8005be4 <HAL_RCC_OscConfig+0x74>
 8005bd6:	4b91      	ldr	r3, [pc, #580]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a90      	ldr	r2, [pc, #576]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	e01d      	b.n	8005c20 <HAL_RCC_OscConfig+0xb0>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bec:	d10c      	bne.n	8005c08 <HAL_RCC_OscConfig+0x98>
 8005bee:	4b8b      	ldr	r3, [pc, #556]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a8a      	ldr	r2, [pc, #552]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	4b88      	ldr	r3, [pc, #544]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a87      	ldr	r2, [pc, #540]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	e00b      	b.n	8005c20 <HAL_RCC_OscConfig+0xb0>
 8005c08:	4b84      	ldr	r3, [pc, #528]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a83      	ldr	r2, [pc, #524]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	4b81      	ldr	r3, [pc, #516]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a80      	ldr	r2, [pc, #512]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d013      	beq.n	8005c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c28:	f7fc fc98 	bl	800255c <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c30:	f7fc fc94 	bl	800255c <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b64      	cmp	r3, #100	; 0x64
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e1fb      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c42:	4b76      	ldr	r3, [pc, #472]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0f0      	beq.n	8005c30 <HAL_RCC_OscConfig+0xc0>
 8005c4e:	e014      	b.n	8005c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c50:	f7fc fc84 	bl	800255c <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c58:	f7fc fc80 	bl	800255c <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b64      	cmp	r3, #100	; 0x64
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e1e7      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c6a:	4b6c      	ldr	r3, [pc, #432]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f0      	bne.n	8005c58 <HAL_RCC_OscConfig+0xe8>
 8005c76:	e000      	b.n	8005c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d063      	beq.n	8005d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c86:	4b65      	ldr	r3, [pc, #404]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 030c 	and.w	r3, r3, #12
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00b      	beq.n	8005caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c92:	4b62      	ldr	r3, [pc, #392]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d11c      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c9e:	4b5f      	ldr	r3, [pc, #380]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d116      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005caa:	4b5c      	ldr	r3, [pc, #368]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d005      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x152>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d001      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e1bb      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc2:	4b56      	ldr	r3, [pc, #344]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	4952      	ldr	r1, [pc, #328]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cd6:	e03a      	b.n	8005d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d020      	beq.n	8005d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ce0:	4b4f      	ldr	r3, [pc, #316]	; (8005e20 <HAL_RCC_OscConfig+0x2b0>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce6:	f7fc fc39 	bl	800255c <HAL_GetTick>
 8005cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cee:	f7fc fc35 	bl	800255c <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e19c      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d00:	4b46      	ldr	r3, [pc, #280]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0f0      	beq.n	8005cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d0c:	4b43      	ldr	r3, [pc, #268]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	4940      	ldr	r1, [pc, #256]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	600b      	str	r3, [r1, #0]
 8005d20:	e015      	b.n	8005d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d22:	4b3f      	ldr	r3, [pc, #252]	; (8005e20 <HAL_RCC_OscConfig+0x2b0>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d28:	f7fc fc18 	bl	800255c <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d30:	f7fc fc14 	bl	800255c <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e17b      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d42:	4b36      	ldr	r3, [pc, #216]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f0      	bne.n	8005d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d030      	beq.n	8005dbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d016      	beq.n	8005d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d62:	4b30      	ldr	r3, [pc, #192]	; (8005e24 <HAL_RCC_OscConfig+0x2b4>)
 8005d64:	2201      	movs	r2, #1
 8005d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d68:	f7fc fbf8 	bl	800255c <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d70:	f7fc fbf4 	bl	800255c <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e15b      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d82:	4b26      	ldr	r3, [pc, #152]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0f0      	beq.n	8005d70 <HAL_RCC_OscConfig+0x200>
 8005d8e:	e015      	b.n	8005dbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d90:	4b24      	ldr	r3, [pc, #144]	; (8005e24 <HAL_RCC_OscConfig+0x2b4>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d96:	f7fc fbe1 	bl	800255c <HAL_GetTick>
 8005d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d9e:	f7fc fbdd 	bl	800255c <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e144      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005db0:	4b1a      	ldr	r3, [pc, #104]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1f0      	bne.n	8005d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 80a0 	beq.w	8005f0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dce:	4b13      	ldr	r3, [pc, #76]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10f      	bne.n	8005dfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60bb      	str	r3, [r7, #8]
 8005dde:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	4a0e      	ldr	r2, [pc, #56]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005de8:	6413      	str	r3, [r2, #64]	; 0x40
 8005dea:	4b0c      	ldr	r3, [pc, #48]	; (8005e1c <HAL_RCC_OscConfig+0x2ac>)
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df2:	60bb      	str	r3, [r7, #8]
 8005df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005df6:	2301      	movs	r3, #1
 8005df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dfa:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <HAL_RCC_OscConfig+0x2b8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d121      	bne.n	8005e4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e06:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <HAL_RCC_OscConfig+0x2b8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a07      	ldr	r2, [pc, #28]	; (8005e28 <HAL_RCC_OscConfig+0x2b8>)
 8005e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e12:	f7fc fba3 	bl	800255c <HAL_GetTick>
 8005e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e18:	e011      	b.n	8005e3e <HAL_RCC_OscConfig+0x2ce>
 8005e1a:	bf00      	nop
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	42470000 	.word	0x42470000
 8005e24:	42470e80 	.word	0x42470e80
 8005e28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e2c:	f7fc fb96 	bl	800255c <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e0fd      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e3e:	4b81      	ldr	r3, [pc, #516]	; (8006044 <HAL_RCC_OscConfig+0x4d4>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0f0      	beq.n	8005e2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d106      	bne.n	8005e60 <HAL_RCC_OscConfig+0x2f0>
 8005e52:	4b7d      	ldr	r3, [pc, #500]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e56:	4a7c      	ldr	r2, [pc, #496]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005e58:	f043 0301 	orr.w	r3, r3, #1
 8005e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e5e:	e01c      	b.n	8005e9a <HAL_RCC_OscConfig+0x32a>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2b05      	cmp	r3, #5
 8005e66:	d10c      	bne.n	8005e82 <HAL_RCC_OscConfig+0x312>
 8005e68:	4b77      	ldr	r3, [pc, #476]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6c:	4a76      	ldr	r2, [pc, #472]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005e6e:	f043 0304 	orr.w	r3, r3, #4
 8005e72:	6713      	str	r3, [r2, #112]	; 0x70
 8005e74:	4b74      	ldr	r3, [pc, #464]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e78:	4a73      	ldr	r2, [pc, #460]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005e7a:	f043 0301 	orr.w	r3, r3, #1
 8005e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e80:	e00b      	b.n	8005e9a <HAL_RCC_OscConfig+0x32a>
 8005e82:	4b71      	ldr	r3, [pc, #452]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	4a70      	ldr	r2, [pc, #448]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005e88:	f023 0301 	bic.w	r3, r3, #1
 8005e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e8e:	4b6e      	ldr	r3, [pc, #440]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e92:	4a6d      	ldr	r2, [pc, #436]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005e94:	f023 0304 	bic.w	r3, r3, #4
 8005e98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d015      	beq.n	8005ece <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea2:	f7fc fb5b 	bl	800255c <HAL_GetTick>
 8005ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea8:	e00a      	b.n	8005ec0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eaa:	f7fc fb57 	bl	800255c <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e0bc      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec0:	4b61      	ldr	r3, [pc, #388]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0ee      	beq.n	8005eaa <HAL_RCC_OscConfig+0x33a>
 8005ecc:	e014      	b.n	8005ef8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ece:	f7fc fb45 	bl	800255c <HAL_GetTick>
 8005ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ed4:	e00a      	b.n	8005eec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ed6:	f7fc fb41 	bl	800255c <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e0a6      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eec:	4b56      	ldr	r3, [pc, #344]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1ee      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d105      	bne.n	8005f0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005efe:	4b52      	ldr	r3, [pc, #328]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	4a51      	ldr	r2, [pc, #324]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 8092 	beq.w	8006038 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f14:	4b4c      	ldr	r3, [pc, #304]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f003 030c 	and.w	r3, r3, #12
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d05c      	beq.n	8005fda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d141      	bne.n	8005fac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f28:	4b48      	ldr	r3, [pc, #288]	; (800604c <HAL_RCC_OscConfig+0x4dc>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2e:	f7fc fb15 	bl	800255c <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f36:	f7fc fb11 	bl	800255c <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e078      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f48:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1f0      	bne.n	8005f36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	69da      	ldr	r2, [r3, #28]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	019b      	lsls	r3, r3, #6
 8005f64:	431a      	orrs	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	085b      	lsrs	r3, r3, #1
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	041b      	lsls	r3, r3, #16
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	061b      	lsls	r3, r3, #24
 8005f78:	4933      	ldr	r1, [pc, #204]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f7e:	4b33      	ldr	r3, [pc, #204]	; (800604c <HAL_RCC_OscConfig+0x4dc>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f84:	f7fc faea 	bl	800255c <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f8c:	f7fc fae6 	bl	800255c <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e04d      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f9e:	4b2a      	ldr	r3, [pc, #168]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0f0      	beq.n	8005f8c <HAL_RCC_OscConfig+0x41c>
 8005faa:	e045      	b.n	8006038 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fac:	4b27      	ldr	r3, [pc, #156]	; (800604c <HAL_RCC_OscConfig+0x4dc>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb2:	f7fc fad3 	bl	800255c <HAL_GetTick>
 8005fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fb8:	e008      	b.n	8005fcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fba:	f7fc facf 	bl	800255c <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e036      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fcc:	4b1e      	ldr	r3, [pc, #120]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1f0      	bne.n	8005fba <HAL_RCC_OscConfig+0x44a>
 8005fd8:	e02e      	b.n	8006038 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e029      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fe6:	4b18      	ldr	r3, [pc, #96]	; (8006048 <HAL_RCC_OscConfig+0x4d8>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d11c      	bne.n	8006034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006004:	429a      	cmp	r2, r3
 8006006:	d115      	bne.n	8006034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800600e:	4013      	ands	r3, r2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006014:	4293      	cmp	r3, r2
 8006016:	d10d      	bne.n	8006034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006022:	429a      	cmp	r2, r3
 8006024:	d106      	bne.n	8006034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006030:	429a      	cmp	r2, r3
 8006032:	d001      	beq.n	8006038 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40007000 	.word	0x40007000
 8006048:	40023800 	.word	0x40023800
 800604c:	42470060 	.word	0x42470060

08006050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e0cc      	b.n	80061fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006064:	4b68      	ldr	r3, [pc, #416]	; (8006208 <HAL_RCC_ClockConfig+0x1b8>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	429a      	cmp	r2, r3
 8006070:	d90c      	bls.n	800608c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006072:	4b65      	ldr	r3, [pc, #404]	; (8006208 <HAL_RCC_ClockConfig+0x1b8>)
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800607a:	4b63      	ldr	r3, [pc, #396]	; (8006208 <HAL_RCC_ClockConfig+0x1b8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d001      	beq.n	800608c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e0b8      	b.n	80061fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d020      	beq.n	80060da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0304 	and.w	r3, r3, #4
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d005      	beq.n	80060b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060a4:	4b59      	ldr	r3, [pc, #356]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	4a58      	ldr	r2, [pc, #352]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 80060aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d005      	beq.n	80060c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060bc:	4b53      	ldr	r3, [pc, #332]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	4a52      	ldr	r2, [pc, #328]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 80060c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060c8:	4b50      	ldr	r3, [pc, #320]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	494d      	ldr	r1, [pc, #308]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d044      	beq.n	8006170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d107      	bne.n	80060fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ee:	4b47      	ldr	r3, [pc, #284]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d119      	bne.n	800612e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e07f      	b.n	80061fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2b02      	cmp	r3, #2
 8006104:	d003      	beq.n	800610e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800610a:	2b03      	cmp	r3, #3
 800610c:	d107      	bne.n	800611e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800610e:	4b3f      	ldr	r3, [pc, #252]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d109      	bne.n	800612e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e06f      	b.n	80061fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800611e:	4b3b      	ldr	r3, [pc, #236]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e067      	b.n	80061fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800612e:	4b37      	ldr	r3, [pc, #220]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f023 0203 	bic.w	r2, r3, #3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	4934      	ldr	r1, [pc, #208]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 800613c:	4313      	orrs	r3, r2
 800613e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006140:	f7fc fa0c 	bl	800255c <HAL_GetTick>
 8006144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006146:	e00a      	b.n	800615e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006148:	f7fc fa08 	bl	800255c <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	f241 3288 	movw	r2, #5000	; 0x1388
 8006156:	4293      	cmp	r3, r2
 8006158:	d901      	bls.n	800615e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e04f      	b.n	80061fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800615e:	4b2b      	ldr	r3, [pc, #172]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 020c 	and.w	r2, r3, #12
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	429a      	cmp	r2, r3
 800616e:	d1eb      	bne.n	8006148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006170:	4b25      	ldr	r3, [pc, #148]	; (8006208 <HAL_RCC_ClockConfig+0x1b8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d20c      	bcs.n	8006198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800617e:	4b22      	ldr	r3, [pc, #136]	; (8006208 <HAL_RCC_ClockConfig+0x1b8>)
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006186:	4b20      	ldr	r3, [pc, #128]	; (8006208 <HAL_RCC_ClockConfig+0x1b8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 030f 	and.w	r3, r3, #15
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d001      	beq.n	8006198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e032      	b.n	80061fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061a4:	4b19      	ldr	r3, [pc, #100]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	4916      	ldr	r1, [pc, #88]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061c2:	4b12      	ldr	r3, [pc, #72]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	490e      	ldr	r1, [pc, #56]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061d6:	f000 f821 	bl	800621c <HAL_RCC_GetSysClockFreq>
 80061da:	4601      	mov	r1, r0
 80061dc:	4b0b      	ldr	r3, [pc, #44]	; (800620c <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	091b      	lsrs	r3, r3, #4
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	4a0a      	ldr	r2, [pc, #40]	; (8006210 <HAL_RCC_ClockConfig+0x1c0>)
 80061e8:	5cd3      	ldrb	r3, [r2, r3]
 80061ea:	fa21 f303 	lsr.w	r3, r1, r3
 80061ee:	4a09      	ldr	r2, [pc, #36]	; (8006214 <HAL_RCC_ClockConfig+0x1c4>)
 80061f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061f2:	4b09      	ldr	r3, [pc, #36]	; (8006218 <HAL_RCC_ClockConfig+0x1c8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fc f96c 	bl	80024d4 <HAL_InitTick>

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	40023c00 	.word	0x40023c00
 800620c:	40023800 	.word	0x40023800
 8006210:	0800abfc 	.word	0x0800abfc
 8006214:	20000000 	.word	0x20000000
 8006218:	20000004 	.word	0x20000004

0800621c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800621c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	607b      	str	r3, [r7, #4]
 8006226:	2300      	movs	r3, #0
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	2300      	movs	r3, #0
 800622c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006232:	4b63      	ldr	r3, [pc, #396]	; (80063c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	2b04      	cmp	r3, #4
 800623c:	d007      	beq.n	800624e <HAL_RCC_GetSysClockFreq+0x32>
 800623e:	2b08      	cmp	r3, #8
 8006240:	d008      	beq.n	8006254 <HAL_RCC_GetSysClockFreq+0x38>
 8006242:	2b00      	cmp	r3, #0
 8006244:	f040 80b4 	bne.w	80063b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006248:	4b5e      	ldr	r3, [pc, #376]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800624a:	60bb      	str	r3, [r7, #8]
       break;
 800624c:	e0b3      	b.n	80063b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800624e:	4b5e      	ldr	r3, [pc, #376]	; (80063c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006250:	60bb      	str	r3, [r7, #8]
      break;
 8006252:	e0b0      	b.n	80063b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006254:	4b5a      	ldr	r3, [pc, #360]	; (80063c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800625c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800625e:	4b58      	ldr	r3, [pc, #352]	; (80063c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d04a      	beq.n	8006300 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800626a:	4b55      	ldr	r3, [pc, #340]	; (80063c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	099b      	lsrs	r3, r3, #6
 8006270:	f04f 0400 	mov.w	r4, #0
 8006274:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006278:	f04f 0200 	mov.w	r2, #0
 800627c:	ea03 0501 	and.w	r5, r3, r1
 8006280:	ea04 0602 	and.w	r6, r4, r2
 8006284:	4629      	mov	r1, r5
 8006286:	4632      	mov	r2, r6
 8006288:	f04f 0300 	mov.w	r3, #0
 800628c:	f04f 0400 	mov.w	r4, #0
 8006290:	0154      	lsls	r4, r2, #5
 8006292:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006296:	014b      	lsls	r3, r1, #5
 8006298:	4619      	mov	r1, r3
 800629a:	4622      	mov	r2, r4
 800629c:	1b49      	subs	r1, r1, r5
 800629e:	eb62 0206 	sbc.w	r2, r2, r6
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	f04f 0400 	mov.w	r4, #0
 80062aa:	0194      	lsls	r4, r2, #6
 80062ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80062b0:	018b      	lsls	r3, r1, #6
 80062b2:	1a5b      	subs	r3, r3, r1
 80062b4:	eb64 0402 	sbc.w	r4, r4, r2
 80062b8:	f04f 0100 	mov.w	r1, #0
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	00e2      	lsls	r2, r4, #3
 80062c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80062c6:	00d9      	lsls	r1, r3, #3
 80062c8:	460b      	mov	r3, r1
 80062ca:	4614      	mov	r4, r2
 80062cc:	195b      	adds	r3, r3, r5
 80062ce:	eb44 0406 	adc.w	r4, r4, r6
 80062d2:	f04f 0100 	mov.w	r1, #0
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	0262      	lsls	r2, r4, #9
 80062dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80062e0:	0259      	lsls	r1, r3, #9
 80062e2:	460b      	mov	r3, r1
 80062e4:	4614      	mov	r4, r2
 80062e6:	4618      	mov	r0, r3
 80062e8:	4621      	mov	r1, r4
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f04f 0400 	mov.w	r4, #0
 80062f0:	461a      	mov	r2, r3
 80062f2:	4623      	mov	r3, r4
 80062f4:	f7fa fc54 	bl	8000ba0 <__aeabi_uldivmod>
 80062f8:	4603      	mov	r3, r0
 80062fa:	460c      	mov	r4, r1
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	e049      	b.n	8006394 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006300:	4b2f      	ldr	r3, [pc, #188]	; (80063c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	099b      	lsrs	r3, r3, #6
 8006306:	f04f 0400 	mov.w	r4, #0
 800630a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	ea03 0501 	and.w	r5, r3, r1
 8006316:	ea04 0602 	and.w	r6, r4, r2
 800631a:	4629      	mov	r1, r5
 800631c:	4632      	mov	r2, r6
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	f04f 0400 	mov.w	r4, #0
 8006326:	0154      	lsls	r4, r2, #5
 8006328:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800632c:	014b      	lsls	r3, r1, #5
 800632e:	4619      	mov	r1, r3
 8006330:	4622      	mov	r2, r4
 8006332:	1b49      	subs	r1, r1, r5
 8006334:	eb62 0206 	sbc.w	r2, r2, r6
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	f04f 0400 	mov.w	r4, #0
 8006340:	0194      	lsls	r4, r2, #6
 8006342:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006346:	018b      	lsls	r3, r1, #6
 8006348:	1a5b      	subs	r3, r3, r1
 800634a:	eb64 0402 	sbc.w	r4, r4, r2
 800634e:	f04f 0100 	mov.w	r1, #0
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	00e2      	lsls	r2, r4, #3
 8006358:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800635c:	00d9      	lsls	r1, r3, #3
 800635e:	460b      	mov	r3, r1
 8006360:	4614      	mov	r4, r2
 8006362:	195b      	adds	r3, r3, r5
 8006364:	eb44 0406 	adc.w	r4, r4, r6
 8006368:	f04f 0100 	mov.w	r1, #0
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	02a2      	lsls	r2, r4, #10
 8006372:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006376:	0299      	lsls	r1, r3, #10
 8006378:	460b      	mov	r3, r1
 800637a:	4614      	mov	r4, r2
 800637c:	4618      	mov	r0, r3
 800637e:	4621      	mov	r1, r4
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f04f 0400 	mov.w	r4, #0
 8006386:	461a      	mov	r2, r3
 8006388:	4623      	mov	r3, r4
 800638a:	f7fa fc09 	bl	8000ba0 <__aeabi_uldivmod>
 800638e:	4603      	mov	r3, r0
 8006390:	460c      	mov	r4, r1
 8006392:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	0c1b      	lsrs	r3, r3, #16
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	3301      	adds	r3, #1
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ac:	60bb      	str	r3, [r7, #8]
      break;
 80063ae:	e002      	b.n	80063b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063b0:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80063b2:	60bb      	str	r3, [r7, #8]
      break;
 80063b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063b6:	68bb      	ldr	r3, [r7, #8]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063c0:	40023800 	.word	0x40023800
 80063c4:	00f42400 	.word	0x00f42400
 80063c8:	007a1200 	.word	0x007a1200

080063cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063d0:	4b03      	ldr	r3, [pc, #12]	; (80063e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80063d2:	681b      	ldr	r3, [r3, #0]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20000000 	.word	0x20000000

080063e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063e8:	f7ff fff0 	bl	80063cc <HAL_RCC_GetHCLKFreq>
 80063ec:	4601      	mov	r1, r0
 80063ee:	4b05      	ldr	r3, [pc, #20]	; (8006404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	0a9b      	lsrs	r3, r3, #10
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	4a03      	ldr	r2, [pc, #12]	; (8006408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063fa:	5cd3      	ldrb	r3, [r2, r3]
 80063fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006400:	4618      	mov	r0, r3
 8006402:	bd80      	pop	{r7, pc}
 8006404:	40023800 	.word	0x40023800
 8006408:	0800ac0c 	.word	0x0800ac0c

0800640c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006410:	f7ff ffdc 	bl	80063cc <HAL_RCC_GetHCLKFreq>
 8006414:	4601      	mov	r1, r0
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	0b5b      	lsrs	r3, r3, #13
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	4a03      	ldr	r2, [pc, #12]	; (8006430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006422:	5cd3      	ldrb	r3, [r2, r3]
 8006424:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006428:	4618      	mov	r0, r3
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40023800 	.word	0x40023800
 8006430:	0800ac0c 	.word	0x0800ac0c

08006434 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e01d      	b.n	8006482 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7fb fe8e 	bl	800217c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3304      	adds	r3, #4
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	f000 f86a 	bl	800654c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e04e      	b.n	8006544 <HAL_TIM_OC_ConfigChannel+0xb8>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2202      	movs	r2, #2
 80064b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b0c      	cmp	r3, #12
 80064ba:	d839      	bhi.n	8006530 <HAL_TIM_OC_ConfigChannel+0xa4>
 80064bc:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <HAL_TIM_OC_ConfigChannel+0x38>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080064f9 	.word	0x080064f9
 80064c8:	08006531 	.word	0x08006531
 80064cc:	08006531 	.word	0x08006531
 80064d0:	08006531 	.word	0x08006531
 80064d4:	08006507 	.word	0x08006507
 80064d8:	08006531 	.word	0x08006531
 80064dc:	08006531 	.word	0x08006531
 80064e0:	08006531 	.word	0x08006531
 80064e4:	08006515 	.word	0x08006515
 80064e8:	08006531 	.word	0x08006531
 80064ec:	08006531 	.word	0x08006531
 80064f0:	08006531 	.word	0x08006531
 80064f4:	08006523 	.word	0x08006523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 f8c4 	bl	800668c <TIM_OC1_SetConfig>
      break;
 8006504:	e015      	b.n	8006532 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	4618      	mov	r0, r3
 800650e:	f000 f92d 	bl	800676c <TIM_OC2_SetConfig>
      break;
 8006512:	e00e      	b.n	8006532 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	4618      	mov	r0, r3
 800651c:	f000 f99c 	bl	8006858 <TIM_OC3_SetConfig>
      break;
 8006520:	e007      	b.n	8006532 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	4618      	mov	r0, r3
 800652a:	f000 fa09 	bl	8006940 <TIM_OC4_SetConfig>
      break;
 800652e:	e000      	b.n	8006532 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006530:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a40      	ldr	r2, [pc, #256]	; (8006660 <TIM_Base_SetConfig+0x114>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d013      	beq.n	800658c <TIM_Base_SetConfig+0x40>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656a:	d00f      	beq.n	800658c <TIM_Base_SetConfig+0x40>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a3d      	ldr	r2, [pc, #244]	; (8006664 <TIM_Base_SetConfig+0x118>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00b      	beq.n	800658c <TIM_Base_SetConfig+0x40>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a3c      	ldr	r2, [pc, #240]	; (8006668 <TIM_Base_SetConfig+0x11c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d007      	beq.n	800658c <TIM_Base_SetConfig+0x40>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a3b      	ldr	r2, [pc, #236]	; (800666c <TIM_Base_SetConfig+0x120>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d003      	beq.n	800658c <TIM_Base_SetConfig+0x40>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a3a      	ldr	r2, [pc, #232]	; (8006670 <TIM_Base_SetConfig+0x124>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d108      	bne.n	800659e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a2f      	ldr	r2, [pc, #188]	; (8006660 <TIM_Base_SetConfig+0x114>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d02b      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ac:	d027      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a2c      	ldr	r2, [pc, #176]	; (8006664 <TIM_Base_SetConfig+0x118>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d023      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a2b      	ldr	r2, [pc, #172]	; (8006668 <TIM_Base_SetConfig+0x11c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d01f      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a2a      	ldr	r2, [pc, #168]	; (800666c <TIM_Base_SetConfig+0x120>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d01b      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a29      	ldr	r2, [pc, #164]	; (8006670 <TIM_Base_SetConfig+0x124>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d017      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a28      	ldr	r2, [pc, #160]	; (8006674 <TIM_Base_SetConfig+0x128>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d013      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a27      	ldr	r2, [pc, #156]	; (8006678 <TIM_Base_SetConfig+0x12c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00f      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a26      	ldr	r2, [pc, #152]	; (800667c <TIM_Base_SetConfig+0x130>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00b      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a25      	ldr	r2, [pc, #148]	; (8006680 <TIM_Base_SetConfig+0x134>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d007      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a24      	ldr	r2, [pc, #144]	; (8006684 <TIM_Base_SetConfig+0x138>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d003      	beq.n	80065fe <TIM_Base_SetConfig+0xb2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a23      	ldr	r2, [pc, #140]	; (8006688 <TIM_Base_SetConfig+0x13c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d108      	bne.n	8006610 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	4313      	orrs	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a0a      	ldr	r2, [pc, #40]	; (8006660 <TIM_Base_SetConfig+0x114>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d003      	beq.n	8006644 <TIM_Base_SetConfig+0xf8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a0c      	ldr	r2, [pc, #48]	; (8006670 <TIM_Base_SetConfig+0x124>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d103      	bne.n	800664c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	691a      	ldr	r2, [r3, #16]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	615a      	str	r2, [r3, #20]
}
 8006652:	bf00      	nop
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40010000 	.word	0x40010000
 8006664:	40000400 	.word	0x40000400
 8006668:	40000800 	.word	0x40000800
 800666c:	40000c00 	.word	0x40000c00
 8006670:	40010400 	.word	0x40010400
 8006674:	40014000 	.word	0x40014000
 8006678:	40014400 	.word	0x40014400
 800667c:	40014800 	.word	0x40014800
 8006680:	40001800 	.word	0x40001800
 8006684:	40001c00 	.word	0x40001c00
 8006688:	40002000 	.word	0x40002000

0800668c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f023 0201 	bic.w	r2, r3, #1
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 0303 	bic.w	r3, r3, #3
 80066c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f023 0302 	bic.w	r3, r3, #2
 80066d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	4313      	orrs	r3, r2
 80066de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a20      	ldr	r2, [pc, #128]	; (8006764 <TIM_OC1_SetConfig+0xd8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_OC1_SetConfig+0x64>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a1f      	ldr	r2, [pc, #124]	; (8006768 <TIM_OC1_SetConfig+0xdc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d10c      	bne.n	800670a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f023 0308 	bic.w	r3, r3, #8
 80066f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f023 0304 	bic.w	r3, r3, #4
 8006708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a15      	ldr	r2, [pc, #84]	; (8006764 <TIM_OC1_SetConfig+0xd8>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d003      	beq.n	800671a <TIM_OC1_SetConfig+0x8e>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a14      	ldr	r2, [pc, #80]	; (8006768 <TIM_OC1_SetConfig+0xdc>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d111      	bne.n	800673e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	693a      	ldr	r2, [r7, #16]
 800673a:	4313      	orrs	r3, r2
 800673c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	621a      	str	r2, [r3, #32]
}
 8006758:	bf00      	nop
 800675a:	371c      	adds	r7, #28
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	40010000 	.word	0x40010000
 8006768:	40010400 	.word	0x40010400

0800676c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	f023 0210 	bic.w	r2, r3, #16
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800679a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f023 0320 	bic.w	r3, r3, #32
 80067b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a22      	ldr	r2, [pc, #136]	; (8006850 <TIM_OC2_SetConfig+0xe4>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <TIM_OC2_SetConfig+0x68>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a21      	ldr	r2, [pc, #132]	; (8006854 <TIM_OC2_SetConfig+0xe8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d10d      	bne.n	80067f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a17      	ldr	r2, [pc, #92]	; (8006850 <TIM_OC2_SetConfig+0xe4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_OC2_SetConfig+0x94>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a16      	ldr	r2, [pc, #88]	; (8006854 <TIM_OC2_SetConfig+0xe8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d113      	bne.n	8006828 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006806:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800680e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	621a      	str	r2, [r3, #32]
}
 8006842:	bf00      	nop
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40010000 	.word	0x40010000
 8006854:	40010400 	.word	0x40010400

08006858 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0303 	bic.w	r3, r3, #3
 800688e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a21      	ldr	r2, [pc, #132]	; (8006938 <TIM_OC3_SetConfig+0xe0>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d003      	beq.n	80068be <TIM_OC3_SetConfig+0x66>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a20      	ldr	r2, [pc, #128]	; (800693c <TIM_OC3_SetConfig+0xe4>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d10d      	bne.n	80068da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	021b      	lsls	r3, r3, #8
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a16      	ldr	r2, [pc, #88]	; (8006938 <TIM_OC3_SetConfig+0xe0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d003      	beq.n	80068ea <TIM_OC3_SetConfig+0x92>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a15      	ldr	r2, [pc, #84]	; (800693c <TIM_OC3_SetConfig+0xe4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d113      	bne.n	8006912 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4313      	orrs	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	621a      	str	r2, [r3, #32]
}
 800692c:	bf00      	nop
 800692e:	371c      	adds	r7, #28
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	40010000 	.word	0x40010000
 800693c:	40010400 	.word	0x40010400

08006940 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	021b      	lsls	r3, r3, #8
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800698a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	031b      	lsls	r3, r3, #12
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a12      	ldr	r2, [pc, #72]	; (80069e4 <TIM_OC4_SetConfig+0xa4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d003      	beq.n	80069a8 <TIM_OC4_SetConfig+0x68>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a11      	ldr	r2, [pc, #68]	; (80069e8 <TIM_OC4_SetConfig+0xa8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d109      	bne.n	80069bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	019b      	lsls	r3, r3, #6
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	621a      	str	r2, [r3, #32]
}
 80069d6:	bf00      	nop
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40010000 	.word	0x40010000
 80069e8:	40010400 	.word	0x40010400

080069ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d101      	bne.n	8006a04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e05a      	b.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a21      	ldr	r2, [pc, #132]	; (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d022      	beq.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a50:	d01d      	beq.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a1d      	ldr	r2, [pc, #116]	; (8006acc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d018      	beq.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a1b      	ldr	r2, [pc, #108]	; (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d013      	beq.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a1a      	ldr	r2, [pc, #104]	; (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00e      	beq.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a18      	ldr	r2, [pc, #96]	; (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d009      	beq.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a17      	ldr	r2, [pc, #92]	; (8006adc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d004      	beq.n	8006a8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a15      	ldr	r2, [pc, #84]	; (8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d10c      	bne.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	40010000 	.word	0x40010000
 8006acc:	40000400 	.word	0x40000400
 8006ad0:	40000800 	.word	0x40000800
 8006ad4:	40000c00 	.word	0x40000c00
 8006ad8:	40010400 	.word	0x40010400
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	40001800 	.word	0x40001800

08006ae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e03f      	b.n	8006b76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d106      	bne.n	8006b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fb fb92 	bl	8002234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2224      	movs	r2, #36	; 0x24
 8006b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fb4b 	bl	80071c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	691a      	ldr	r2, [r3, #16]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	695a      	ldr	r2, [r3, #20]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b088      	sub	sp, #32
 8006b82:	af02      	add	r7, sp, #8
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	603b      	str	r3, [r7, #0]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	f040 8083 	bne.w	8006ca6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <HAL_UART_Transmit+0x2e>
 8006ba6:	88fb      	ldrh	r3, [r7, #6]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e07b      	b.n	8006ca8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <HAL_UART_Transmit+0x40>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e074      	b.n	8006ca8 <HAL_UART_Transmit+0x12a>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2221      	movs	r2, #33	; 0x21
 8006bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006bd4:	f7fb fcc2 	bl	800255c <HAL_GetTick>
 8006bd8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	88fa      	ldrh	r2, [r7, #6]
 8006bde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	88fa      	ldrh	r2, [r7, #6]
 8006be4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006bee:	e042      	b.n	8006c76 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c06:	d122      	bne.n	8006c4e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2180      	movs	r1, #128	; 0x80
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f96a 	bl	8006eec <UART_WaitOnFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e042      	b.n	8006ca8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c34:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d103      	bne.n	8006c46 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	3302      	adds	r3, #2
 8006c42:	60bb      	str	r3, [r7, #8]
 8006c44:	e017      	b.n	8006c76 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	60bb      	str	r3, [r7, #8]
 8006c4c:	e013      	b.n	8006c76 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2200      	movs	r2, #0
 8006c56:	2180      	movs	r1, #128	; 0x80
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 f947 	bl	8006eec <UART_WaitOnFlagUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e01f      	b.n	8006ca8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	60ba      	str	r2, [r7, #8]
 8006c6e:	781a      	ldrb	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1b7      	bne.n	8006bf0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2200      	movs	r2, #0
 8006c88:	2140      	movs	r1, #64	; 0x40
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f000 f92e 	bl	8006eec <UART_WaitOnFlagUntilTimeout>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e006      	b.n	8006ca8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	e000      	b.n	8006ca8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006ca6:	2302      	movs	r3, #2
  }
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	f003 030f 	and.w	r3, r3, #15
 8006cde:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10d      	bne.n	8006d02 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	f003 0320 	and.w	r3, r3, #32
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d008      	beq.n	8006d02 <HAL_UART_IRQHandler+0x52>
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f9e0 	bl	80070c0 <UART_Receive_IT>
      return;
 8006d00:	e0d1      	b.n	8006ea6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 80b0 	beq.w	8006e6a <HAL_UART_IRQHandler+0x1ba>
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d105      	bne.n	8006d20 <HAL_UART_IRQHandler+0x70>
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 80a5 	beq.w	8006e6a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <HAL_UART_IRQHandler+0x90>
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d38:	f043 0201 	orr.w	r2, r3, #1
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	f003 0304 	and.w	r3, r3, #4
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00a      	beq.n	8006d60 <HAL_UART_IRQHandler+0xb0>
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d58:	f043 0202 	orr.w	r2, r3, #2
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00a      	beq.n	8006d80 <HAL_UART_IRQHandler+0xd0>
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d005      	beq.n	8006d80 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d78:	f043 0204 	orr.w	r2, r3, #4
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00f      	beq.n	8006daa <HAL_UART_IRQHandler+0xfa>
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	f003 0320 	and.w	r3, r3, #32
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d104      	bne.n	8006d9e <HAL_UART_IRQHandler+0xee>
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d005      	beq.n	8006daa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da2:	f043 0208 	orr.w	r2, r3, #8
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d078      	beq.n	8006ea4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	f003 0320 	and.w	r3, r3, #32
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d007      	beq.n	8006dcc <HAL_UART_IRQHandler+0x11c>
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f97a 	bl	80070c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	bf0c      	ite	eq
 8006dda:	2301      	moveq	r3, #1
 8006ddc:	2300      	movne	r3, #0
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de6:	f003 0308 	and.w	r3, r3, #8
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d102      	bne.n	8006df4 <HAL_UART_IRQHandler+0x144>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d031      	beq.n	8006e58 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f8c3 	bl	8006f80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	d123      	bne.n	8006e50 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	695a      	ldr	r2, [r3, #20]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e16:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d013      	beq.n	8006e48 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e24:	4a21      	ldr	r2, [pc, #132]	; (8006eac <HAL_UART_IRQHandler+0x1fc>)
 8006e26:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fc f86c 	bl	8002f0a <HAL_DMA_Abort_IT>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d016      	beq.n	8006e66 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e42:	4610      	mov	r0, r2
 8006e44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e46:	e00e      	b.n	8006e66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f845 	bl	8006ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e4e:	e00a      	b.n	8006e66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f841 	bl	8006ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e56:	e006      	b.n	8006e66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f83d 	bl	8006ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006e64:	e01e      	b.n	8006ea4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e66:	bf00      	nop
    return;
 8006e68:	e01c      	b.n	8006ea4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d008      	beq.n	8006e86 <HAL_UART_IRQHandler+0x1d6>
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f8b0 	bl	8006fe4 <UART_Transmit_IT>
    return;
 8006e84:	e00f      	b.n	8006ea6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00a      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x1f6>
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d005      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f8f8 	bl	8007090 <UART_EndTransmit_IT>
    return;
 8006ea0:	bf00      	nop
 8006ea2:	e000      	b.n	8006ea6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006ea4:	bf00      	nop
  }
}
 8006ea6:	3720      	adds	r7, #32
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	08006fbd 	.word	0x08006fbd

08006eb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	603b      	str	r3, [r7, #0]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006efc:	e02c      	b.n	8006f58 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f04:	d028      	beq.n	8006f58 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006f0c:	f7fb fb26 	bl	800255c <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d21d      	bcs.n	8006f58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f2a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	695a      	ldr	r2, [r3, #20]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0201 	bic.w	r2, r2, #1
 8006f3a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e00f      	b.n	8006f78 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	4013      	ands	r3, r2
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	bf0c      	ite	eq
 8006f68:	2301      	moveq	r3, #1
 8006f6a:	2300      	movne	r3, #0
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	461a      	mov	r2, r3
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d0c3      	beq.n	8006efe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68da      	ldr	r2, [r3, #12]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	695a      	ldr	r2, [r3, #20]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0201 	bic.w	r2, r2, #1
 8006fa6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f7ff ff7e 	bl	8006ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fdc:	bf00      	nop
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b21      	cmp	r3, #33	; 0x21
 8006ff6:	d144      	bne.n	8007082 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007000:	d11a      	bne.n	8007038 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	461a      	mov	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007016:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d105      	bne.n	800702c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	1c9a      	adds	r2, r3, #2
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	621a      	str	r2, [r3, #32]
 800702a:	e00e      	b.n	800704a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	1c5a      	adds	r2, r3, #1
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	621a      	str	r2, [r3, #32]
 8007036:	e008      	b.n	800704a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	1c59      	adds	r1, r3, #1
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6211      	str	r1, [r2, #32]
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800704e:	b29b      	uxth	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	b29b      	uxth	r3, r3
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4619      	mov	r1, r3
 8007058:	84d1      	strh	r1, [r2, #38]	; 0x26
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10f      	bne.n	800707e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800706c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800707c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	e000      	b.n	8007084 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007082:	2302      	movs	r3, #2
  }
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff fefd 	bl	8006eb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b22      	cmp	r3, #34	; 0x22
 80070d2:	d171      	bne.n	80071b8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070dc:	d123      	bne.n	8007126 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10e      	bne.n	800710a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007102:	1c9a      	adds	r2, r3, #2
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	629a      	str	r2, [r3, #40]	; 0x28
 8007108:	e029      	b.n	800715e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	b29b      	uxth	r3, r3
 8007112:	b2db      	uxtb	r3, r3
 8007114:	b29a      	uxth	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	629a      	str	r2, [r3, #40]	; 0x28
 8007124:	e01b      	b.n	800715e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6858      	ldr	r0, [r3, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007138:	1c59      	adds	r1, r3, #1
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6291      	str	r1, [r2, #40]	; 0x28
 800713e:	b2c2      	uxtb	r2, r0
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	e00c      	b.n	800715e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	b2da      	uxtb	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007150:	1c58      	adds	r0, r3, #1
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	6288      	str	r0, [r1, #40]	; 0x28
 8007156:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007162:	b29b      	uxth	r3, r3
 8007164:	3b01      	subs	r3, #1
 8007166:	b29b      	uxth	r3, r3
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	4619      	mov	r1, r3
 800716c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800716e:	2b00      	cmp	r3, #0
 8007170:	d120      	bne.n	80071b4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0220 	bic.w	r2, r2, #32
 8007180:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007190:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	695a      	ldr	r2, [r3, #20]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0201 	bic.w	r2, r2, #1
 80071a0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7ff fe8a 	bl	8006ec4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	e002      	b.n	80071ba <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	e000      	b.n	80071ba <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80071b8:	2302      	movs	r3, #2
  }
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c8:	b085      	sub	sp, #20
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	431a      	orrs	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	69db      	ldr	r3, [r3, #28]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007206:	f023 030c 	bic.w	r3, r3, #12
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	430b      	orrs	r3, r1
 8007212:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	699a      	ldr	r2, [r3, #24]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007232:	f040 818b 	bne.w	800754c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4ac1      	ldr	r2, [pc, #772]	; (8007540 <UART_SetConfig+0x37c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d005      	beq.n	800724c <UART_SetConfig+0x88>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4abf      	ldr	r2, [pc, #764]	; (8007544 <UART_SetConfig+0x380>)
 8007246:	4293      	cmp	r3, r2
 8007248:	f040 80bd 	bne.w	80073c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800724c:	f7ff f8de 	bl	800640c <HAL_RCC_GetPCLK2Freq>
 8007250:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	461d      	mov	r5, r3
 8007256:	f04f 0600 	mov.w	r6, #0
 800725a:	46a8      	mov	r8, r5
 800725c:	46b1      	mov	r9, r6
 800725e:	eb18 0308 	adds.w	r3, r8, r8
 8007262:	eb49 0409 	adc.w	r4, r9, r9
 8007266:	4698      	mov	r8, r3
 8007268:	46a1      	mov	r9, r4
 800726a:	eb18 0805 	adds.w	r8, r8, r5
 800726e:	eb49 0906 	adc.w	r9, r9, r6
 8007272:	f04f 0100 	mov.w	r1, #0
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800727e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007282:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007286:	4688      	mov	r8, r1
 8007288:	4691      	mov	r9, r2
 800728a:	eb18 0005 	adds.w	r0, r8, r5
 800728e:	eb49 0106 	adc.w	r1, r9, r6
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	461d      	mov	r5, r3
 8007298:	f04f 0600 	mov.w	r6, #0
 800729c:	196b      	adds	r3, r5, r5
 800729e:	eb46 0406 	adc.w	r4, r6, r6
 80072a2:	461a      	mov	r2, r3
 80072a4:	4623      	mov	r3, r4
 80072a6:	f7f9 fc7b 	bl	8000ba0 <__aeabi_uldivmod>
 80072aa:	4603      	mov	r3, r0
 80072ac:	460c      	mov	r4, r1
 80072ae:	461a      	mov	r2, r3
 80072b0:	4ba5      	ldr	r3, [pc, #660]	; (8007548 <UART_SetConfig+0x384>)
 80072b2:	fba3 2302 	umull	r2, r3, r3, r2
 80072b6:	095b      	lsrs	r3, r3, #5
 80072b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	461d      	mov	r5, r3
 80072c0:	f04f 0600 	mov.w	r6, #0
 80072c4:	46a9      	mov	r9, r5
 80072c6:	46b2      	mov	sl, r6
 80072c8:	eb19 0309 	adds.w	r3, r9, r9
 80072cc:	eb4a 040a 	adc.w	r4, sl, sl
 80072d0:	4699      	mov	r9, r3
 80072d2:	46a2      	mov	sl, r4
 80072d4:	eb19 0905 	adds.w	r9, r9, r5
 80072d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80072dc:	f04f 0100 	mov.w	r1, #0
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072f0:	4689      	mov	r9, r1
 80072f2:	4692      	mov	sl, r2
 80072f4:	eb19 0005 	adds.w	r0, r9, r5
 80072f8:	eb4a 0106 	adc.w	r1, sl, r6
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	461d      	mov	r5, r3
 8007302:	f04f 0600 	mov.w	r6, #0
 8007306:	196b      	adds	r3, r5, r5
 8007308:	eb46 0406 	adc.w	r4, r6, r6
 800730c:	461a      	mov	r2, r3
 800730e:	4623      	mov	r3, r4
 8007310:	f7f9 fc46 	bl	8000ba0 <__aeabi_uldivmod>
 8007314:	4603      	mov	r3, r0
 8007316:	460c      	mov	r4, r1
 8007318:	461a      	mov	r2, r3
 800731a:	4b8b      	ldr	r3, [pc, #556]	; (8007548 <UART_SetConfig+0x384>)
 800731c:	fba3 1302 	umull	r1, r3, r3, r2
 8007320:	095b      	lsrs	r3, r3, #5
 8007322:	2164      	movs	r1, #100	; 0x64
 8007324:	fb01 f303 	mul.w	r3, r1, r3
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	00db      	lsls	r3, r3, #3
 800732c:	3332      	adds	r3, #50	; 0x32
 800732e:	4a86      	ldr	r2, [pc, #536]	; (8007548 <UART_SetConfig+0x384>)
 8007330:	fba2 2303 	umull	r2, r3, r2, r3
 8007334:	095b      	lsrs	r3, r3, #5
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800733c:	4498      	add	r8, r3
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	461d      	mov	r5, r3
 8007342:	f04f 0600 	mov.w	r6, #0
 8007346:	46a9      	mov	r9, r5
 8007348:	46b2      	mov	sl, r6
 800734a:	eb19 0309 	adds.w	r3, r9, r9
 800734e:	eb4a 040a 	adc.w	r4, sl, sl
 8007352:	4699      	mov	r9, r3
 8007354:	46a2      	mov	sl, r4
 8007356:	eb19 0905 	adds.w	r9, r9, r5
 800735a:	eb4a 0a06 	adc.w	sl, sl, r6
 800735e:	f04f 0100 	mov.w	r1, #0
 8007362:	f04f 0200 	mov.w	r2, #0
 8007366:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800736a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800736e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007372:	4689      	mov	r9, r1
 8007374:	4692      	mov	sl, r2
 8007376:	eb19 0005 	adds.w	r0, r9, r5
 800737a:	eb4a 0106 	adc.w	r1, sl, r6
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	461d      	mov	r5, r3
 8007384:	f04f 0600 	mov.w	r6, #0
 8007388:	196b      	adds	r3, r5, r5
 800738a:	eb46 0406 	adc.w	r4, r6, r6
 800738e:	461a      	mov	r2, r3
 8007390:	4623      	mov	r3, r4
 8007392:	f7f9 fc05 	bl	8000ba0 <__aeabi_uldivmod>
 8007396:	4603      	mov	r3, r0
 8007398:	460c      	mov	r4, r1
 800739a:	461a      	mov	r2, r3
 800739c:	4b6a      	ldr	r3, [pc, #424]	; (8007548 <UART_SetConfig+0x384>)
 800739e:	fba3 1302 	umull	r1, r3, r3, r2
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	2164      	movs	r1, #100	; 0x64
 80073a6:	fb01 f303 	mul.w	r3, r1, r3
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	3332      	adds	r3, #50	; 0x32
 80073b0:	4a65      	ldr	r2, [pc, #404]	; (8007548 <UART_SetConfig+0x384>)
 80073b2:	fba2 2303 	umull	r2, r3, r2, r3
 80073b6:	095b      	lsrs	r3, r3, #5
 80073b8:	f003 0207 	and.w	r2, r3, #7
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4442      	add	r2, r8
 80073c2:	609a      	str	r2, [r3, #8]
 80073c4:	e26f      	b.n	80078a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073c6:	f7ff f80d 	bl	80063e4 <HAL_RCC_GetPCLK1Freq>
 80073ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	461d      	mov	r5, r3
 80073d0:	f04f 0600 	mov.w	r6, #0
 80073d4:	46a8      	mov	r8, r5
 80073d6:	46b1      	mov	r9, r6
 80073d8:	eb18 0308 	adds.w	r3, r8, r8
 80073dc:	eb49 0409 	adc.w	r4, r9, r9
 80073e0:	4698      	mov	r8, r3
 80073e2:	46a1      	mov	r9, r4
 80073e4:	eb18 0805 	adds.w	r8, r8, r5
 80073e8:	eb49 0906 	adc.w	r9, r9, r6
 80073ec:	f04f 0100 	mov.w	r1, #0
 80073f0:	f04f 0200 	mov.w	r2, #0
 80073f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80073f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80073fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007400:	4688      	mov	r8, r1
 8007402:	4691      	mov	r9, r2
 8007404:	eb18 0005 	adds.w	r0, r8, r5
 8007408:	eb49 0106 	adc.w	r1, r9, r6
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	461d      	mov	r5, r3
 8007412:	f04f 0600 	mov.w	r6, #0
 8007416:	196b      	adds	r3, r5, r5
 8007418:	eb46 0406 	adc.w	r4, r6, r6
 800741c:	461a      	mov	r2, r3
 800741e:	4623      	mov	r3, r4
 8007420:	f7f9 fbbe 	bl	8000ba0 <__aeabi_uldivmod>
 8007424:	4603      	mov	r3, r0
 8007426:	460c      	mov	r4, r1
 8007428:	461a      	mov	r2, r3
 800742a:	4b47      	ldr	r3, [pc, #284]	; (8007548 <UART_SetConfig+0x384>)
 800742c:	fba3 2302 	umull	r2, r3, r3, r2
 8007430:	095b      	lsrs	r3, r3, #5
 8007432:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	461d      	mov	r5, r3
 800743a:	f04f 0600 	mov.w	r6, #0
 800743e:	46a9      	mov	r9, r5
 8007440:	46b2      	mov	sl, r6
 8007442:	eb19 0309 	adds.w	r3, r9, r9
 8007446:	eb4a 040a 	adc.w	r4, sl, sl
 800744a:	4699      	mov	r9, r3
 800744c:	46a2      	mov	sl, r4
 800744e:	eb19 0905 	adds.w	r9, r9, r5
 8007452:	eb4a 0a06 	adc.w	sl, sl, r6
 8007456:	f04f 0100 	mov.w	r1, #0
 800745a:	f04f 0200 	mov.w	r2, #0
 800745e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007462:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007466:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800746a:	4689      	mov	r9, r1
 800746c:	4692      	mov	sl, r2
 800746e:	eb19 0005 	adds.w	r0, r9, r5
 8007472:	eb4a 0106 	adc.w	r1, sl, r6
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	461d      	mov	r5, r3
 800747c:	f04f 0600 	mov.w	r6, #0
 8007480:	196b      	adds	r3, r5, r5
 8007482:	eb46 0406 	adc.w	r4, r6, r6
 8007486:	461a      	mov	r2, r3
 8007488:	4623      	mov	r3, r4
 800748a:	f7f9 fb89 	bl	8000ba0 <__aeabi_uldivmod>
 800748e:	4603      	mov	r3, r0
 8007490:	460c      	mov	r4, r1
 8007492:	461a      	mov	r2, r3
 8007494:	4b2c      	ldr	r3, [pc, #176]	; (8007548 <UART_SetConfig+0x384>)
 8007496:	fba3 1302 	umull	r1, r3, r3, r2
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	2164      	movs	r1, #100	; 0x64
 800749e:	fb01 f303 	mul.w	r3, r1, r3
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	3332      	adds	r3, #50	; 0x32
 80074a8:	4a27      	ldr	r2, [pc, #156]	; (8007548 <UART_SetConfig+0x384>)
 80074aa:	fba2 2303 	umull	r2, r3, r2, r3
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074b6:	4498      	add	r8, r3
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	461d      	mov	r5, r3
 80074bc:	f04f 0600 	mov.w	r6, #0
 80074c0:	46a9      	mov	r9, r5
 80074c2:	46b2      	mov	sl, r6
 80074c4:	eb19 0309 	adds.w	r3, r9, r9
 80074c8:	eb4a 040a 	adc.w	r4, sl, sl
 80074cc:	4699      	mov	r9, r3
 80074ce:	46a2      	mov	sl, r4
 80074d0:	eb19 0905 	adds.w	r9, r9, r5
 80074d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80074d8:	f04f 0100 	mov.w	r1, #0
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80074e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80074ec:	4689      	mov	r9, r1
 80074ee:	4692      	mov	sl, r2
 80074f0:	eb19 0005 	adds.w	r0, r9, r5
 80074f4:	eb4a 0106 	adc.w	r1, sl, r6
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	461d      	mov	r5, r3
 80074fe:	f04f 0600 	mov.w	r6, #0
 8007502:	196b      	adds	r3, r5, r5
 8007504:	eb46 0406 	adc.w	r4, r6, r6
 8007508:	461a      	mov	r2, r3
 800750a:	4623      	mov	r3, r4
 800750c:	f7f9 fb48 	bl	8000ba0 <__aeabi_uldivmod>
 8007510:	4603      	mov	r3, r0
 8007512:	460c      	mov	r4, r1
 8007514:	461a      	mov	r2, r3
 8007516:	4b0c      	ldr	r3, [pc, #48]	; (8007548 <UART_SetConfig+0x384>)
 8007518:	fba3 1302 	umull	r1, r3, r3, r2
 800751c:	095b      	lsrs	r3, r3, #5
 800751e:	2164      	movs	r1, #100	; 0x64
 8007520:	fb01 f303 	mul.w	r3, r1, r3
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	00db      	lsls	r3, r3, #3
 8007528:	3332      	adds	r3, #50	; 0x32
 800752a:	4a07      	ldr	r2, [pc, #28]	; (8007548 <UART_SetConfig+0x384>)
 800752c:	fba2 2303 	umull	r2, r3, r2, r3
 8007530:	095b      	lsrs	r3, r3, #5
 8007532:	f003 0207 	and.w	r2, r3, #7
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4442      	add	r2, r8
 800753c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800753e:	e1b2      	b.n	80078a6 <UART_SetConfig+0x6e2>
 8007540:	40011000 	.word	0x40011000
 8007544:	40011400 	.word	0x40011400
 8007548:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4ad7      	ldr	r2, [pc, #860]	; (80078b0 <UART_SetConfig+0x6ec>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d005      	beq.n	8007562 <UART_SetConfig+0x39e>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4ad6      	ldr	r2, [pc, #856]	; (80078b4 <UART_SetConfig+0x6f0>)
 800755c:	4293      	cmp	r3, r2
 800755e:	f040 80d1 	bne.w	8007704 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007562:	f7fe ff53 	bl	800640c <HAL_RCC_GetPCLK2Freq>
 8007566:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	469a      	mov	sl, r3
 800756c:	f04f 0b00 	mov.w	fp, #0
 8007570:	46d0      	mov	r8, sl
 8007572:	46d9      	mov	r9, fp
 8007574:	eb18 0308 	adds.w	r3, r8, r8
 8007578:	eb49 0409 	adc.w	r4, r9, r9
 800757c:	4698      	mov	r8, r3
 800757e:	46a1      	mov	r9, r4
 8007580:	eb18 080a 	adds.w	r8, r8, sl
 8007584:	eb49 090b 	adc.w	r9, r9, fp
 8007588:	f04f 0100 	mov.w	r1, #0
 800758c:	f04f 0200 	mov.w	r2, #0
 8007590:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007594:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007598:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800759c:	4688      	mov	r8, r1
 800759e:	4691      	mov	r9, r2
 80075a0:	eb1a 0508 	adds.w	r5, sl, r8
 80075a4:	eb4b 0609 	adc.w	r6, fp, r9
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	4619      	mov	r1, r3
 80075ae:	f04f 0200 	mov.w	r2, #0
 80075b2:	f04f 0300 	mov.w	r3, #0
 80075b6:	f04f 0400 	mov.w	r4, #0
 80075ba:	0094      	lsls	r4, r2, #2
 80075bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075c0:	008b      	lsls	r3, r1, #2
 80075c2:	461a      	mov	r2, r3
 80075c4:	4623      	mov	r3, r4
 80075c6:	4628      	mov	r0, r5
 80075c8:	4631      	mov	r1, r6
 80075ca:	f7f9 fae9 	bl	8000ba0 <__aeabi_uldivmod>
 80075ce:	4603      	mov	r3, r0
 80075d0:	460c      	mov	r4, r1
 80075d2:	461a      	mov	r2, r3
 80075d4:	4bb8      	ldr	r3, [pc, #736]	; (80078b8 <UART_SetConfig+0x6f4>)
 80075d6:	fba3 2302 	umull	r2, r3, r3, r2
 80075da:	095b      	lsrs	r3, r3, #5
 80075dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	469b      	mov	fp, r3
 80075e4:	f04f 0c00 	mov.w	ip, #0
 80075e8:	46d9      	mov	r9, fp
 80075ea:	46e2      	mov	sl, ip
 80075ec:	eb19 0309 	adds.w	r3, r9, r9
 80075f0:	eb4a 040a 	adc.w	r4, sl, sl
 80075f4:	4699      	mov	r9, r3
 80075f6:	46a2      	mov	sl, r4
 80075f8:	eb19 090b 	adds.w	r9, r9, fp
 80075fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007600:	f04f 0100 	mov.w	r1, #0
 8007604:	f04f 0200 	mov.w	r2, #0
 8007608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800760c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007610:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007614:	4689      	mov	r9, r1
 8007616:	4692      	mov	sl, r2
 8007618:	eb1b 0509 	adds.w	r5, fp, r9
 800761c:	eb4c 060a 	adc.w	r6, ip, sl
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	4619      	mov	r1, r3
 8007626:	f04f 0200 	mov.w	r2, #0
 800762a:	f04f 0300 	mov.w	r3, #0
 800762e:	f04f 0400 	mov.w	r4, #0
 8007632:	0094      	lsls	r4, r2, #2
 8007634:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007638:	008b      	lsls	r3, r1, #2
 800763a:	461a      	mov	r2, r3
 800763c:	4623      	mov	r3, r4
 800763e:	4628      	mov	r0, r5
 8007640:	4631      	mov	r1, r6
 8007642:	f7f9 faad 	bl	8000ba0 <__aeabi_uldivmod>
 8007646:	4603      	mov	r3, r0
 8007648:	460c      	mov	r4, r1
 800764a:	461a      	mov	r2, r3
 800764c:	4b9a      	ldr	r3, [pc, #616]	; (80078b8 <UART_SetConfig+0x6f4>)
 800764e:	fba3 1302 	umull	r1, r3, r3, r2
 8007652:	095b      	lsrs	r3, r3, #5
 8007654:	2164      	movs	r1, #100	; 0x64
 8007656:	fb01 f303 	mul.w	r3, r1, r3
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	011b      	lsls	r3, r3, #4
 800765e:	3332      	adds	r3, #50	; 0x32
 8007660:	4a95      	ldr	r2, [pc, #596]	; (80078b8 <UART_SetConfig+0x6f4>)
 8007662:	fba2 2303 	umull	r2, r3, r2, r3
 8007666:	095b      	lsrs	r3, r3, #5
 8007668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800766c:	4498      	add	r8, r3
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	469b      	mov	fp, r3
 8007672:	f04f 0c00 	mov.w	ip, #0
 8007676:	46d9      	mov	r9, fp
 8007678:	46e2      	mov	sl, ip
 800767a:	eb19 0309 	adds.w	r3, r9, r9
 800767e:	eb4a 040a 	adc.w	r4, sl, sl
 8007682:	4699      	mov	r9, r3
 8007684:	46a2      	mov	sl, r4
 8007686:	eb19 090b 	adds.w	r9, r9, fp
 800768a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800768e:	f04f 0100 	mov.w	r1, #0
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800769a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800769e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076a2:	4689      	mov	r9, r1
 80076a4:	4692      	mov	sl, r2
 80076a6:	eb1b 0509 	adds.w	r5, fp, r9
 80076aa:	eb4c 060a 	adc.w	r6, ip, sl
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	4619      	mov	r1, r3
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	f04f 0300 	mov.w	r3, #0
 80076bc:	f04f 0400 	mov.w	r4, #0
 80076c0:	0094      	lsls	r4, r2, #2
 80076c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076c6:	008b      	lsls	r3, r1, #2
 80076c8:	461a      	mov	r2, r3
 80076ca:	4623      	mov	r3, r4
 80076cc:	4628      	mov	r0, r5
 80076ce:	4631      	mov	r1, r6
 80076d0:	f7f9 fa66 	bl	8000ba0 <__aeabi_uldivmod>
 80076d4:	4603      	mov	r3, r0
 80076d6:	460c      	mov	r4, r1
 80076d8:	461a      	mov	r2, r3
 80076da:	4b77      	ldr	r3, [pc, #476]	; (80078b8 <UART_SetConfig+0x6f4>)
 80076dc:	fba3 1302 	umull	r1, r3, r3, r2
 80076e0:	095b      	lsrs	r3, r3, #5
 80076e2:	2164      	movs	r1, #100	; 0x64
 80076e4:	fb01 f303 	mul.w	r3, r1, r3
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	3332      	adds	r3, #50	; 0x32
 80076ee:	4a72      	ldr	r2, [pc, #456]	; (80078b8 <UART_SetConfig+0x6f4>)
 80076f0:	fba2 2303 	umull	r2, r3, r2, r3
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	f003 020f 	and.w	r2, r3, #15
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4442      	add	r2, r8
 8007700:	609a      	str	r2, [r3, #8]
 8007702:	e0d0      	b.n	80078a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007704:	f7fe fe6e 	bl	80063e4 <HAL_RCC_GetPCLK1Freq>
 8007708:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	469a      	mov	sl, r3
 800770e:	f04f 0b00 	mov.w	fp, #0
 8007712:	46d0      	mov	r8, sl
 8007714:	46d9      	mov	r9, fp
 8007716:	eb18 0308 	adds.w	r3, r8, r8
 800771a:	eb49 0409 	adc.w	r4, r9, r9
 800771e:	4698      	mov	r8, r3
 8007720:	46a1      	mov	r9, r4
 8007722:	eb18 080a 	adds.w	r8, r8, sl
 8007726:	eb49 090b 	adc.w	r9, r9, fp
 800772a:	f04f 0100 	mov.w	r1, #0
 800772e:	f04f 0200 	mov.w	r2, #0
 8007732:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007736:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800773a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800773e:	4688      	mov	r8, r1
 8007740:	4691      	mov	r9, r2
 8007742:	eb1a 0508 	adds.w	r5, sl, r8
 8007746:	eb4b 0609 	adc.w	r6, fp, r9
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	4619      	mov	r1, r3
 8007750:	f04f 0200 	mov.w	r2, #0
 8007754:	f04f 0300 	mov.w	r3, #0
 8007758:	f04f 0400 	mov.w	r4, #0
 800775c:	0094      	lsls	r4, r2, #2
 800775e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007762:	008b      	lsls	r3, r1, #2
 8007764:	461a      	mov	r2, r3
 8007766:	4623      	mov	r3, r4
 8007768:	4628      	mov	r0, r5
 800776a:	4631      	mov	r1, r6
 800776c:	f7f9 fa18 	bl	8000ba0 <__aeabi_uldivmod>
 8007770:	4603      	mov	r3, r0
 8007772:	460c      	mov	r4, r1
 8007774:	461a      	mov	r2, r3
 8007776:	4b50      	ldr	r3, [pc, #320]	; (80078b8 <UART_SetConfig+0x6f4>)
 8007778:	fba3 2302 	umull	r2, r3, r3, r2
 800777c:	095b      	lsrs	r3, r3, #5
 800777e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	469b      	mov	fp, r3
 8007786:	f04f 0c00 	mov.w	ip, #0
 800778a:	46d9      	mov	r9, fp
 800778c:	46e2      	mov	sl, ip
 800778e:	eb19 0309 	adds.w	r3, r9, r9
 8007792:	eb4a 040a 	adc.w	r4, sl, sl
 8007796:	4699      	mov	r9, r3
 8007798:	46a2      	mov	sl, r4
 800779a:	eb19 090b 	adds.w	r9, r9, fp
 800779e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80077a2:	f04f 0100 	mov.w	r1, #0
 80077a6:	f04f 0200 	mov.w	r2, #0
 80077aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077b6:	4689      	mov	r9, r1
 80077b8:	4692      	mov	sl, r2
 80077ba:	eb1b 0509 	adds.w	r5, fp, r9
 80077be:	eb4c 060a 	adc.w	r6, ip, sl
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	4619      	mov	r1, r3
 80077c8:	f04f 0200 	mov.w	r2, #0
 80077cc:	f04f 0300 	mov.w	r3, #0
 80077d0:	f04f 0400 	mov.w	r4, #0
 80077d4:	0094      	lsls	r4, r2, #2
 80077d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077da:	008b      	lsls	r3, r1, #2
 80077dc:	461a      	mov	r2, r3
 80077de:	4623      	mov	r3, r4
 80077e0:	4628      	mov	r0, r5
 80077e2:	4631      	mov	r1, r6
 80077e4:	f7f9 f9dc 	bl	8000ba0 <__aeabi_uldivmod>
 80077e8:	4603      	mov	r3, r0
 80077ea:	460c      	mov	r4, r1
 80077ec:	461a      	mov	r2, r3
 80077ee:	4b32      	ldr	r3, [pc, #200]	; (80078b8 <UART_SetConfig+0x6f4>)
 80077f0:	fba3 1302 	umull	r1, r3, r3, r2
 80077f4:	095b      	lsrs	r3, r3, #5
 80077f6:	2164      	movs	r1, #100	; 0x64
 80077f8:	fb01 f303 	mul.w	r3, r1, r3
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	011b      	lsls	r3, r3, #4
 8007800:	3332      	adds	r3, #50	; 0x32
 8007802:	4a2d      	ldr	r2, [pc, #180]	; (80078b8 <UART_SetConfig+0x6f4>)
 8007804:	fba2 2303 	umull	r2, r3, r2, r3
 8007808:	095b      	lsrs	r3, r3, #5
 800780a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800780e:	4498      	add	r8, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	469b      	mov	fp, r3
 8007814:	f04f 0c00 	mov.w	ip, #0
 8007818:	46d9      	mov	r9, fp
 800781a:	46e2      	mov	sl, ip
 800781c:	eb19 0309 	adds.w	r3, r9, r9
 8007820:	eb4a 040a 	adc.w	r4, sl, sl
 8007824:	4699      	mov	r9, r3
 8007826:	46a2      	mov	sl, r4
 8007828:	eb19 090b 	adds.w	r9, r9, fp
 800782c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007830:	f04f 0100 	mov.w	r1, #0
 8007834:	f04f 0200 	mov.w	r2, #0
 8007838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800783c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007840:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007844:	4689      	mov	r9, r1
 8007846:	4692      	mov	sl, r2
 8007848:	eb1b 0509 	adds.w	r5, fp, r9
 800784c:	eb4c 060a 	adc.w	r6, ip, sl
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	4619      	mov	r1, r3
 8007856:	f04f 0200 	mov.w	r2, #0
 800785a:	f04f 0300 	mov.w	r3, #0
 800785e:	f04f 0400 	mov.w	r4, #0
 8007862:	0094      	lsls	r4, r2, #2
 8007864:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007868:	008b      	lsls	r3, r1, #2
 800786a:	461a      	mov	r2, r3
 800786c:	4623      	mov	r3, r4
 800786e:	4628      	mov	r0, r5
 8007870:	4631      	mov	r1, r6
 8007872:	f7f9 f995 	bl	8000ba0 <__aeabi_uldivmod>
 8007876:	4603      	mov	r3, r0
 8007878:	460c      	mov	r4, r1
 800787a:	461a      	mov	r2, r3
 800787c:	4b0e      	ldr	r3, [pc, #56]	; (80078b8 <UART_SetConfig+0x6f4>)
 800787e:	fba3 1302 	umull	r1, r3, r3, r2
 8007882:	095b      	lsrs	r3, r3, #5
 8007884:	2164      	movs	r1, #100	; 0x64
 8007886:	fb01 f303 	mul.w	r3, r1, r3
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	011b      	lsls	r3, r3, #4
 800788e:	3332      	adds	r3, #50	; 0x32
 8007890:	4a09      	ldr	r2, [pc, #36]	; (80078b8 <UART_SetConfig+0x6f4>)
 8007892:	fba2 2303 	umull	r2, r3, r2, r3
 8007896:	095b      	lsrs	r3, r3, #5
 8007898:	f003 020f 	and.w	r2, r3, #15
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4442      	add	r2, r8
 80078a2:	609a      	str	r2, [r3, #8]
}
 80078a4:	e7ff      	b.n	80078a6 <UART_SetConfig+0x6e2>
 80078a6:	bf00      	nop
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b0:	40011000 	.word	0x40011000
 80078b4:	40011400 	.word	0x40011400
 80078b8:	51eb851f 	.word	0x51eb851f

080078bc <gcvt>:
 80078bc:	b530      	push	{r4, r5, lr}
 80078be:	ed2d 8b02 	vpush	{d8}
 80078c2:	eeb0 8a40 	vmov.f32	s16, s0
 80078c6:	eef0 8a60 	vmov.f32	s17, s1
 80078ca:	460c      	mov	r4, r1
 80078cc:	2200      	movs	r2, #0
 80078ce:	b083      	sub	sp, #12
 80078d0:	4605      	mov	r5, r0
 80078d2:	2300      	movs	r3, #0
 80078d4:	ec51 0b10 	vmov	r0, r1, d0
 80078d8:	f7f9 f8ac 	bl	8000a34 <__aeabi_dcmplt>
 80078dc:	4622      	mov	r2, r4
 80078de:	b118      	cbz	r0, 80078e8 <gcvt+0x2c>
 80078e0:	232d      	movs	r3, #45	; 0x2d
 80078e2:	f802 3b01 	strb.w	r3, [r2], #1
 80078e6:	3d01      	subs	r5, #1
 80078e8:	2300      	movs	r3, #0
 80078ea:	4809      	ldr	r0, [pc, #36]	; (8007910 <gcvt+0x54>)
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	4629      	mov	r1, r5
 80078f0:	2367      	movs	r3, #103	; 0x67
 80078f2:	eeb0 0a48 	vmov.f32	s0, s16
 80078f6:	eef0 0a68 	vmov.f32	s1, s17
 80078fa:	6800      	ldr	r0, [r0, #0]
 80078fc:	f001 faa4 	bl	8008e48 <_gcvt>
 8007900:	2800      	cmp	r0, #0
 8007902:	bf14      	ite	ne
 8007904:	4620      	movne	r0, r4
 8007906:	2000      	moveq	r0, #0
 8007908:	b003      	add	sp, #12
 800790a:	ecbd 8b02 	vpop	{d8}
 800790e:	bd30      	pop	{r4, r5, pc}
 8007910:	2000000c 	.word	0x2000000c

08007914 <__errno>:
 8007914:	4b01      	ldr	r3, [pc, #4]	; (800791c <__errno+0x8>)
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	2000000c 	.word	0x2000000c

08007920 <__libc_init_array>:
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	4e0d      	ldr	r6, [pc, #52]	; (8007958 <__libc_init_array+0x38>)
 8007924:	4c0d      	ldr	r4, [pc, #52]	; (800795c <__libc_init_array+0x3c>)
 8007926:	1ba4      	subs	r4, r4, r6
 8007928:	10a4      	asrs	r4, r4, #2
 800792a:	2500      	movs	r5, #0
 800792c:	42a5      	cmp	r5, r4
 800792e:	d109      	bne.n	8007944 <__libc_init_array+0x24>
 8007930:	4e0b      	ldr	r6, [pc, #44]	; (8007960 <__libc_init_array+0x40>)
 8007932:	4c0c      	ldr	r4, [pc, #48]	; (8007964 <__libc_init_array+0x44>)
 8007934:	f003 f952 	bl	800abdc <_init>
 8007938:	1ba4      	subs	r4, r4, r6
 800793a:	10a4      	asrs	r4, r4, #2
 800793c:	2500      	movs	r5, #0
 800793e:	42a5      	cmp	r5, r4
 8007940:	d105      	bne.n	800794e <__libc_init_array+0x2e>
 8007942:	bd70      	pop	{r4, r5, r6, pc}
 8007944:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007948:	4798      	blx	r3
 800794a:	3501      	adds	r5, #1
 800794c:	e7ee      	b.n	800792c <__libc_init_array+0xc>
 800794e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007952:	4798      	blx	r3
 8007954:	3501      	adds	r5, #1
 8007956:	e7f2      	b.n	800793e <__libc_init_array+0x1e>
 8007958:	0800aef8 	.word	0x0800aef8
 800795c:	0800aef8 	.word	0x0800aef8
 8007960:	0800aef8 	.word	0x0800aef8
 8007964:	0800aefc 	.word	0x0800aefc

08007968 <__itoa>:
 8007968:	1e93      	subs	r3, r2, #2
 800796a:	2b22      	cmp	r3, #34	; 0x22
 800796c:	b510      	push	{r4, lr}
 800796e:	460c      	mov	r4, r1
 8007970:	d904      	bls.n	800797c <__itoa+0x14>
 8007972:	2300      	movs	r3, #0
 8007974:	700b      	strb	r3, [r1, #0]
 8007976:	461c      	mov	r4, r3
 8007978:	4620      	mov	r0, r4
 800797a:	bd10      	pop	{r4, pc}
 800797c:	2a0a      	cmp	r2, #10
 800797e:	d109      	bne.n	8007994 <__itoa+0x2c>
 8007980:	2800      	cmp	r0, #0
 8007982:	da07      	bge.n	8007994 <__itoa+0x2c>
 8007984:	232d      	movs	r3, #45	; 0x2d
 8007986:	700b      	strb	r3, [r1, #0]
 8007988:	4240      	negs	r0, r0
 800798a:	2101      	movs	r1, #1
 800798c:	4421      	add	r1, r4
 800798e:	f000 fb63 	bl	8008058 <__utoa>
 8007992:	e7f1      	b.n	8007978 <__itoa+0x10>
 8007994:	2100      	movs	r1, #0
 8007996:	e7f9      	b.n	800798c <__itoa+0x24>

08007998 <itoa>:
 8007998:	f7ff bfe6 	b.w	8007968 <__itoa>

0800799c <memcpy>:
 800799c:	b510      	push	{r4, lr}
 800799e:	1e43      	subs	r3, r0, #1
 80079a0:	440a      	add	r2, r1
 80079a2:	4291      	cmp	r1, r2
 80079a4:	d100      	bne.n	80079a8 <memcpy+0xc>
 80079a6:	bd10      	pop	{r4, pc}
 80079a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079b0:	e7f7      	b.n	80079a2 <memcpy+0x6>

080079b2 <memset>:
 80079b2:	4402      	add	r2, r0
 80079b4:	4603      	mov	r3, r0
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d100      	bne.n	80079bc <memset+0xa>
 80079ba:	4770      	bx	lr
 80079bc:	f803 1b01 	strb.w	r1, [r3], #1
 80079c0:	e7f9      	b.n	80079b6 <memset+0x4>

080079c2 <__cvt>:
 80079c2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079c6:	ec55 4b10 	vmov	r4, r5, d0
 80079ca:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80079cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80079d0:	2d00      	cmp	r5, #0
 80079d2:	460e      	mov	r6, r1
 80079d4:	4691      	mov	r9, r2
 80079d6:	4619      	mov	r1, r3
 80079d8:	bfb8      	it	lt
 80079da:	4622      	movlt	r2, r4
 80079dc:	462b      	mov	r3, r5
 80079de:	f027 0720 	bic.w	r7, r7, #32
 80079e2:	bfbb      	ittet	lt
 80079e4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079e8:	461d      	movlt	r5, r3
 80079ea:	2300      	movge	r3, #0
 80079ec:	232d      	movlt	r3, #45	; 0x2d
 80079ee:	bfb8      	it	lt
 80079f0:	4614      	movlt	r4, r2
 80079f2:	2f46      	cmp	r7, #70	; 0x46
 80079f4:	700b      	strb	r3, [r1, #0]
 80079f6:	d004      	beq.n	8007a02 <__cvt+0x40>
 80079f8:	2f45      	cmp	r7, #69	; 0x45
 80079fa:	d100      	bne.n	80079fe <__cvt+0x3c>
 80079fc:	3601      	adds	r6, #1
 80079fe:	2102      	movs	r1, #2
 8007a00:	e000      	b.n	8007a04 <__cvt+0x42>
 8007a02:	2103      	movs	r1, #3
 8007a04:	ab03      	add	r3, sp, #12
 8007a06:	9301      	str	r3, [sp, #4]
 8007a08:	ab02      	add	r3, sp, #8
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	4632      	mov	r2, r6
 8007a0e:	4653      	mov	r3, sl
 8007a10:	ec45 4b10 	vmov	d0, r4, r5
 8007a14:	f000 fbec 	bl	80081f0 <_dtoa_r>
 8007a18:	2f47      	cmp	r7, #71	; 0x47
 8007a1a:	4680      	mov	r8, r0
 8007a1c:	d102      	bne.n	8007a24 <__cvt+0x62>
 8007a1e:	f019 0f01 	tst.w	r9, #1
 8007a22:	d026      	beq.n	8007a72 <__cvt+0xb0>
 8007a24:	2f46      	cmp	r7, #70	; 0x46
 8007a26:	eb08 0906 	add.w	r9, r8, r6
 8007a2a:	d111      	bne.n	8007a50 <__cvt+0x8e>
 8007a2c:	f898 3000 	ldrb.w	r3, [r8]
 8007a30:	2b30      	cmp	r3, #48	; 0x30
 8007a32:	d10a      	bne.n	8007a4a <__cvt+0x88>
 8007a34:	2200      	movs	r2, #0
 8007a36:	2300      	movs	r3, #0
 8007a38:	4620      	mov	r0, r4
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	f7f8 fff0 	bl	8000a20 <__aeabi_dcmpeq>
 8007a40:	b918      	cbnz	r0, 8007a4a <__cvt+0x88>
 8007a42:	f1c6 0601 	rsb	r6, r6, #1
 8007a46:	f8ca 6000 	str.w	r6, [sl]
 8007a4a:	f8da 3000 	ldr.w	r3, [sl]
 8007a4e:	4499      	add	r9, r3
 8007a50:	2200      	movs	r2, #0
 8007a52:	2300      	movs	r3, #0
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	f7f8 ffe2 	bl	8000a20 <__aeabi_dcmpeq>
 8007a5c:	b938      	cbnz	r0, 8007a6e <__cvt+0xac>
 8007a5e:	2230      	movs	r2, #48	; 0x30
 8007a60:	9b03      	ldr	r3, [sp, #12]
 8007a62:	454b      	cmp	r3, r9
 8007a64:	d205      	bcs.n	8007a72 <__cvt+0xb0>
 8007a66:	1c59      	adds	r1, r3, #1
 8007a68:	9103      	str	r1, [sp, #12]
 8007a6a:	701a      	strb	r2, [r3, #0]
 8007a6c:	e7f8      	b.n	8007a60 <__cvt+0x9e>
 8007a6e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a72:	9b03      	ldr	r3, [sp, #12]
 8007a74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a76:	eba3 0308 	sub.w	r3, r3, r8
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	b004      	add	sp, #16
 8007a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007a84 <__exponent>:
 8007a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a86:	2900      	cmp	r1, #0
 8007a88:	4604      	mov	r4, r0
 8007a8a:	bfba      	itte	lt
 8007a8c:	4249      	neglt	r1, r1
 8007a8e:	232d      	movlt	r3, #45	; 0x2d
 8007a90:	232b      	movge	r3, #43	; 0x2b
 8007a92:	2909      	cmp	r1, #9
 8007a94:	f804 2b02 	strb.w	r2, [r4], #2
 8007a98:	7043      	strb	r3, [r0, #1]
 8007a9a:	dd20      	ble.n	8007ade <__exponent+0x5a>
 8007a9c:	f10d 0307 	add.w	r3, sp, #7
 8007aa0:	461f      	mov	r7, r3
 8007aa2:	260a      	movs	r6, #10
 8007aa4:	fb91 f5f6 	sdiv	r5, r1, r6
 8007aa8:	fb06 1115 	mls	r1, r6, r5, r1
 8007aac:	3130      	adds	r1, #48	; 0x30
 8007aae:	2d09      	cmp	r5, #9
 8007ab0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007ab4:	f103 32ff 	add.w	r2, r3, #4294967295
 8007ab8:	4629      	mov	r1, r5
 8007aba:	dc09      	bgt.n	8007ad0 <__exponent+0x4c>
 8007abc:	3130      	adds	r1, #48	; 0x30
 8007abe:	3b02      	subs	r3, #2
 8007ac0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007ac4:	42bb      	cmp	r3, r7
 8007ac6:	4622      	mov	r2, r4
 8007ac8:	d304      	bcc.n	8007ad4 <__exponent+0x50>
 8007aca:	1a10      	subs	r0, r2, r0
 8007acc:	b003      	add	sp, #12
 8007ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	e7e7      	b.n	8007aa4 <__exponent+0x20>
 8007ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ad8:	f804 2b01 	strb.w	r2, [r4], #1
 8007adc:	e7f2      	b.n	8007ac4 <__exponent+0x40>
 8007ade:	2330      	movs	r3, #48	; 0x30
 8007ae0:	4419      	add	r1, r3
 8007ae2:	7083      	strb	r3, [r0, #2]
 8007ae4:	1d02      	adds	r2, r0, #4
 8007ae6:	70c1      	strb	r1, [r0, #3]
 8007ae8:	e7ef      	b.n	8007aca <__exponent+0x46>
	...

08007aec <_printf_float>:
 8007aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af0:	b08d      	sub	sp, #52	; 0x34
 8007af2:	460c      	mov	r4, r1
 8007af4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007af8:	4616      	mov	r6, r2
 8007afa:	461f      	mov	r7, r3
 8007afc:	4605      	mov	r5, r0
 8007afe:	f001 fa6d 	bl	8008fdc <_localeconv_r>
 8007b02:	6803      	ldr	r3, [r0, #0]
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7f8 fb5e 	bl	80001c8 <strlen>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007b10:	f8d8 3000 	ldr.w	r3, [r8]
 8007b14:	9005      	str	r0, [sp, #20]
 8007b16:	3307      	adds	r3, #7
 8007b18:	f023 0307 	bic.w	r3, r3, #7
 8007b1c:	f103 0208 	add.w	r2, r3, #8
 8007b20:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007b24:	f8d4 b000 	ldr.w	fp, [r4]
 8007b28:	f8c8 2000 	str.w	r2, [r8]
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007b34:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007b38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b3c:	9307      	str	r3, [sp, #28]
 8007b3e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b42:	f04f 32ff 	mov.w	r2, #4294967295
 8007b46:	4ba7      	ldr	r3, [pc, #668]	; (8007de4 <_printf_float+0x2f8>)
 8007b48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b4c:	f7f8 ff9a 	bl	8000a84 <__aeabi_dcmpun>
 8007b50:	bb70      	cbnz	r0, 8007bb0 <_printf_float+0xc4>
 8007b52:	f04f 32ff 	mov.w	r2, #4294967295
 8007b56:	4ba3      	ldr	r3, [pc, #652]	; (8007de4 <_printf_float+0x2f8>)
 8007b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b5c:	f7f8 ff74 	bl	8000a48 <__aeabi_dcmple>
 8007b60:	bb30      	cbnz	r0, 8007bb0 <_printf_float+0xc4>
 8007b62:	2200      	movs	r2, #0
 8007b64:	2300      	movs	r3, #0
 8007b66:	4640      	mov	r0, r8
 8007b68:	4649      	mov	r1, r9
 8007b6a:	f7f8 ff63 	bl	8000a34 <__aeabi_dcmplt>
 8007b6e:	b110      	cbz	r0, 8007b76 <_printf_float+0x8a>
 8007b70:	232d      	movs	r3, #45	; 0x2d
 8007b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b76:	4a9c      	ldr	r2, [pc, #624]	; (8007de8 <_printf_float+0x2fc>)
 8007b78:	4b9c      	ldr	r3, [pc, #624]	; (8007dec <_printf_float+0x300>)
 8007b7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007b7e:	bf8c      	ite	hi
 8007b80:	4690      	movhi	r8, r2
 8007b82:	4698      	movls	r8, r3
 8007b84:	2303      	movs	r3, #3
 8007b86:	f02b 0204 	bic.w	r2, fp, #4
 8007b8a:	6123      	str	r3, [r4, #16]
 8007b8c:	6022      	str	r2, [r4, #0]
 8007b8e:	f04f 0900 	mov.w	r9, #0
 8007b92:	9700      	str	r7, [sp, #0]
 8007b94:	4633      	mov	r3, r6
 8007b96:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b98:	4621      	mov	r1, r4
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f000 f9e6 	bl	8007f6c <_printf_common>
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	f040 808d 	bne.w	8007cc0 <_printf_float+0x1d4>
 8007ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8007baa:	b00d      	add	sp, #52	; 0x34
 8007bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	464b      	mov	r3, r9
 8007bb4:	4640      	mov	r0, r8
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	f7f8 ff64 	bl	8000a84 <__aeabi_dcmpun>
 8007bbc:	b110      	cbz	r0, 8007bc4 <_printf_float+0xd8>
 8007bbe:	4a8c      	ldr	r2, [pc, #560]	; (8007df0 <_printf_float+0x304>)
 8007bc0:	4b8c      	ldr	r3, [pc, #560]	; (8007df4 <_printf_float+0x308>)
 8007bc2:	e7da      	b.n	8007b7a <_printf_float+0x8e>
 8007bc4:	6861      	ldr	r1, [r4, #4]
 8007bc6:	1c4b      	adds	r3, r1, #1
 8007bc8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007bcc:	a80a      	add	r0, sp, #40	; 0x28
 8007bce:	d13e      	bne.n	8007c4e <_printf_float+0x162>
 8007bd0:	2306      	movs	r3, #6
 8007bd2:	6063      	str	r3, [r4, #4]
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007bda:	ab09      	add	r3, sp, #36	; 0x24
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	ec49 8b10 	vmov	d0, r8, r9
 8007be2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007be6:	6022      	str	r2, [r4, #0]
 8007be8:	f8cd a004 	str.w	sl, [sp, #4]
 8007bec:	6861      	ldr	r1, [r4, #4]
 8007bee:	4628      	mov	r0, r5
 8007bf0:	f7ff fee7 	bl	80079c2 <__cvt>
 8007bf4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007bf8:	2b47      	cmp	r3, #71	; 0x47
 8007bfa:	4680      	mov	r8, r0
 8007bfc:	d109      	bne.n	8007c12 <_printf_float+0x126>
 8007bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c00:	1cd8      	adds	r0, r3, #3
 8007c02:	db02      	blt.n	8007c0a <_printf_float+0x11e>
 8007c04:	6862      	ldr	r2, [r4, #4]
 8007c06:	4293      	cmp	r3, r2
 8007c08:	dd47      	ble.n	8007c9a <_printf_float+0x1ae>
 8007c0a:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c0e:	fa5f fa8a 	uxtb.w	sl, sl
 8007c12:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007c16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c18:	d824      	bhi.n	8007c64 <_printf_float+0x178>
 8007c1a:	3901      	subs	r1, #1
 8007c1c:	4652      	mov	r2, sl
 8007c1e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c22:	9109      	str	r1, [sp, #36]	; 0x24
 8007c24:	f7ff ff2e 	bl	8007a84 <__exponent>
 8007c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c2a:	1813      	adds	r3, r2, r0
 8007c2c:	2a01      	cmp	r2, #1
 8007c2e:	4681      	mov	r9, r0
 8007c30:	6123      	str	r3, [r4, #16]
 8007c32:	dc02      	bgt.n	8007c3a <_printf_float+0x14e>
 8007c34:	6822      	ldr	r2, [r4, #0]
 8007c36:	07d1      	lsls	r1, r2, #31
 8007c38:	d501      	bpl.n	8007c3e <_printf_float+0x152>
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	6123      	str	r3, [r4, #16]
 8007c3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0a5      	beq.n	8007b92 <_printf_float+0xa6>
 8007c46:	232d      	movs	r3, #45	; 0x2d
 8007c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c4c:	e7a1      	b.n	8007b92 <_printf_float+0xa6>
 8007c4e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007c52:	f000 8177 	beq.w	8007f44 <_printf_float+0x458>
 8007c56:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007c5a:	d1bb      	bne.n	8007bd4 <_printf_float+0xe8>
 8007c5c:	2900      	cmp	r1, #0
 8007c5e:	d1b9      	bne.n	8007bd4 <_printf_float+0xe8>
 8007c60:	2301      	movs	r3, #1
 8007c62:	e7b6      	b.n	8007bd2 <_printf_float+0xe6>
 8007c64:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007c68:	d119      	bne.n	8007c9e <_printf_float+0x1b2>
 8007c6a:	2900      	cmp	r1, #0
 8007c6c:	6863      	ldr	r3, [r4, #4]
 8007c6e:	dd0c      	ble.n	8007c8a <_printf_float+0x19e>
 8007c70:	6121      	str	r1, [r4, #16]
 8007c72:	b913      	cbnz	r3, 8007c7a <_printf_float+0x18e>
 8007c74:	6822      	ldr	r2, [r4, #0]
 8007c76:	07d2      	lsls	r2, r2, #31
 8007c78:	d502      	bpl.n	8007c80 <_printf_float+0x194>
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	440b      	add	r3, r1
 8007c7e:	6123      	str	r3, [r4, #16]
 8007c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c82:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c84:	f04f 0900 	mov.w	r9, #0
 8007c88:	e7d9      	b.n	8007c3e <_printf_float+0x152>
 8007c8a:	b913      	cbnz	r3, 8007c92 <_printf_float+0x1a6>
 8007c8c:	6822      	ldr	r2, [r4, #0]
 8007c8e:	07d0      	lsls	r0, r2, #31
 8007c90:	d501      	bpl.n	8007c96 <_printf_float+0x1aa>
 8007c92:	3302      	adds	r3, #2
 8007c94:	e7f3      	b.n	8007c7e <_printf_float+0x192>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e7f1      	b.n	8007c7e <_printf_float+0x192>
 8007c9a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007c9e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	db05      	blt.n	8007cb2 <_printf_float+0x1c6>
 8007ca6:	6822      	ldr	r2, [r4, #0]
 8007ca8:	6123      	str	r3, [r4, #16]
 8007caa:	07d1      	lsls	r1, r2, #31
 8007cac:	d5e8      	bpl.n	8007c80 <_printf_float+0x194>
 8007cae:	3301      	adds	r3, #1
 8007cb0:	e7e5      	b.n	8007c7e <_printf_float+0x192>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	bfd4      	ite	le
 8007cb6:	f1c3 0302 	rsble	r3, r3, #2
 8007cba:	2301      	movgt	r3, #1
 8007cbc:	4413      	add	r3, r2
 8007cbe:	e7de      	b.n	8007c7e <_printf_float+0x192>
 8007cc0:	6823      	ldr	r3, [r4, #0]
 8007cc2:	055a      	lsls	r2, r3, #21
 8007cc4:	d407      	bmi.n	8007cd6 <_printf_float+0x1ea>
 8007cc6:	6923      	ldr	r3, [r4, #16]
 8007cc8:	4642      	mov	r2, r8
 8007cca:	4631      	mov	r1, r6
 8007ccc:	4628      	mov	r0, r5
 8007cce:	47b8      	blx	r7
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d12b      	bne.n	8007d2c <_printf_float+0x240>
 8007cd4:	e767      	b.n	8007ba6 <_printf_float+0xba>
 8007cd6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007cda:	f240 80dc 	bls.w	8007e96 <_printf_float+0x3aa>
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ce6:	f7f8 fe9b 	bl	8000a20 <__aeabi_dcmpeq>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d033      	beq.n	8007d56 <_printf_float+0x26a>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	4a41      	ldr	r2, [pc, #260]	; (8007df8 <_printf_float+0x30c>)
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4628      	mov	r0, r5
 8007cf6:	47b8      	blx	r7
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	f43f af54 	beq.w	8007ba6 <_printf_float+0xba>
 8007cfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d02:	429a      	cmp	r2, r3
 8007d04:	db02      	blt.n	8007d0c <_printf_float+0x220>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	07d8      	lsls	r0, r3, #31
 8007d0a:	d50f      	bpl.n	8007d2c <_printf_float+0x240>
 8007d0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d10:	4631      	mov	r1, r6
 8007d12:	4628      	mov	r0, r5
 8007d14:	47b8      	blx	r7
 8007d16:	3001      	adds	r0, #1
 8007d18:	f43f af45 	beq.w	8007ba6 <_printf_float+0xba>
 8007d1c:	f04f 0800 	mov.w	r8, #0
 8007d20:	f104 091a 	add.w	r9, r4, #26
 8007d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d26:	3b01      	subs	r3, #1
 8007d28:	4543      	cmp	r3, r8
 8007d2a:	dc09      	bgt.n	8007d40 <_printf_float+0x254>
 8007d2c:	6823      	ldr	r3, [r4, #0]
 8007d2e:	079b      	lsls	r3, r3, #30
 8007d30:	f100 8103 	bmi.w	8007f3a <_printf_float+0x44e>
 8007d34:	68e0      	ldr	r0, [r4, #12]
 8007d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d38:	4298      	cmp	r0, r3
 8007d3a:	bfb8      	it	lt
 8007d3c:	4618      	movlt	r0, r3
 8007d3e:	e734      	b.n	8007baa <_printf_float+0xbe>
 8007d40:	2301      	movs	r3, #1
 8007d42:	464a      	mov	r2, r9
 8007d44:	4631      	mov	r1, r6
 8007d46:	4628      	mov	r0, r5
 8007d48:	47b8      	blx	r7
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	f43f af2b 	beq.w	8007ba6 <_printf_float+0xba>
 8007d50:	f108 0801 	add.w	r8, r8, #1
 8007d54:	e7e6      	b.n	8007d24 <_printf_float+0x238>
 8007d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	dc2b      	bgt.n	8007db4 <_printf_float+0x2c8>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	4a26      	ldr	r2, [pc, #152]	; (8007df8 <_printf_float+0x30c>)
 8007d60:	4631      	mov	r1, r6
 8007d62:	4628      	mov	r0, r5
 8007d64:	47b8      	blx	r7
 8007d66:	3001      	adds	r0, #1
 8007d68:	f43f af1d 	beq.w	8007ba6 <_printf_float+0xba>
 8007d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6e:	b923      	cbnz	r3, 8007d7a <_printf_float+0x28e>
 8007d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d72:	b913      	cbnz	r3, 8007d7a <_printf_float+0x28e>
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	07d9      	lsls	r1, r3, #31
 8007d78:	d5d8      	bpl.n	8007d2c <_printf_float+0x240>
 8007d7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4628      	mov	r0, r5
 8007d82:	47b8      	blx	r7
 8007d84:	3001      	adds	r0, #1
 8007d86:	f43f af0e 	beq.w	8007ba6 <_printf_float+0xba>
 8007d8a:	f04f 0900 	mov.w	r9, #0
 8007d8e:	f104 0a1a 	add.w	sl, r4, #26
 8007d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d94:	425b      	negs	r3, r3
 8007d96:	454b      	cmp	r3, r9
 8007d98:	dc01      	bgt.n	8007d9e <_printf_float+0x2b2>
 8007d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d9c:	e794      	b.n	8007cc8 <_printf_float+0x1dc>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	4652      	mov	r2, sl
 8007da2:	4631      	mov	r1, r6
 8007da4:	4628      	mov	r0, r5
 8007da6:	47b8      	blx	r7
 8007da8:	3001      	adds	r0, #1
 8007daa:	f43f aefc 	beq.w	8007ba6 <_printf_float+0xba>
 8007dae:	f109 0901 	add.w	r9, r9, #1
 8007db2:	e7ee      	b.n	8007d92 <_printf_float+0x2a6>
 8007db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007db6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007db8:	429a      	cmp	r2, r3
 8007dba:	bfa8      	it	ge
 8007dbc:	461a      	movge	r2, r3
 8007dbe:	2a00      	cmp	r2, #0
 8007dc0:	4691      	mov	r9, r2
 8007dc2:	dd07      	ble.n	8007dd4 <_printf_float+0x2e8>
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	4631      	mov	r1, r6
 8007dc8:	4642      	mov	r2, r8
 8007dca:	4628      	mov	r0, r5
 8007dcc:	47b8      	blx	r7
 8007dce:	3001      	adds	r0, #1
 8007dd0:	f43f aee9 	beq.w	8007ba6 <_printf_float+0xba>
 8007dd4:	f104 031a 	add.w	r3, r4, #26
 8007dd8:	f04f 0b00 	mov.w	fp, #0
 8007ddc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007de0:	9306      	str	r3, [sp, #24]
 8007de2:	e015      	b.n	8007e10 <_printf_float+0x324>
 8007de4:	7fefffff 	.word	0x7fefffff
 8007de8:	0800ac18 	.word	0x0800ac18
 8007dec:	0800ac14 	.word	0x0800ac14
 8007df0:	0800ac20 	.word	0x0800ac20
 8007df4:	0800ac1c 	.word	0x0800ac1c
 8007df8:	0800ac24 	.word	0x0800ac24
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	9a06      	ldr	r2, [sp, #24]
 8007e00:	4631      	mov	r1, r6
 8007e02:	4628      	mov	r0, r5
 8007e04:	47b8      	blx	r7
 8007e06:	3001      	adds	r0, #1
 8007e08:	f43f aecd 	beq.w	8007ba6 <_printf_float+0xba>
 8007e0c:	f10b 0b01 	add.w	fp, fp, #1
 8007e10:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007e14:	ebaa 0309 	sub.w	r3, sl, r9
 8007e18:	455b      	cmp	r3, fp
 8007e1a:	dcef      	bgt.n	8007dfc <_printf_float+0x310>
 8007e1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e20:	429a      	cmp	r2, r3
 8007e22:	44d0      	add	r8, sl
 8007e24:	db15      	blt.n	8007e52 <_printf_float+0x366>
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	07da      	lsls	r2, r3, #31
 8007e2a:	d412      	bmi.n	8007e52 <_printf_float+0x366>
 8007e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e30:	eba3 020a 	sub.w	r2, r3, sl
 8007e34:	eba3 0a01 	sub.w	sl, r3, r1
 8007e38:	4592      	cmp	sl, r2
 8007e3a:	bfa8      	it	ge
 8007e3c:	4692      	movge	sl, r2
 8007e3e:	f1ba 0f00 	cmp.w	sl, #0
 8007e42:	dc0e      	bgt.n	8007e62 <_printf_float+0x376>
 8007e44:	f04f 0800 	mov.w	r8, #0
 8007e48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e4c:	f104 091a 	add.w	r9, r4, #26
 8007e50:	e019      	b.n	8007e86 <_printf_float+0x39a>
 8007e52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e56:	4631      	mov	r1, r6
 8007e58:	4628      	mov	r0, r5
 8007e5a:	47b8      	blx	r7
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d1e5      	bne.n	8007e2c <_printf_float+0x340>
 8007e60:	e6a1      	b.n	8007ba6 <_printf_float+0xba>
 8007e62:	4653      	mov	r3, sl
 8007e64:	4642      	mov	r2, r8
 8007e66:	4631      	mov	r1, r6
 8007e68:	4628      	mov	r0, r5
 8007e6a:	47b8      	blx	r7
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d1e9      	bne.n	8007e44 <_printf_float+0x358>
 8007e70:	e699      	b.n	8007ba6 <_printf_float+0xba>
 8007e72:	2301      	movs	r3, #1
 8007e74:	464a      	mov	r2, r9
 8007e76:	4631      	mov	r1, r6
 8007e78:	4628      	mov	r0, r5
 8007e7a:	47b8      	blx	r7
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	f43f ae92 	beq.w	8007ba6 <_printf_float+0xba>
 8007e82:	f108 0801 	add.w	r8, r8, #1
 8007e86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e8a:	1a9b      	subs	r3, r3, r2
 8007e8c:	eba3 030a 	sub.w	r3, r3, sl
 8007e90:	4543      	cmp	r3, r8
 8007e92:	dcee      	bgt.n	8007e72 <_printf_float+0x386>
 8007e94:	e74a      	b.n	8007d2c <_printf_float+0x240>
 8007e96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e98:	2a01      	cmp	r2, #1
 8007e9a:	dc01      	bgt.n	8007ea0 <_printf_float+0x3b4>
 8007e9c:	07db      	lsls	r3, r3, #31
 8007e9e:	d53a      	bpl.n	8007f16 <_printf_float+0x42a>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	4642      	mov	r2, r8
 8007ea4:	4631      	mov	r1, r6
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	47b8      	blx	r7
 8007eaa:	3001      	adds	r0, #1
 8007eac:	f43f ae7b 	beq.w	8007ba6 <_printf_float+0xba>
 8007eb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	47b8      	blx	r7
 8007eba:	3001      	adds	r0, #1
 8007ebc:	f108 0801 	add.w	r8, r8, #1
 8007ec0:	f43f ae71 	beq.w	8007ba6 <_printf_float+0xba>
 8007ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f103 3aff 	add.w	sl, r3, #4294967295
 8007ecc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	f7f8 fda5 	bl	8000a20 <__aeabi_dcmpeq>
 8007ed6:	b9c8      	cbnz	r0, 8007f0c <_printf_float+0x420>
 8007ed8:	4653      	mov	r3, sl
 8007eda:	4642      	mov	r2, r8
 8007edc:	4631      	mov	r1, r6
 8007ede:	4628      	mov	r0, r5
 8007ee0:	47b8      	blx	r7
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	d10e      	bne.n	8007f04 <_printf_float+0x418>
 8007ee6:	e65e      	b.n	8007ba6 <_printf_float+0xba>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	4652      	mov	r2, sl
 8007eec:	4631      	mov	r1, r6
 8007eee:	4628      	mov	r0, r5
 8007ef0:	47b8      	blx	r7
 8007ef2:	3001      	adds	r0, #1
 8007ef4:	f43f ae57 	beq.w	8007ba6 <_printf_float+0xba>
 8007ef8:	f108 0801 	add.w	r8, r8, #1
 8007efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007efe:	3b01      	subs	r3, #1
 8007f00:	4543      	cmp	r3, r8
 8007f02:	dcf1      	bgt.n	8007ee8 <_printf_float+0x3fc>
 8007f04:	464b      	mov	r3, r9
 8007f06:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f0a:	e6de      	b.n	8007cca <_printf_float+0x1de>
 8007f0c:	f04f 0800 	mov.w	r8, #0
 8007f10:	f104 0a1a 	add.w	sl, r4, #26
 8007f14:	e7f2      	b.n	8007efc <_printf_float+0x410>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e7df      	b.n	8007eda <_printf_float+0x3ee>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	464a      	mov	r2, r9
 8007f1e:	4631      	mov	r1, r6
 8007f20:	4628      	mov	r0, r5
 8007f22:	47b8      	blx	r7
 8007f24:	3001      	adds	r0, #1
 8007f26:	f43f ae3e 	beq.w	8007ba6 <_printf_float+0xba>
 8007f2a:	f108 0801 	add.w	r8, r8, #1
 8007f2e:	68e3      	ldr	r3, [r4, #12]
 8007f30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f32:	1a9b      	subs	r3, r3, r2
 8007f34:	4543      	cmp	r3, r8
 8007f36:	dcf0      	bgt.n	8007f1a <_printf_float+0x42e>
 8007f38:	e6fc      	b.n	8007d34 <_printf_float+0x248>
 8007f3a:	f04f 0800 	mov.w	r8, #0
 8007f3e:	f104 0919 	add.w	r9, r4, #25
 8007f42:	e7f4      	b.n	8007f2e <_printf_float+0x442>
 8007f44:	2900      	cmp	r1, #0
 8007f46:	f43f ae8b 	beq.w	8007c60 <_printf_float+0x174>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007f50:	ab09      	add	r3, sp, #36	; 0x24
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	ec49 8b10 	vmov	d0, r8, r9
 8007f58:	6022      	str	r2, [r4, #0]
 8007f5a:	f8cd a004 	str.w	sl, [sp, #4]
 8007f5e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f62:	4628      	mov	r0, r5
 8007f64:	f7ff fd2d 	bl	80079c2 <__cvt>
 8007f68:	4680      	mov	r8, r0
 8007f6a:	e648      	b.n	8007bfe <_printf_float+0x112>

08007f6c <_printf_common>:
 8007f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f70:	4691      	mov	r9, r2
 8007f72:	461f      	mov	r7, r3
 8007f74:	688a      	ldr	r2, [r1, #8]
 8007f76:	690b      	ldr	r3, [r1, #16]
 8007f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	bfb8      	it	lt
 8007f80:	4613      	movlt	r3, r2
 8007f82:	f8c9 3000 	str.w	r3, [r9]
 8007f86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	b112      	cbz	r2, 8007f96 <_printf_common+0x2a>
 8007f90:	3301      	adds	r3, #1
 8007f92:	f8c9 3000 	str.w	r3, [r9]
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	0699      	lsls	r1, r3, #26
 8007f9a:	bf42      	ittt	mi
 8007f9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007fa0:	3302      	addmi	r3, #2
 8007fa2:	f8c9 3000 	strmi.w	r3, [r9]
 8007fa6:	6825      	ldr	r5, [r4, #0]
 8007fa8:	f015 0506 	ands.w	r5, r5, #6
 8007fac:	d107      	bne.n	8007fbe <_printf_common+0x52>
 8007fae:	f104 0a19 	add.w	sl, r4, #25
 8007fb2:	68e3      	ldr	r3, [r4, #12]
 8007fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8007fb8:	1a9b      	subs	r3, r3, r2
 8007fba:	42ab      	cmp	r3, r5
 8007fbc:	dc28      	bgt.n	8008010 <_printf_common+0xa4>
 8007fbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007fc2:	6822      	ldr	r2, [r4, #0]
 8007fc4:	3300      	adds	r3, #0
 8007fc6:	bf18      	it	ne
 8007fc8:	2301      	movne	r3, #1
 8007fca:	0692      	lsls	r2, r2, #26
 8007fcc:	d42d      	bmi.n	800802a <_printf_common+0xbe>
 8007fce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	47c0      	blx	r8
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d020      	beq.n	800801e <_printf_common+0xb2>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	68e5      	ldr	r5, [r4, #12]
 8007fe0:	f8d9 2000 	ldr.w	r2, [r9]
 8007fe4:	f003 0306 	and.w	r3, r3, #6
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	bf08      	it	eq
 8007fec:	1aad      	subeq	r5, r5, r2
 8007fee:	68a3      	ldr	r3, [r4, #8]
 8007ff0:	6922      	ldr	r2, [r4, #16]
 8007ff2:	bf0c      	ite	eq
 8007ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ff8:	2500      	movne	r5, #0
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	bfc4      	itt	gt
 8007ffe:	1a9b      	subgt	r3, r3, r2
 8008000:	18ed      	addgt	r5, r5, r3
 8008002:	f04f 0900 	mov.w	r9, #0
 8008006:	341a      	adds	r4, #26
 8008008:	454d      	cmp	r5, r9
 800800a:	d11a      	bne.n	8008042 <_printf_common+0xd6>
 800800c:	2000      	movs	r0, #0
 800800e:	e008      	b.n	8008022 <_printf_common+0xb6>
 8008010:	2301      	movs	r3, #1
 8008012:	4652      	mov	r2, sl
 8008014:	4639      	mov	r1, r7
 8008016:	4630      	mov	r0, r6
 8008018:	47c0      	blx	r8
 800801a:	3001      	adds	r0, #1
 800801c:	d103      	bne.n	8008026 <_printf_common+0xba>
 800801e:	f04f 30ff 	mov.w	r0, #4294967295
 8008022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008026:	3501      	adds	r5, #1
 8008028:	e7c3      	b.n	8007fb2 <_printf_common+0x46>
 800802a:	18e1      	adds	r1, r4, r3
 800802c:	1c5a      	adds	r2, r3, #1
 800802e:	2030      	movs	r0, #48	; 0x30
 8008030:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008034:	4422      	add	r2, r4
 8008036:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800803a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800803e:	3302      	adds	r3, #2
 8008040:	e7c5      	b.n	8007fce <_printf_common+0x62>
 8008042:	2301      	movs	r3, #1
 8008044:	4622      	mov	r2, r4
 8008046:	4639      	mov	r1, r7
 8008048:	4630      	mov	r0, r6
 800804a:	47c0      	blx	r8
 800804c:	3001      	adds	r0, #1
 800804e:	d0e6      	beq.n	800801e <_printf_common+0xb2>
 8008050:	f109 0901 	add.w	r9, r9, #1
 8008054:	e7d8      	b.n	8008008 <_printf_common+0x9c>
	...

08008058 <__utoa>:
 8008058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800805a:	4b1d      	ldr	r3, [pc, #116]	; (80080d0 <__utoa+0x78>)
 800805c:	b08b      	sub	sp, #44	; 0x2c
 800805e:	4605      	mov	r5, r0
 8008060:	460c      	mov	r4, r1
 8008062:	466e      	mov	r6, sp
 8008064:	f103 0c20 	add.w	ip, r3, #32
 8008068:	6818      	ldr	r0, [r3, #0]
 800806a:	6859      	ldr	r1, [r3, #4]
 800806c:	4637      	mov	r7, r6
 800806e:	c703      	stmia	r7!, {r0, r1}
 8008070:	3308      	adds	r3, #8
 8008072:	4563      	cmp	r3, ip
 8008074:	463e      	mov	r6, r7
 8008076:	d1f7      	bne.n	8008068 <__utoa+0x10>
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	791b      	ldrb	r3, [r3, #4]
 800807c:	713b      	strb	r3, [r7, #4]
 800807e:	1e93      	subs	r3, r2, #2
 8008080:	2b22      	cmp	r3, #34	; 0x22
 8008082:	6038      	str	r0, [r7, #0]
 8008084:	f04f 0300 	mov.w	r3, #0
 8008088:	d904      	bls.n	8008094 <__utoa+0x3c>
 800808a:	7023      	strb	r3, [r4, #0]
 800808c:	461c      	mov	r4, r3
 800808e:	4620      	mov	r0, r4
 8008090:	b00b      	add	sp, #44	; 0x2c
 8008092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008094:	1e66      	subs	r6, r4, #1
 8008096:	fbb5 f0f2 	udiv	r0, r5, r2
 800809a:	af0a      	add	r7, sp, #40	; 0x28
 800809c:	fb02 5510 	mls	r5, r2, r0, r5
 80080a0:	443d      	add	r5, r7
 80080a2:	1c59      	adds	r1, r3, #1
 80080a4:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80080a8:	f806 5f01 	strb.w	r5, [r6, #1]!
 80080ac:	4605      	mov	r5, r0
 80080ae:	b968      	cbnz	r0, 80080cc <__utoa+0x74>
 80080b0:	5460      	strb	r0, [r4, r1]
 80080b2:	4423      	add	r3, r4
 80080b4:	4622      	mov	r2, r4
 80080b6:	1b19      	subs	r1, r3, r4
 80080b8:	1b10      	subs	r0, r2, r4
 80080ba:	4281      	cmp	r1, r0
 80080bc:	dde7      	ble.n	800808e <__utoa+0x36>
 80080be:	7811      	ldrb	r1, [r2, #0]
 80080c0:	7818      	ldrb	r0, [r3, #0]
 80080c2:	f802 0b01 	strb.w	r0, [r2], #1
 80080c6:	f803 1901 	strb.w	r1, [r3], #-1
 80080ca:	e7f4      	b.n	80080b6 <__utoa+0x5e>
 80080cc:	460b      	mov	r3, r1
 80080ce:	e7e2      	b.n	8008096 <__utoa+0x3e>
 80080d0:	0800ac26 	.word	0x0800ac26

080080d4 <quorem>:
 80080d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d8:	6903      	ldr	r3, [r0, #16]
 80080da:	690c      	ldr	r4, [r1, #16]
 80080dc:	42a3      	cmp	r3, r4
 80080de:	4680      	mov	r8, r0
 80080e0:	f2c0 8082 	blt.w	80081e8 <quorem+0x114>
 80080e4:	3c01      	subs	r4, #1
 80080e6:	f101 0714 	add.w	r7, r1, #20
 80080ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80080ee:	f100 0614 	add.w	r6, r0, #20
 80080f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80080f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80080fa:	eb06 030c 	add.w	r3, r6, ip
 80080fe:	3501      	adds	r5, #1
 8008100:	eb07 090c 	add.w	r9, r7, ip
 8008104:	9301      	str	r3, [sp, #4]
 8008106:	fbb0 f5f5 	udiv	r5, r0, r5
 800810a:	b395      	cbz	r5, 8008172 <quorem+0x9e>
 800810c:	f04f 0a00 	mov.w	sl, #0
 8008110:	4638      	mov	r0, r7
 8008112:	46b6      	mov	lr, r6
 8008114:	46d3      	mov	fp, sl
 8008116:	f850 2b04 	ldr.w	r2, [r0], #4
 800811a:	b293      	uxth	r3, r2
 800811c:	fb05 a303 	mla	r3, r5, r3, sl
 8008120:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008124:	b29b      	uxth	r3, r3
 8008126:	ebab 0303 	sub.w	r3, fp, r3
 800812a:	0c12      	lsrs	r2, r2, #16
 800812c:	f8de b000 	ldr.w	fp, [lr]
 8008130:	fb05 a202 	mla	r2, r5, r2, sl
 8008134:	fa13 f38b 	uxtah	r3, r3, fp
 8008138:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800813c:	fa1f fb82 	uxth.w	fp, r2
 8008140:	f8de 2000 	ldr.w	r2, [lr]
 8008144:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008148:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800814c:	b29b      	uxth	r3, r3
 800814e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008152:	4581      	cmp	r9, r0
 8008154:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008158:	f84e 3b04 	str.w	r3, [lr], #4
 800815c:	d2db      	bcs.n	8008116 <quorem+0x42>
 800815e:	f856 300c 	ldr.w	r3, [r6, ip]
 8008162:	b933      	cbnz	r3, 8008172 <quorem+0x9e>
 8008164:	9b01      	ldr	r3, [sp, #4]
 8008166:	3b04      	subs	r3, #4
 8008168:	429e      	cmp	r6, r3
 800816a:	461a      	mov	r2, r3
 800816c:	d330      	bcc.n	80081d0 <quorem+0xfc>
 800816e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008172:	4640      	mov	r0, r8
 8008174:	f001 f95e 	bl	8009434 <__mcmp>
 8008178:	2800      	cmp	r0, #0
 800817a:	db25      	blt.n	80081c8 <quorem+0xf4>
 800817c:	3501      	adds	r5, #1
 800817e:	4630      	mov	r0, r6
 8008180:	f04f 0c00 	mov.w	ip, #0
 8008184:	f857 2b04 	ldr.w	r2, [r7], #4
 8008188:	f8d0 e000 	ldr.w	lr, [r0]
 800818c:	b293      	uxth	r3, r2
 800818e:	ebac 0303 	sub.w	r3, ip, r3
 8008192:	0c12      	lsrs	r2, r2, #16
 8008194:	fa13 f38e 	uxtah	r3, r3, lr
 8008198:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800819c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081a6:	45b9      	cmp	r9, r7
 80081a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081ac:	f840 3b04 	str.w	r3, [r0], #4
 80081b0:	d2e8      	bcs.n	8008184 <quorem+0xb0>
 80081b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80081b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80081ba:	b92a      	cbnz	r2, 80081c8 <quorem+0xf4>
 80081bc:	3b04      	subs	r3, #4
 80081be:	429e      	cmp	r6, r3
 80081c0:	461a      	mov	r2, r3
 80081c2:	d30b      	bcc.n	80081dc <quorem+0x108>
 80081c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80081c8:	4628      	mov	r0, r5
 80081ca:	b003      	add	sp, #12
 80081cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d0:	6812      	ldr	r2, [r2, #0]
 80081d2:	3b04      	subs	r3, #4
 80081d4:	2a00      	cmp	r2, #0
 80081d6:	d1ca      	bne.n	800816e <quorem+0x9a>
 80081d8:	3c01      	subs	r4, #1
 80081da:	e7c5      	b.n	8008168 <quorem+0x94>
 80081dc:	6812      	ldr	r2, [r2, #0]
 80081de:	3b04      	subs	r3, #4
 80081e0:	2a00      	cmp	r2, #0
 80081e2:	d1ef      	bne.n	80081c4 <quorem+0xf0>
 80081e4:	3c01      	subs	r4, #1
 80081e6:	e7ea      	b.n	80081be <quorem+0xea>
 80081e8:	2000      	movs	r0, #0
 80081ea:	e7ee      	b.n	80081ca <quorem+0xf6>
 80081ec:	0000      	movs	r0, r0
	...

080081f0 <_dtoa_r>:
 80081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	ec57 6b10 	vmov	r6, r7, d0
 80081f8:	b097      	sub	sp, #92	; 0x5c
 80081fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081fc:	9106      	str	r1, [sp, #24]
 80081fe:	4604      	mov	r4, r0
 8008200:	920b      	str	r2, [sp, #44]	; 0x2c
 8008202:	9312      	str	r3, [sp, #72]	; 0x48
 8008204:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008208:	e9cd 6700 	strd	r6, r7, [sp]
 800820c:	b93d      	cbnz	r5, 800821e <_dtoa_r+0x2e>
 800820e:	2010      	movs	r0, #16
 8008210:	f000 fef2 	bl	8008ff8 <malloc>
 8008214:	6260      	str	r0, [r4, #36]	; 0x24
 8008216:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800821a:	6005      	str	r5, [r0, #0]
 800821c:	60c5      	str	r5, [r0, #12]
 800821e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008220:	6819      	ldr	r1, [r3, #0]
 8008222:	b151      	cbz	r1, 800823a <_dtoa_r+0x4a>
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	604a      	str	r2, [r1, #4]
 8008228:	2301      	movs	r3, #1
 800822a:	4093      	lsls	r3, r2
 800822c:	608b      	str	r3, [r1, #8]
 800822e:	4620      	mov	r0, r4
 8008230:	f000 ff1e 	bl	8009070 <_Bfree>
 8008234:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	1e3b      	subs	r3, r7, #0
 800823c:	bfbb      	ittet	lt
 800823e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008242:	9301      	strlt	r3, [sp, #4]
 8008244:	2300      	movge	r3, #0
 8008246:	2201      	movlt	r2, #1
 8008248:	bfac      	ite	ge
 800824a:	f8c8 3000 	strge.w	r3, [r8]
 800824e:	f8c8 2000 	strlt.w	r2, [r8]
 8008252:	4baf      	ldr	r3, [pc, #700]	; (8008510 <_dtoa_r+0x320>)
 8008254:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008258:	ea33 0308 	bics.w	r3, r3, r8
 800825c:	d114      	bne.n	8008288 <_dtoa_r+0x98>
 800825e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008260:	f242 730f 	movw	r3, #9999	; 0x270f
 8008264:	6013      	str	r3, [r2, #0]
 8008266:	9b00      	ldr	r3, [sp, #0]
 8008268:	b923      	cbnz	r3, 8008274 <_dtoa_r+0x84>
 800826a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800826e:	2800      	cmp	r0, #0
 8008270:	f000 8542 	beq.w	8008cf8 <_dtoa_r+0xb08>
 8008274:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008276:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008524 <_dtoa_r+0x334>
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 8544 	beq.w	8008d08 <_dtoa_r+0xb18>
 8008280:	f10b 0303 	add.w	r3, fp, #3
 8008284:	f000 bd3e 	b.w	8008d04 <_dtoa_r+0xb14>
 8008288:	e9dd 6700 	ldrd	r6, r7, [sp]
 800828c:	2200      	movs	r2, #0
 800828e:	2300      	movs	r3, #0
 8008290:	4630      	mov	r0, r6
 8008292:	4639      	mov	r1, r7
 8008294:	f7f8 fbc4 	bl	8000a20 <__aeabi_dcmpeq>
 8008298:	4681      	mov	r9, r0
 800829a:	b168      	cbz	r0, 80082b8 <_dtoa_r+0xc8>
 800829c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800829e:	2301      	movs	r3, #1
 80082a0:	6013      	str	r3, [r2, #0]
 80082a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 8524 	beq.w	8008cf2 <_dtoa_r+0xb02>
 80082aa:	4b9a      	ldr	r3, [pc, #616]	; (8008514 <_dtoa_r+0x324>)
 80082ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	f000 bd28 	b.w	8008d08 <_dtoa_r+0xb18>
 80082b8:	aa14      	add	r2, sp, #80	; 0x50
 80082ba:	a915      	add	r1, sp, #84	; 0x54
 80082bc:	ec47 6b10 	vmov	d0, r6, r7
 80082c0:	4620      	mov	r0, r4
 80082c2:	f001 f92e 	bl	8009522 <__d2b>
 80082c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80082ca:	9004      	str	r0, [sp, #16]
 80082cc:	2d00      	cmp	r5, #0
 80082ce:	d07c      	beq.n	80083ca <_dtoa_r+0x1da>
 80082d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80082d8:	46b2      	mov	sl, r6
 80082da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80082de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80082e6:	2200      	movs	r2, #0
 80082e8:	4b8b      	ldr	r3, [pc, #556]	; (8008518 <_dtoa_r+0x328>)
 80082ea:	4650      	mov	r0, sl
 80082ec:	4659      	mov	r1, fp
 80082ee:	f7f7 ff77 	bl	80001e0 <__aeabi_dsub>
 80082f2:	a381      	add	r3, pc, #516	; (adr r3, 80084f8 <_dtoa_r+0x308>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f8 f92a 	bl	8000550 <__aeabi_dmul>
 80082fc:	a380      	add	r3, pc, #512	; (adr r3, 8008500 <_dtoa_r+0x310>)
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	f7f7 ff6f 	bl	80001e4 <__adddf3>
 8008306:	4606      	mov	r6, r0
 8008308:	4628      	mov	r0, r5
 800830a:	460f      	mov	r7, r1
 800830c:	f7f8 f8b6 	bl	800047c <__aeabi_i2d>
 8008310:	a37d      	add	r3, pc, #500	; (adr r3, 8008508 <_dtoa_r+0x318>)
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	f7f8 f91b 	bl	8000550 <__aeabi_dmul>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4630      	mov	r0, r6
 8008320:	4639      	mov	r1, r7
 8008322:	f7f7 ff5f 	bl	80001e4 <__adddf3>
 8008326:	4606      	mov	r6, r0
 8008328:	460f      	mov	r7, r1
 800832a:	f7f8 fbc1 	bl	8000ab0 <__aeabi_d2iz>
 800832e:	2200      	movs	r2, #0
 8008330:	4682      	mov	sl, r0
 8008332:	2300      	movs	r3, #0
 8008334:	4630      	mov	r0, r6
 8008336:	4639      	mov	r1, r7
 8008338:	f7f8 fb7c 	bl	8000a34 <__aeabi_dcmplt>
 800833c:	b148      	cbz	r0, 8008352 <_dtoa_r+0x162>
 800833e:	4650      	mov	r0, sl
 8008340:	f7f8 f89c 	bl	800047c <__aeabi_i2d>
 8008344:	4632      	mov	r2, r6
 8008346:	463b      	mov	r3, r7
 8008348:	f7f8 fb6a 	bl	8000a20 <__aeabi_dcmpeq>
 800834c:	b908      	cbnz	r0, 8008352 <_dtoa_r+0x162>
 800834e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008352:	f1ba 0f16 	cmp.w	sl, #22
 8008356:	d859      	bhi.n	800840c <_dtoa_r+0x21c>
 8008358:	4970      	ldr	r1, [pc, #448]	; (800851c <_dtoa_r+0x32c>)
 800835a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800835e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008362:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008366:	f7f8 fb83 	bl	8000a70 <__aeabi_dcmpgt>
 800836a:	2800      	cmp	r0, #0
 800836c:	d050      	beq.n	8008410 <_dtoa_r+0x220>
 800836e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008372:	2300      	movs	r3, #0
 8008374:	930f      	str	r3, [sp, #60]	; 0x3c
 8008376:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008378:	1b5d      	subs	r5, r3, r5
 800837a:	f1b5 0801 	subs.w	r8, r5, #1
 800837e:	bf49      	itett	mi
 8008380:	f1c5 0301 	rsbmi	r3, r5, #1
 8008384:	2300      	movpl	r3, #0
 8008386:	9305      	strmi	r3, [sp, #20]
 8008388:	f04f 0800 	movmi.w	r8, #0
 800838c:	bf58      	it	pl
 800838e:	9305      	strpl	r3, [sp, #20]
 8008390:	f1ba 0f00 	cmp.w	sl, #0
 8008394:	db3e      	blt.n	8008414 <_dtoa_r+0x224>
 8008396:	2300      	movs	r3, #0
 8008398:	44d0      	add	r8, sl
 800839a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800839e:	9307      	str	r3, [sp, #28]
 80083a0:	9b06      	ldr	r3, [sp, #24]
 80083a2:	2b09      	cmp	r3, #9
 80083a4:	f200 8090 	bhi.w	80084c8 <_dtoa_r+0x2d8>
 80083a8:	2b05      	cmp	r3, #5
 80083aa:	bfc4      	itt	gt
 80083ac:	3b04      	subgt	r3, #4
 80083ae:	9306      	strgt	r3, [sp, #24]
 80083b0:	9b06      	ldr	r3, [sp, #24]
 80083b2:	f1a3 0302 	sub.w	r3, r3, #2
 80083b6:	bfcc      	ite	gt
 80083b8:	2500      	movgt	r5, #0
 80083ba:	2501      	movle	r5, #1
 80083bc:	2b03      	cmp	r3, #3
 80083be:	f200 808f 	bhi.w	80084e0 <_dtoa_r+0x2f0>
 80083c2:	e8df f003 	tbb	[pc, r3]
 80083c6:	7f7d      	.short	0x7f7d
 80083c8:	7131      	.short	0x7131
 80083ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80083ce:	441d      	add	r5, r3
 80083d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80083d4:	2820      	cmp	r0, #32
 80083d6:	dd13      	ble.n	8008400 <_dtoa_r+0x210>
 80083d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80083dc:	9b00      	ldr	r3, [sp, #0]
 80083de:	fa08 f800 	lsl.w	r8, r8, r0
 80083e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80083e6:	fa23 f000 	lsr.w	r0, r3, r0
 80083ea:	ea48 0000 	orr.w	r0, r8, r0
 80083ee:	f7f8 f835 	bl	800045c <__aeabi_ui2d>
 80083f2:	2301      	movs	r3, #1
 80083f4:	4682      	mov	sl, r0
 80083f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80083fa:	3d01      	subs	r5, #1
 80083fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80083fe:	e772      	b.n	80082e6 <_dtoa_r+0xf6>
 8008400:	9b00      	ldr	r3, [sp, #0]
 8008402:	f1c0 0020 	rsb	r0, r0, #32
 8008406:	fa03 f000 	lsl.w	r0, r3, r0
 800840a:	e7f0      	b.n	80083ee <_dtoa_r+0x1fe>
 800840c:	2301      	movs	r3, #1
 800840e:	e7b1      	b.n	8008374 <_dtoa_r+0x184>
 8008410:	900f      	str	r0, [sp, #60]	; 0x3c
 8008412:	e7b0      	b.n	8008376 <_dtoa_r+0x186>
 8008414:	9b05      	ldr	r3, [sp, #20]
 8008416:	eba3 030a 	sub.w	r3, r3, sl
 800841a:	9305      	str	r3, [sp, #20]
 800841c:	f1ca 0300 	rsb	r3, sl, #0
 8008420:	9307      	str	r3, [sp, #28]
 8008422:	2300      	movs	r3, #0
 8008424:	930e      	str	r3, [sp, #56]	; 0x38
 8008426:	e7bb      	b.n	80083a0 <_dtoa_r+0x1b0>
 8008428:	2301      	movs	r3, #1
 800842a:	930a      	str	r3, [sp, #40]	; 0x28
 800842c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800842e:	2b00      	cmp	r3, #0
 8008430:	dd59      	ble.n	80084e6 <_dtoa_r+0x2f6>
 8008432:	9302      	str	r3, [sp, #8]
 8008434:	4699      	mov	r9, r3
 8008436:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008438:	2200      	movs	r2, #0
 800843a:	6072      	str	r2, [r6, #4]
 800843c:	2204      	movs	r2, #4
 800843e:	f102 0014 	add.w	r0, r2, #20
 8008442:	4298      	cmp	r0, r3
 8008444:	6871      	ldr	r1, [r6, #4]
 8008446:	d953      	bls.n	80084f0 <_dtoa_r+0x300>
 8008448:	4620      	mov	r0, r4
 800844a:	f000 fddd 	bl	8009008 <_Balloc>
 800844e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008450:	6030      	str	r0, [r6, #0]
 8008452:	f1b9 0f0e 	cmp.w	r9, #14
 8008456:	f8d3 b000 	ldr.w	fp, [r3]
 800845a:	f200 80e6 	bhi.w	800862a <_dtoa_r+0x43a>
 800845e:	2d00      	cmp	r5, #0
 8008460:	f000 80e3 	beq.w	800862a <_dtoa_r+0x43a>
 8008464:	ed9d 7b00 	vldr	d7, [sp]
 8008468:	f1ba 0f00 	cmp.w	sl, #0
 800846c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008470:	dd74      	ble.n	800855c <_dtoa_r+0x36c>
 8008472:	4a2a      	ldr	r2, [pc, #168]	; (800851c <_dtoa_r+0x32c>)
 8008474:	f00a 030f 	and.w	r3, sl, #15
 8008478:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800847c:	ed93 7b00 	vldr	d7, [r3]
 8008480:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008484:	06f0      	lsls	r0, r6, #27
 8008486:	ed8d 7b08 	vstr	d7, [sp, #32]
 800848a:	d565      	bpl.n	8008558 <_dtoa_r+0x368>
 800848c:	4b24      	ldr	r3, [pc, #144]	; (8008520 <_dtoa_r+0x330>)
 800848e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008492:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008496:	f7f8 f985 	bl	80007a4 <__aeabi_ddiv>
 800849a:	e9cd 0100 	strd	r0, r1, [sp]
 800849e:	f006 060f 	and.w	r6, r6, #15
 80084a2:	2503      	movs	r5, #3
 80084a4:	4f1e      	ldr	r7, [pc, #120]	; (8008520 <_dtoa_r+0x330>)
 80084a6:	e04c      	b.n	8008542 <_dtoa_r+0x352>
 80084a8:	2301      	movs	r3, #1
 80084aa:	930a      	str	r3, [sp, #40]	; 0x28
 80084ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ae:	4453      	add	r3, sl
 80084b0:	f103 0901 	add.w	r9, r3, #1
 80084b4:	9302      	str	r3, [sp, #8]
 80084b6:	464b      	mov	r3, r9
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	bfb8      	it	lt
 80084bc:	2301      	movlt	r3, #1
 80084be:	e7ba      	b.n	8008436 <_dtoa_r+0x246>
 80084c0:	2300      	movs	r3, #0
 80084c2:	e7b2      	b.n	800842a <_dtoa_r+0x23a>
 80084c4:	2300      	movs	r3, #0
 80084c6:	e7f0      	b.n	80084aa <_dtoa_r+0x2ba>
 80084c8:	2501      	movs	r5, #1
 80084ca:	2300      	movs	r3, #0
 80084cc:	9306      	str	r3, [sp, #24]
 80084ce:	950a      	str	r5, [sp, #40]	; 0x28
 80084d0:	f04f 33ff 	mov.w	r3, #4294967295
 80084d4:	9302      	str	r3, [sp, #8]
 80084d6:	4699      	mov	r9, r3
 80084d8:	2200      	movs	r2, #0
 80084da:	2312      	movs	r3, #18
 80084dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80084de:	e7aa      	b.n	8008436 <_dtoa_r+0x246>
 80084e0:	2301      	movs	r3, #1
 80084e2:	930a      	str	r3, [sp, #40]	; 0x28
 80084e4:	e7f4      	b.n	80084d0 <_dtoa_r+0x2e0>
 80084e6:	2301      	movs	r3, #1
 80084e8:	9302      	str	r3, [sp, #8]
 80084ea:	4699      	mov	r9, r3
 80084ec:	461a      	mov	r2, r3
 80084ee:	e7f5      	b.n	80084dc <_dtoa_r+0x2ec>
 80084f0:	3101      	adds	r1, #1
 80084f2:	6071      	str	r1, [r6, #4]
 80084f4:	0052      	lsls	r2, r2, #1
 80084f6:	e7a2      	b.n	800843e <_dtoa_r+0x24e>
 80084f8:	636f4361 	.word	0x636f4361
 80084fc:	3fd287a7 	.word	0x3fd287a7
 8008500:	8b60c8b3 	.word	0x8b60c8b3
 8008504:	3fc68a28 	.word	0x3fc68a28
 8008508:	509f79fb 	.word	0x509f79fb
 800850c:	3fd34413 	.word	0x3fd34413
 8008510:	7ff00000 	.word	0x7ff00000
 8008514:	0800ac25 	.word	0x0800ac25
 8008518:	3ff80000 	.word	0x3ff80000
 800851c:	0800ac80 	.word	0x0800ac80
 8008520:	0800ac58 	.word	0x0800ac58
 8008524:	0800ac54 	.word	0x0800ac54
 8008528:	07f1      	lsls	r1, r6, #31
 800852a:	d508      	bpl.n	800853e <_dtoa_r+0x34e>
 800852c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008530:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008534:	f7f8 f80c 	bl	8000550 <__aeabi_dmul>
 8008538:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800853c:	3501      	adds	r5, #1
 800853e:	1076      	asrs	r6, r6, #1
 8008540:	3708      	adds	r7, #8
 8008542:	2e00      	cmp	r6, #0
 8008544:	d1f0      	bne.n	8008528 <_dtoa_r+0x338>
 8008546:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800854a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800854e:	f7f8 f929 	bl	80007a4 <__aeabi_ddiv>
 8008552:	e9cd 0100 	strd	r0, r1, [sp]
 8008556:	e01a      	b.n	800858e <_dtoa_r+0x39e>
 8008558:	2502      	movs	r5, #2
 800855a:	e7a3      	b.n	80084a4 <_dtoa_r+0x2b4>
 800855c:	f000 80a0 	beq.w	80086a0 <_dtoa_r+0x4b0>
 8008560:	f1ca 0600 	rsb	r6, sl, #0
 8008564:	4b9f      	ldr	r3, [pc, #636]	; (80087e4 <_dtoa_r+0x5f4>)
 8008566:	4fa0      	ldr	r7, [pc, #640]	; (80087e8 <_dtoa_r+0x5f8>)
 8008568:	f006 020f 	and.w	r2, r6, #15
 800856c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008574:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008578:	f7f7 ffea 	bl	8000550 <__aeabi_dmul>
 800857c:	e9cd 0100 	strd	r0, r1, [sp]
 8008580:	1136      	asrs	r6, r6, #4
 8008582:	2300      	movs	r3, #0
 8008584:	2502      	movs	r5, #2
 8008586:	2e00      	cmp	r6, #0
 8008588:	d17f      	bne.n	800868a <_dtoa_r+0x49a>
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1e1      	bne.n	8008552 <_dtoa_r+0x362>
 800858e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 8087 	beq.w	80086a4 <_dtoa_r+0x4b4>
 8008596:	e9dd 6700 	ldrd	r6, r7, [sp]
 800859a:	2200      	movs	r2, #0
 800859c:	4b93      	ldr	r3, [pc, #588]	; (80087ec <_dtoa_r+0x5fc>)
 800859e:	4630      	mov	r0, r6
 80085a0:	4639      	mov	r1, r7
 80085a2:	f7f8 fa47 	bl	8000a34 <__aeabi_dcmplt>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d07c      	beq.n	80086a4 <_dtoa_r+0x4b4>
 80085aa:	f1b9 0f00 	cmp.w	r9, #0
 80085ae:	d079      	beq.n	80086a4 <_dtoa_r+0x4b4>
 80085b0:	9b02      	ldr	r3, [sp, #8]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	dd35      	ble.n	8008622 <_dtoa_r+0x432>
 80085b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80085ba:	9308      	str	r3, [sp, #32]
 80085bc:	4639      	mov	r1, r7
 80085be:	2200      	movs	r2, #0
 80085c0:	4b8b      	ldr	r3, [pc, #556]	; (80087f0 <_dtoa_r+0x600>)
 80085c2:	4630      	mov	r0, r6
 80085c4:	f7f7 ffc4 	bl	8000550 <__aeabi_dmul>
 80085c8:	e9cd 0100 	strd	r0, r1, [sp]
 80085cc:	9f02      	ldr	r7, [sp, #8]
 80085ce:	3501      	adds	r5, #1
 80085d0:	4628      	mov	r0, r5
 80085d2:	f7f7 ff53 	bl	800047c <__aeabi_i2d>
 80085d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085da:	f7f7 ffb9 	bl	8000550 <__aeabi_dmul>
 80085de:	2200      	movs	r2, #0
 80085e0:	4b84      	ldr	r3, [pc, #528]	; (80087f4 <_dtoa_r+0x604>)
 80085e2:	f7f7 fdff 	bl	80001e4 <__adddf3>
 80085e6:	4605      	mov	r5, r0
 80085e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80085ec:	2f00      	cmp	r7, #0
 80085ee:	d15d      	bne.n	80086ac <_dtoa_r+0x4bc>
 80085f0:	2200      	movs	r2, #0
 80085f2:	4b81      	ldr	r3, [pc, #516]	; (80087f8 <_dtoa_r+0x608>)
 80085f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085f8:	f7f7 fdf2 	bl	80001e0 <__aeabi_dsub>
 80085fc:	462a      	mov	r2, r5
 80085fe:	4633      	mov	r3, r6
 8008600:	e9cd 0100 	strd	r0, r1, [sp]
 8008604:	f7f8 fa34 	bl	8000a70 <__aeabi_dcmpgt>
 8008608:	2800      	cmp	r0, #0
 800860a:	f040 8288 	bne.w	8008b1e <_dtoa_r+0x92e>
 800860e:	462a      	mov	r2, r5
 8008610:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008614:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008618:	f7f8 fa0c 	bl	8000a34 <__aeabi_dcmplt>
 800861c:	2800      	cmp	r0, #0
 800861e:	f040 827c 	bne.w	8008b1a <_dtoa_r+0x92a>
 8008622:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008626:	e9cd 2300 	strd	r2, r3, [sp]
 800862a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800862c:	2b00      	cmp	r3, #0
 800862e:	f2c0 8150 	blt.w	80088d2 <_dtoa_r+0x6e2>
 8008632:	f1ba 0f0e 	cmp.w	sl, #14
 8008636:	f300 814c 	bgt.w	80088d2 <_dtoa_r+0x6e2>
 800863a:	4b6a      	ldr	r3, [pc, #424]	; (80087e4 <_dtoa_r+0x5f4>)
 800863c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008640:	ed93 7b00 	vldr	d7, [r3]
 8008644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008646:	2b00      	cmp	r3, #0
 8008648:	ed8d 7b02 	vstr	d7, [sp, #8]
 800864c:	f280 80d8 	bge.w	8008800 <_dtoa_r+0x610>
 8008650:	f1b9 0f00 	cmp.w	r9, #0
 8008654:	f300 80d4 	bgt.w	8008800 <_dtoa_r+0x610>
 8008658:	f040 825e 	bne.w	8008b18 <_dtoa_r+0x928>
 800865c:	2200      	movs	r2, #0
 800865e:	4b66      	ldr	r3, [pc, #408]	; (80087f8 <_dtoa_r+0x608>)
 8008660:	ec51 0b17 	vmov	r0, r1, d7
 8008664:	f7f7 ff74 	bl	8000550 <__aeabi_dmul>
 8008668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800866c:	f7f8 f9f6 	bl	8000a5c <__aeabi_dcmpge>
 8008670:	464f      	mov	r7, r9
 8008672:	464e      	mov	r6, r9
 8008674:	2800      	cmp	r0, #0
 8008676:	f040 8234 	bne.w	8008ae2 <_dtoa_r+0x8f2>
 800867a:	2331      	movs	r3, #49	; 0x31
 800867c:	f10b 0501 	add.w	r5, fp, #1
 8008680:	f88b 3000 	strb.w	r3, [fp]
 8008684:	f10a 0a01 	add.w	sl, sl, #1
 8008688:	e22f      	b.n	8008aea <_dtoa_r+0x8fa>
 800868a:	07f2      	lsls	r2, r6, #31
 800868c:	d505      	bpl.n	800869a <_dtoa_r+0x4aa>
 800868e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008692:	f7f7 ff5d 	bl	8000550 <__aeabi_dmul>
 8008696:	3501      	adds	r5, #1
 8008698:	2301      	movs	r3, #1
 800869a:	1076      	asrs	r6, r6, #1
 800869c:	3708      	adds	r7, #8
 800869e:	e772      	b.n	8008586 <_dtoa_r+0x396>
 80086a0:	2502      	movs	r5, #2
 80086a2:	e774      	b.n	800858e <_dtoa_r+0x39e>
 80086a4:	f8cd a020 	str.w	sl, [sp, #32]
 80086a8:	464f      	mov	r7, r9
 80086aa:	e791      	b.n	80085d0 <_dtoa_r+0x3e0>
 80086ac:	4b4d      	ldr	r3, [pc, #308]	; (80087e4 <_dtoa_r+0x5f4>)
 80086ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80086b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d047      	beq.n	800874c <_dtoa_r+0x55c>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	2000      	movs	r0, #0
 80086c2:	494e      	ldr	r1, [pc, #312]	; (80087fc <_dtoa_r+0x60c>)
 80086c4:	f7f8 f86e 	bl	80007a4 <__aeabi_ddiv>
 80086c8:	462a      	mov	r2, r5
 80086ca:	4633      	mov	r3, r6
 80086cc:	f7f7 fd88 	bl	80001e0 <__aeabi_dsub>
 80086d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80086d4:	465d      	mov	r5, fp
 80086d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086da:	f7f8 f9e9 	bl	8000ab0 <__aeabi_d2iz>
 80086de:	4606      	mov	r6, r0
 80086e0:	f7f7 fecc 	bl	800047c <__aeabi_i2d>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086ec:	f7f7 fd78 	bl	80001e0 <__aeabi_dsub>
 80086f0:	3630      	adds	r6, #48	; 0x30
 80086f2:	f805 6b01 	strb.w	r6, [r5], #1
 80086f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80086fa:	e9cd 0100 	strd	r0, r1, [sp]
 80086fe:	f7f8 f999 	bl	8000a34 <__aeabi_dcmplt>
 8008702:	2800      	cmp	r0, #0
 8008704:	d163      	bne.n	80087ce <_dtoa_r+0x5de>
 8008706:	e9dd 2300 	ldrd	r2, r3, [sp]
 800870a:	2000      	movs	r0, #0
 800870c:	4937      	ldr	r1, [pc, #220]	; (80087ec <_dtoa_r+0x5fc>)
 800870e:	f7f7 fd67 	bl	80001e0 <__aeabi_dsub>
 8008712:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008716:	f7f8 f98d 	bl	8000a34 <__aeabi_dcmplt>
 800871a:	2800      	cmp	r0, #0
 800871c:	f040 80b7 	bne.w	800888e <_dtoa_r+0x69e>
 8008720:	eba5 030b 	sub.w	r3, r5, fp
 8008724:	429f      	cmp	r7, r3
 8008726:	f77f af7c 	ble.w	8008622 <_dtoa_r+0x432>
 800872a:	2200      	movs	r2, #0
 800872c:	4b30      	ldr	r3, [pc, #192]	; (80087f0 <_dtoa_r+0x600>)
 800872e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008732:	f7f7 ff0d 	bl	8000550 <__aeabi_dmul>
 8008736:	2200      	movs	r2, #0
 8008738:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800873c:	4b2c      	ldr	r3, [pc, #176]	; (80087f0 <_dtoa_r+0x600>)
 800873e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008742:	f7f7 ff05 	bl	8000550 <__aeabi_dmul>
 8008746:	e9cd 0100 	strd	r0, r1, [sp]
 800874a:	e7c4      	b.n	80086d6 <_dtoa_r+0x4e6>
 800874c:	462a      	mov	r2, r5
 800874e:	4633      	mov	r3, r6
 8008750:	f7f7 fefe 	bl	8000550 <__aeabi_dmul>
 8008754:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008758:	eb0b 0507 	add.w	r5, fp, r7
 800875c:	465e      	mov	r6, fp
 800875e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008762:	f7f8 f9a5 	bl	8000ab0 <__aeabi_d2iz>
 8008766:	4607      	mov	r7, r0
 8008768:	f7f7 fe88 	bl	800047c <__aeabi_i2d>
 800876c:	3730      	adds	r7, #48	; 0x30
 800876e:	4602      	mov	r2, r0
 8008770:	460b      	mov	r3, r1
 8008772:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008776:	f7f7 fd33 	bl	80001e0 <__aeabi_dsub>
 800877a:	f806 7b01 	strb.w	r7, [r6], #1
 800877e:	42ae      	cmp	r6, r5
 8008780:	e9cd 0100 	strd	r0, r1, [sp]
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	d126      	bne.n	80087d8 <_dtoa_r+0x5e8>
 800878a:	4b1c      	ldr	r3, [pc, #112]	; (80087fc <_dtoa_r+0x60c>)
 800878c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008790:	f7f7 fd28 	bl	80001e4 <__adddf3>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	e9dd 0100 	ldrd	r0, r1, [sp]
 800879c:	f7f8 f968 	bl	8000a70 <__aeabi_dcmpgt>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d174      	bne.n	800888e <_dtoa_r+0x69e>
 80087a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80087a8:	2000      	movs	r0, #0
 80087aa:	4914      	ldr	r1, [pc, #80]	; (80087fc <_dtoa_r+0x60c>)
 80087ac:	f7f7 fd18 	bl	80001e0 <__aeabi_dsub>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087b8:	f7f8 f93c 	bl	8000a34 <__aeabi_dcmplt>
 80087bc:	2800      	cmp	r0, #0
 80087be:	f43f af30 	beq.w	8008622 <_dtoa_r+0x432>
 80087c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087c6:	2b30      	cmp	r3, #48	; 0x30
 80087c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80087cc:	d002      	beq.n	80087d4 <_dtoa_r+0x5e4>
 80087ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80087d2:	e04a      	b.n	800886a <_dtoa_r+0x67a>
 80087d4:	4615      	mov	r5, r2
 80087d6:	e7f4      	b.n	80087c2 <_dtoa_r+0x5d2>
 80087d8:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <_dtoa_r+0x600>)
 80087da:	f7f7 feb9 	bl	8000550 <__aeabi_dmul>
 80087de:	e9cd 0100 	strd	r0, r1, [sp]
 80087e2:	e7bc      	b.n	800875e <_dtoa_r+0x56e>
 80087e4:	0800ac80 	.word	0x0800ac80
 80087e8:	0800ac58 	.word	0x0800ac58
 80087ec:	3ff00000 	.word	0x3ff00000
 80087f0:	40240000 	.word	0x40240000
 80087f4:	401c0000 	.word	0x401c0000
 80087f8:	40140000 	.word	0x40140000
 80087fc:	3fe00000 	.word	0x3fe00000
 8008800:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008804:	465d      	mov	r5, fp
 8008806:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800880a:	4630      	mov	r0, r6
 800880c:	4639      	mov	r1, r7
 800880e:	f7f7 ffc9 	bl	80007a4 <__aeabi_ddiv>
 8008812:	f7f8 f94d 	bl	8000ab0 <__aeabi_d2iz>
 8008816:	4680      	mov	r8, r0
 8008818:	f7f7 fe30 	bl	800047c <__aeabi_i2d>
 800881c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008820:	f7f7 fe96 	bl	8000550 <__aeabi_dmul>
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	4630      	mov	r0, r6
 800882a:	4639      	mov	r1, r7
 800882c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008830:	f7f7 fcd6 	bl	80001e0 <__aeabi_dsub>
 8008834:	f805 6b01 	strb.w	r6, [r5], #1
 8008838:	eba5 060b 	sub.w	r6, r5, fp
 800883c:	45b1      	cmp	r9, r6
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	d139      	bne.n	80088b8 <_dtoa_r+0x6c8>
 8008844:	f7f7 fcce 	bl	80001e4 <__adddf3>
 8008848:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800884c:	4606      	mov	r6, r0
 800884e:	460f      	mov	r7, r1
 8008850:	f7f8 f90e 	bl	8000a70 <__aeabi_dcmpgt>
 8008854:	b9c8      	cbnz	r0, 800888a <_dtoa_r+0x69a>
 8008856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800885a:	4630      	mov	r0, r6
 800885c:	4639      	mov	r1, r7
 800885e:	f7f8 f8df 	bl	8000a20 <__aeabi_dcmpeq>
 8008862:	b110      	cbz	r0, 800886a <_dtoa_r+0x67a>
 8008864:	f018 0f01 	tst.w	r8, #1
 8008868:	d10f      	bne.n	800888a <_dtoa_r+0x69a>
 800886a:	9904      	ldr	r1, [sp, #16]
 800886c:	4620      	mov	r0, r4
 800886e:	f000 fbff 	bl	8009070 <_Bfree>
 8008872:	2300      	movs	r3, #0
 8008874:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008876:	702b      	strb	r3, [r5, #0]
 8008878:	f10a 0301 	add.w	r3, sl, #1
 800887c:	6013      	str	r3, [r2, #0]
 800887e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 8241 	beq.w	8008d08 <_dtoa_r+0xb18>
 8008886:	601d      	str	r5, [r3, #0]
 8008888:	e23e      	b.n	8008d08 <_dtoa_r+0xb18>
 800888a:	f8cd a020 	str.w	sl, [sp, #32]
 800888e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008892:	2a39      	cmp	r2, #57	; 0x39
 8008894:	f105 33ff 	add.w	r3, r5, #4294967295
 8008898:	d108      	bne.n	80088ac <_dtoa_r+0x6bc>
 800889a:	459b      	cmp	fp, r3
 800889c:	d10a      	bne.n	80088b4 <_dtoa_r+0x6c4>
 800889e:	9b08      	ldr	r3, [sp, #32]
 80088a0:	3301      	adds	r3, #1
 80088a2:	9308      	str	r3, [sp, #32]
 80088a4:	2330      	movs	r3, #48	; 0x30
 80088a6:	f88b 3000 	strb.w	r3, [fp]
 80088aa:	465b      	mov	r3, fp
 80088ac:	781a      	ldrb	r2, [r3, #0]
 80088ae:	3201      	adds	r2, #1
 80088b0:	701a      	strb	r2, [r3, #0]
 80088b2:	e78c      	b.n	80087ce <_dtoa_r+0x5de>
 80088b4:	461d      	mov	r5, r3
 80088b6:	e7ea      	b.n	800888e <_dtoa_r+0x69e>
 80088b8:	2200      	movs	r2, #0
 80088ba:	4b9b      	ldr	r3, [pc, #620]	; (8008b28 <_dtoa_r+0x938>)
 80088bc:	f7f7 fe48 	bl	8000550 <__aeabi_dmul>
 80088c0:	2200      	movs	r2, #0
 80088c2:	2300      	movs	r3, #0
 80088c4:	4606      	mov	r6, r0
 80088c6:	460f      	mov	r7, r1
 80088c8:	f7f8 f8aa 	bl	8000a20 <__aeabi_dcmpeq>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d09a      	beq.n	8008806 <_dtoa_r+0x616>
 80088d0:	e7cb      	b.n	800886a <_dtoa_r+0x67a>
 80088d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088d4:	2a00      	cmp	r2, #0
 80088d6:	f000 808b 	beq.w	80089f0 <_dtoa_r+0x800>
 80088da:	9a06      	ldr	r2, [sp, #24]
 80088dc:	2a01      	cmp	r2, #1
 80088de:	dc6e      	bgt.n	80089be <_dtoa_r+0x7ce>
 80088e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088e2:	2a00      	cmp	r2, #0
 80088e4:	d067      	beq.n	80089b6 <_dtoa_r+0x7c6>
 80088e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088ea:	9f07      	ldr	r7, [sp, #28]
 80088ec:	9d05      	ldr	r5, [sp, #20]
 80088ee:	9a05      	ldr	r2, [sp, #20]
 80088f0:	2101      	movs	r1, #1
 80088f2:	441a      	add	r2, r3
 80088f4:	4620      	mov	r0, r4
 80088f6:	9205      	str	r2, [sp, #20]
 80088f8:	4498      	add	r8, r3
 80088fa:	f000 fc59 	bl	80091b0 <__i2b>
 80088fe:	4606      	mov	r6, r0
 8008900:	2d00      	cmp	r5, #0
 8008902:	dd0c      	ble.n	800891e <_dtoa_r+0x72e>
 8008904:	f1b8 0f00 	cmp.w	r8, #0
 8008908:	dd09      	ble.n	800891e <_dtoa_r+0x72e>
 800890a:	4545      	cmp	r5, r8
 800890c:	9a05      	ldr	r2, [sp, #20]
 800890e:	462b      	mov	r3, r5
 8008910:	bfa8      	it	ge
 8008912:	4643      	movge	r3, r8
 8008914:	1ad2      	subs	r2, r2, r3
 8008916:	9205      	str	r2, [sp, #20]
 8008918:	1aed      	subs	r5, r5, r3
 800891a:	eba8 0803 	sub.w	r8, r8, r3
 800891e:	9b07      	ldr	r3, [sp, #28]
 8008920:	b1eb      	cbz	r3, 800895e <_dtoa_r+0x76e>
 8008922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008924:	2b00      	cmp	r3, #0
 8008926:	d067      	beq.n	80089f8 <_dtoa_r+0x808>
 8008928:	b18f      	cbz	r7, 800894e <_dtoa_r+0x75e>
 800892a:	4631      	mov	r1, r6
 800892c:	463a      	mov	r2, r7
 800892e:	4620      	mov	r0, r4
 8008930:	f000 fcde 	bl	80092f0 <__pow5mult>
 8008934:	9a04      	ldr	r2, [sp, #16]
 8008936:	4601      	mov	r1, r0
 8008938:	4606      	mov	r6, r0
 800893a:	4620      	mov	r0, r4
 800893c:	f000 fc41 	bl	80091c2 <__multiply>
 8008940:	9904      	ldr	r1, [sp, #16]
 8008942:	9008      	str	r0, [sp, #32]
 8008944:	4620      	mov	r0, r4
 8008946:	f000 fb93 	bl	8009070 <_Bfree>
 800894a:	9b08      	ldr	r3, [sp, #32]
 800894c:	9304      	str	r3, [sp, #16]
 800894e:	9b07      	ldr	r3, [sp, #28]
 8008950:	1bda      	subs	r2, r3, r7
 8008952:	d004      	beq.n	800895e <_dtoa_r+0x76e>
 8008954:	9904      	ldr	r1, [sp, #16]
 8008956:	4620      	mov	r0, r4
 8008958:	f000 fcca 	bl	80092f0 <__pow5mult>
 800895c:	9004      	str	r0, [sp, #16]
 800895e:	2101      	movs	r1, #1
 8008960:	4620      	mov	r0, r4
 8008962:	f000 fc25 	bl	80091b0 <__i2b>
 8008966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008968:	4607      	mov	r7, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 81d0 	beq.w	8008d10 <_dtoa_r+0xb20>
 8008970:	461a      	mov	r2, r3
 8008972:	4601      	mov	r1, r0
 8008974:	4620      	mov	r0, r4
 8008976:	f000 fcbb 	bl	80092f0 <__pow5mult>
 800897a:	9b06      	ldr	r3, [sp, #24]
 800897c:	2b01      	cmp	r3, #1
 800897e:	4607      	mov	r7, r0
 8008980:	dc40      	bgt.n	8008a04 <_dtoa_r+0x814>
 8008982:	9b00      	ldr	r3, [sp, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d139      	bne.n	80089fc <_dtoa_r+0x80c>
 8008988:	9b01      	ldr	r3, [sp, #4]
 800898a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800898e:	2b00      	cmp	r3, #0
 8008990:	d136      	bne.n	8008a00 <_dtoa_r+0x810>
 8008992:	9b01      	ldr	r3, [sp, #4]
 8008994:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008998:	0d1b      	lsrs	r3, r3, #20
 800899a:	051b      	lsls	r3, r3, #20
 800899c:	b12b      	cbz	r3, 80089aa <_dtoa_r+0x7ba>
 800899e:	9b05      	ldr	r3, [sp, #20]
 80089a0:	3301      	adds	r3, #1
 80089a2:	9305      	str	r3, [sp, #20]
 80089a4:	f108 0801 	add.w	r8, r8, #1
 80089a8:	2301      	movs	r3, #1
 80089aa:	9307      	str	r3, [sp, #28]
 80089ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d12a      	bne.n	8008a08 <_dtoa_r+0x818>
 80089b2:	2001      	movs	r0, #1
 80089b4:	e030      	b.n	8008a18 <_dtoa_r+0x828>
 80089b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089bc:	e795      	b.n	80088ea <_dtoa_r+0x6fa>
 80089be:	9b07      	ldr	r3, [sp, #28]
 80089c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80089c4:	42bb      	cmp	r3, r7
 80089c6:	bfbf      	itttt	lt
 80089c8:	9b07      	ldrlt	r3, [sp, #28]
 80089ca:	9707      	strlt	r7, [sp, #28]
 80089cc:	1afa      	sublt	r2, r7, r3
 80089ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80089d0:	bfbb      	ittet	lt
 80089d2:	189b      	addlt	r3, r3, r2
 80089d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80089d6:	1bdf      	subge	r7, r3, r7
 80089d8:	2700      	movlt	r7, #0
 80089da:	f1b9 0f00 	cmp.w	r9, #0
 80089de:	bfb5      	itete	lt
 80089e0:	9b05      	ldrlt	r3, [sp, #20]
 80089e2:	9d05      	ldrge	r5, [sp, #20]
 80089e4:	eba3 0509 	sublt.w	r5, r3, r9
 80089e8:	464b      	movge	r3, r9
 80089ea:	bfb8      	it	lt
 80089ec:	2300      	movlt	r3, #0
 80089ee:	e77e      	b.n	80088ee <_dtoa_r+0x6fe>
 80089f0:	9f07      	ldr	r7, [sp, #28]
 80089f2:	9d05      	ldr	r5, [sp, #20]
 80089f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80089f6:	e783      	b.n	8008900 <_dtoa_r+0x710>
 80089f8:	9a07      	ldr	r2, [sp, #28]
 80089fa:	e7ab      	b.n	8008954 <_dtoa_r+0x764>
 80089fc:	2300      	movs	r3, #0
 80089fe:	e7d4      	b.n	80089aa <_dtoa_r+0x7ba>
 8008a00:	9b00      	ldr	r3, [sp, #0]
 8008a02:	e7d2      	b.n	80089aa <_dtoa_r+0x7ba>
 8008a04:	2300      	movs	r3, #0
 8008a06:	9307      	str	r3, [sp, #28]
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008a0e:	6918      	ldr	r0, [r3, #16]
 8008a10:	f000 fb80 	bl	8009114 <__hi0bits>
 8008a14:	f1c0 0020 	rsb	r0, r0, #32
 8008a18:	4440      	add	r0, r8
 8008a1a:	f010 001f 	ands.w	r0, r0, #31
 8008a1e:	d047      	beq.n	8008ab0 <_dtoa_r+0x8c0>
 8008a20:	f1c0 0320 	rsb	r3, r0, #32
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	dd3b      	ble.n	8008aa0 <_dtoa_r+0x8b0>
 8008a28:	9b05      	ldr	r3, [sp, #20]
 8008a2a:	f1c0 001c 	rsb	r0, r0, #28
 8008a2e:	4403      	add	r3, r0
 8008a30:	9305      	str	r3, [sp, #20]
 8008a32:	4405      	add	r5, r0
 8008a34:	4480      	add	r8, r0
 8008a36:	9b05      	ldr	r3, [sp, #20]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	dd05      	ble.n	8008a48 <_dtoa_r+0x858>
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	9904      	ldr	r1, [sp, #16]
 8008a40:	4620      	mov	r0, r4
 8008a42:	f000 fca3 	bl	800938c <__lshift>
 8008a46:	9004      	str	r0, [sp, #16]
 8008a48:	f1b8 0f00 	cmp.w	r8, #0
 8008a4c:	dd05      	ble.n	8008a5a <_dtoa_r+0x86a>
 8008a4e:	4639      	mov	r1, r7
 8008a50:	4642      	mov	r2, r8
 8008a52:	4620      	mov	r0, r4
 8008a54:	f000 fc9a 	bl	800938c <__lshift>
 8008a58:	4607      	mov	r7, r0
 8008a5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a5c:	b353      	cbz	r3, 8008ab4 <_dtoa_r+0x8c4>
 8008a5e:	4639      	mov	r1, r7
 8008a60:	9804      	ldr	r0, [sp, #16]
 8008a62:	f000 fce7 	bl	8009434 <__mcmp>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	da24      	bge.n	8008ab4 <_dtoa_r+0x8c4>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	220a      	movs	r2, #10
 8008a6e:	9904      	ldr	r1, [sp, #16]
 8008a70:	4620      	mov	r0, r4
 8008a72:	f000 fb14 	bl	800909e <__multadd>
 8008a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a78:	9004      	str	r0, [sp, #16]
 8008a7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f000 814d 	beq.w	8008d1e <_dtoa_r+0xb2e>
 8008a84:	2300      	movs	r3, #0
 8008a86:	4631      	mov	r1, r6
 8008a88:	220a      	movs	r2, #10
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f000 fb07 	bl	800909e <__multadd>
 8008a90:	9b02      	ldr	r3, [sp, #8]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	4606      	mov	r6, r0
 8008a96:	dc4f      	bgt.n	8008b38 <_dtoa_r+0x948>
 8008a98:	9b06      	ldr	r3, [sp, #24]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	dd4c      	ble.n	8008b38 <_dtoa_r+0x948>
 8008a9e:	e011      	b.n	8008ac4 <_dtoa_r+0x8d4>
 8008aa0:	d0c9      	beq.n	8008a36 <_dtoa_r+0x846>
 8008aa2:	9a05      	ldr	r2, [sp, #20]
 8008aa4:	331c      	adds	r3, #28
 8008aa6:	441a      	add	r2, r3
 8008aa8:	9205      	str	r2, [sp, #20]
 8008aaa:	441d      	add	r5, r3
 8008aac:	4498      	add	r8, r3
 8008aae:	e7c2      	b.n	8008a36 <_dtoa_r+0x846>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	e7f6      	b.n	8008aa2 <_dtoa_r+0x8b2>
 8008ab4:	f1b9 0f00 	cmp.w	r9, #0
 8008ab8:	dc38      	bgt.n	8008b2c <_dtoa_r+0x93c>
 8008aba:	9b06      	ldr	r3, [sp, #24]
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	dd35      	ble.n	8008b2c <_dtoa_r+0x93c>
 8008ac0:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ac4:	9b02      	ldr	r3, [sp, #8]
 8008ac6:	b963      	cbnz	r3, 8008ae2 <_dtoa_r+0x8f2>
 8008ac8:	4639      	mov	r1, r7
 8008aca:	2205      	movs	r2, #5
 8008acc:	4620      	mov	r0, r4
 8008ace:	f000 fae6 	bl	800909e <__multadd>
 8008ad2:	4601      	mov	r1, r0
 8008ad4:	4607      	mov	r7, r0
 8008ad6:	9804      	ldr	r0, [sp, #16]
 8008ad8:	f000 fcac 	bl	8009434 <__mcmp>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	f73f adcc 	bgt.w	800867a <_dtoa_r+0x48a>
 8008ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ae4:	465d      	mov	r5, fp
 8008ae6:	ea6f 0a03 	mvn.w	sl, r3
 8008aea:	f04f 0900 	mov.w	r9, #0
 8008aee:	4639      	mov	r1, r7
 8008af0:	4620      	mov	r0, r4
 8008af2:	f000 fabd 	bl	8009070 <_Bfree>
 8008af6:	2e00      	cmp	r6, #0
 8008af8:	f43f aeb7 	beq.w	800886a <_dtoa_r+0x67a>
 8008afc:	f1b9 0f00 	cmp.w	r9, #0
 8008b00:	d005      	beq.n	8008b0e <_dtoa_r+0x91e>
 8008b02:	45b1      	cmp	r9, r6
 8008b04:	d003      	beq.n	8008b0e <_dtoa_r+0x91e>
 8008b06:	4649      	mov	r1, r9
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 fab1 	bl	8009070 <_Bfree>
 8008b0e:	4631      	mov	r1, r6
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 faad 	bl	8009070 <_Bfree>
 8008b16:	e6a8      	b.n	800886a <_dtoa_r+0x67a>
 8008b18:	2700      	movs	r7, #0
 8008b1a:	463e      	mov	r6, r7
 8008b1c:	e7e1      	b.n	8008ae2 <_dtoa_r+0x8f2>
 8008b1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008b22:	463e      	mov	r6, r7
 8008b24:	e5a9      	b.n	800867a <_dtoa_r+0x48a>
 8008b26:	bf00      	nop
 8008b28:	40240000 	.word	0x40240000
 8008b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 80fa 	beq.w	8008d2c <_dtoa_r+0xb3c>
 8008b38:	2d00      	cmp	r5, #0
 8008b3a:	dd05      	ble.n	8008b48 <_dtoa_r+0x958>
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	462a      	mov	r2, r5
 8008b40:	4620      	mov	r0, r4
 8008b42:	f000 fc23 	bl	800938c <__lshift>
 8008b46:	4606      	mov	r6, r0
 8008b48:	9b07      	ldr	r3, [sp, #28]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d04c      	beq.n	8008be8 <_dtoa_r+0x9f8>
 8008b4e:	6871      	ldr	r1, [r6, #4]
 8008b50:	4620      	mov	r0, r4
 8008b52:	f000 fa59 	bl	8009008 <_Balloc>
 8008b56:	6932      	ldr	r2, [r6, #16]
 8008b58:	3202      	adds	r2, #2
 8008b5a:	4605      	mov	r5, r0
 8008b5c:	0092      	lsls	r2, r2, #2
 8008b5e:	f106 010c 	add.w	r1, r6, #12
 8008b62:	300c      	adds	r0, #12
 8008b64:	f7fe ff1a 	bl	800799c <memcpy>
 8008b68:	2201      	movs	r2, #1
 8008b6a:	4629      	mov	r1, r5
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f000 fc0d 	bl	800938c <__lshift>
 8008b72:	9b00      	ldr	r3, [sp, #0]
 8008b74:	f8cd b014 	str.w	fp, [sp, #20]
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	46b1      	mov	r9, r6
 8008b7e:	9307      	str	r3, [sp, #28]
 8008b80:	4606      	mov	r6, r0
 8008b82:	4639      	mov	r1, r7
 8008b84:	9804      	ldr	r0, [sp, #16]
 8008b86:	f7ff faa5 	bl	80080d4 <quorem>
 8008b8a:	4649      	mov	r1, r9
 8008b8c:	4605      	mov	r5, r0
 8008b8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008b92:	9804      	ldr	r0, [sp, #16]
 8008b94:	f000 fc4e 	bl	8009434 <__mcmp>
 8008b98:	4632      	mov	r2, r6
 8008b9a:	9000      	str	r0, [sp, #0]
 8008b9c:	4639      	mov	r1, r7
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f000 fc62 	bl	8009468 <__mdiff>
 8008ba4:	68c3      	ldr	r3, [r0, #12]
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	bb03      	cbnz	r3, 8008bec <_dtoa_r+0x9fc>
 8008baa:	4601      	mov	r1, r0
 8008bac:	9008      	str	r0, [sp, #32]
 8008bae:	9804      	ldr	r0, [sp, #16]
 8008bb0:	f000 fc40 	bl	8009434 <__mcmp>
 8008bb4:	9a08      	ldr	r2, [sp, #32]
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	4611      	mov	r1, r2
 8008bba:	4620      	mov	r0, r4
 8008bbc:	9308      	str	r3, [sp, #32]
 8008bbe:	f000 fa57 	bl	8009070 <_Bfree>
 8008bc2:	9b08      	ldr	r3, [sp, #32]
 8008bc4:	b9a3      	cbnz	r3, 8008bf0 <_dtoa_r+0xa00>
 8008bc6:	9a06      	ldr	r2, [sp, #24]
 8008bc8:	b992      	cbnz	r2, 8008bf0 <_dtoa_r+0xa00>
 8008bca:	9a07      	ldr	r2, [sp, #28]
 8008bcc:	b982      	cbnz	r2, 8008bf0 <_dtoa_r+0xa00>
 8008bce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008bd2:	d029      	beq.n	8008c28 <_dtoa_r+0xa38>
 8008bd4:	9b00      	ldr	r3, [sp, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	dd01      	ble.n	8008bde <_dtoa_r+0x9ee>
 8008bda:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008bde:	9b05      	ldr	r3, [sp, #20]
 8008be0:	1c5d      	adds	r5, r3, #1
 8008be2:	f883 8000 	strb.w	r8, [r3]
 8008be6:	e782      	b.n	8008aee <_dtoa_r+0x8fe>
 8008be8:	4630      	mov	r0, r6
 8008bea:	e7c2      	b.n	8008b72 <_dtoa_r+0x982>
 8008bec:	2301      	movs	r3, #1
 8008bee:	e7e3      	b.n	8008bb8 <_dtoa_r+0x9c8>
 8008bf0:	9a00      	ldr	r2, [sp, #0]
 8008bf2:	2a00      	cmp	r2, #0
 8008bf4:	db04      	blt.n	8008c00 <_dtoa_r+0xa10>
 8008bf6:	d125      	bne.n	8008c44 <_dtoa_r+0xa54>
 8008bf8:	9a06      	ldr	r2, [sp, #24]
 8008bfa:	bb1a      	cbnz	r2, 8008c44 <_dtoa_r+0xa54>
 8008bfc:	9a07      	ldr	r2, [sp, #28]
 8008bfe:	bb0a      	cbnz	r2, 8008c44 <_dtoa_r+0xa54>
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	ddec      	ble.n	8008bde <_dtoa_r+0x9ee>
 8008c04:	2201      	movs	r2, #1
 8008c06:	9904      	ldr	r1, [sp, #16]
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f000 fbbf 	bl	800938c <__lshift>
 8008c0e:	4639      	mov	r1, r7
 8008c10:	9004      	str	r0, [sp, #16]
 8008c12:	f000 fc0f 	bl	8009434 <__mcmp>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	dc03      	bgt.n	8008c22 <_dtoa_r+0xa32>
 8008c1a:	d1e0      	bne.n	8008bde <_dtoa_r+0x9ee>
 8008c1c:	f018 0f01 	tst.w	r8, #1
 8008c20:	d0dd      	beq.n	8008bde <_dtoa_r+0x9ee>
 8008c22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c26:	d1d8      	bne.n	8008bda <_dtoa_r+0x9ea>
 8008c28:	9b05      	ldr	r3, [sp, #20]
 8008c2a:	9a05      	ldr	r2, [sp, #20]
 8008c2c:	1c5d      	adds	r5, r3, #1
 8008c2e:	2339      	movs	r3, #57	; 0x39
 8008c30:	7013      	strb	r3, [r2, #0]
 8008c32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c36:	2b39      	cmp	r3, #57	; 0x39
 8008c38:	f105 32ff 	add.w	r2, r5, #4294967295
 8008c3c:	d04f      	beq.n	8008cde <_dtoa_r+0xaee>
 8008c3e:	3301      	adds	r3, #1
 8008c40:	7013      	strb	r3, [r2, #0]
 8008c42:	e754      	b.n	8008aee <_dtoa_r+0x8fe>
 8008c44:	9a05      	ldr	r2, [sp, #20]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f102 0501 	add.w	r5, r2, #1
 8008c4c:	dd06      	ble.n	8008c5c <_dtoa_r+0xa6c>
 8008c4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008c52:	d0e9      	beq.n	8008c28 <_dtoa_r+0xa38>
 8008c54:	f108 0801 	add.w	r8, r8, #1
 8008c58:	9b05      	ldr	r3, [sp, #20]
 8008c5a:	e7c2      	b.n	8008be2 <_dtoa_r+0x9f2>
 8008c5c:	9a02      	ldr	r2, [sp, #8]
 8008c5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008c62:	eba5 030b 	sub.w	r3, r5, fp
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d021      	beq.n	8008cae <_dtoa_r+0xabe>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	220a      	movs	r2, #10
 8008c6e:	9904      	ldr	r1, [sp, #16]
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 fa14 	bl	800909e <__multadd>
 8008c76:	45b1      	cmp	r9, r6
 8008c78:	9004      	str	r0, [sp, #16]
 8008c7a:	f04f 0300 	mov.w	r3, #0
 8008c7e:	f04f 020a 	mov.w	r2, #10
 8008c82:	4649      	mov	r1, r9
 8008c84:	4620      	mov	r0, r4
 8008c86:	d105      	bne.n	8008c94 <_dtoa_r+0xaa4>
 8008c88:	f000 fa09 	bl	800909e <__multadd>
 8008c8c:	4681      	mov	r9, r0
 8008c8e:	4606      	mov	r6, r0
 8008c90:	9505      	str	r5, [sp, #20]
 8008c92:	e776      	b.n	8008b82 <_dtoa_r+0x992>
 8008c94:	f000 fa03 	bl	800909e <__multadd>
 8008c98:	4631      	mov	r1, r6
 8008c9a:	4681      	mov	r9, r0
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	220a      	movs	r2, #10
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f000 f9fc 	bl	800909e <__multadd>
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	e7f2      	b.n	8008c90 <_dtoa_r+0xaa0>
 8008caa:	f04f 0900 	mov.w	r9, #0
 8008cae:	2201      	movs	r2, #1
 8008cb0:	9904      	ldr	r1, [sp, #16]
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f000 fb6a 	bl	800938c <__lshift>
 8008cb8:	4639      	mov	r1, r7
 8008cba:	9004      	str	r0, [sp, #16]
 8008cbc:	f000 fbba 	bl	8009434 <__mcmp>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	dcb6      	bgt.n	8008c32 <_dtoa_r+0xa42>
 8008cc4:	d102      	bne.n	8008ccc <_dtoa_r+0xadc>
 8008cc6:	f018 0f01 	tst.w	r8, #1
 8008cca:	d1b2      	bne.n	8008c32 <_dtoa_r+0xa42>
 8008ccc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008cd0:	2b30      	cmp	r3, #48	; 0x30
 8008cd2:	f105 32ff 	add.w	r2, r5, #4294967295
 8008cd6:	f47f af0a 	bne.w	8008aee <_dtoa_r+0x8fe>
 8008cda:	4615      	mov	r5, r2
 8008cdc:	e7f6      	b.n	8008ccc <_dtoa_r+0xadc>
 8008cde:	4593      	cmp	fp, r2
 8008ce0:	d105      	bne.n	8008cee <_dtoa_r+0xafe>
 8008ce2:	2331      	movs	r3, #49	; 0x31
 8008ce4:	f10a 0a01 	add.w	sl, sl, #1
 8008ce8:	f88b 3000 	strb.w	r3, [fp]
 8008cec:	e6ff      	b.n	8008aee <_dtoa_r+0x8fe>
 8008cee:	4615      	mov	r5, r2
 8008cf0:	e79f      	b.n	8008c32 <_dtoa_r+0xa42>
 8008cf2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008d58 <_dtoa_r+0xb68>
 8008cf6:	e007      	b.n	8008d08 <_dtoa_r+0xb18>
 8008cf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cfa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008d5c <_dtoa_r+0xb6c>
 8008cfe:	b11b      	cbz	r3, 8008d08 <_dtoa_r+0xb18>
 8008d00:	f10b 0308 	add.w	r3, fp, #8
 8008d04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	4658      	mov	r0, fp
 8008d0a:	b017      	add	sp, #92	; 0x5c
 8008d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d10:	9b06      	ldr	r3, [sp, #24]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	f77f ae35 	ble.w	8008982 <_dtoa_r+0x792>
 8008d18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d1a:	9307      	str	r3, [sp, #28]
 8008d1c:	e649      	b.n	80089b2 <_dtoa_r+0x7c2>
 8008d1e:	9b02      	ldr	r3, [sp, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	dc03      	bgt.n	8008d2c <_dtoa_r+0xb3c>
 8008d24:	9b06      	ldr	r3, [sp, #24]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	f73f aecc 	bgt.w	8008ac4 <_dtoa_r+0x8d4>
 8008d2c:	465d      	mov	r5, fp
 8008d2e:	4639      	mov	r1, r7
 8008d30:	9804      	ldr	r0, [sp, #16]
 8008d32:	f7ff f9cf 	bl	80080d4 <quorem>
 8008d36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008d3a:	f805 8b01 	strb.w	r8, [r5], #1
 8008d3e:	9a02      	ldr	r2, [sp, #8]
 8008d40:	eba5 030b 	sub.w	r3, r5, fp
 8008d44:	429a      	cmp	r2, r3
 8008d46:	ddb0      	ble.n	8008caa <_dtoa_r+0xaba>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	220a      	movs	r2, #10
 8008d4c:	9904      	ldr	r1, [sp, #16]
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f000 f9a5 	bl	800909e <__multadd>
 8008d54:	9004      	str	r0, [sp, #16]
 8008d56:	e7ea      	b.n	8008d2e <_dtoa_r+0xb3e>
 8008d58:	0800ac24 	.word	0x0800ac24
 8008d5c:	0800ac4b 	.word	0x0800ac4b

08008d60 <print_e>:
 8008d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d62:	b087      	sub	sp, #28
 8008d64:	ec43 2b10 	vmov	d0, r2, r3
 8008d68:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008d6a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8008d6e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008d70:	ab04      	add	r3, sp, #16
 8008d72:	9301      	str	r3, [sp, #4]
 8008d74:	ab03      	add	r3, sp, #12
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	460f      	mov	r7, r1
 8008d7a:	ab05      	add	r3, sp, #20
 8008d7c:	2102      	movs	r1, #2
 8008d7e:	1c62      	adds	r2, r4, #1
 8008d80:	f7ff fa36 	bl	80081f0 <_dtoa_r>
 8008d84:	4601      	mov	r1, r0
 8008d86:	9805      	ldr	r0, [sp, #20]
 8008d88:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d8c:	4298      	cmp	r0, r3
 8008d8e:	d104      	bne.n	8008d9a <print_e+0x3a>
 8008d90:	4638      	mov	r0, r7
 8008d92:	f000 fcab 	bl	80096ec <strcpy>
 8008d96:	b007      	add	sp, #28
 8008d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d9a:	780b      	ldrb	r3, [r1, #0]
 8008d9c:	703b      	strb	r3, [r7, #0]
 8008d9e:	2d00      	cmp	r5, #0
 8008da0:	d143      	bne.n	8008e2a <print_e+0xca>
 8008da2:	2c00      	cmp	r4, #0
 8008da4:	d141      	bne.n	8008e2a <print_e+0xca>
 8008da6:	1c7b      	adds	r3, r7, #1
 8008da8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008dac:	b10a      	cbz	r2, 8008db2 <print_e+0x52>
 8008dae:	2c00      	cmp	r4, #0
 8008db0:	dc3f      	bgt.n	8008e32 <print_e+0xd2>
 8008db2:	2e67      	cmp	r6, #103	; 0x67
 8008db4:	d044      	beq.n	8008e40 <print_e+0xe0>
 8008db6:	2e47      	cmp	r6, #71	; 0x47
 8008db8:	d044      	beq.n	8008e44 <print_e+0xe4>
 8008dba:	461a      	mov	r2, r3
 8008dbc:	191d      	adds	r5, r3, r4
 8008dbe:	2730      	movs	r7, #48	; 0x30
 8008dc0:	1aa9      	subs	r1, r5, r2
 8008dc2:	2900      	cmp	r1, #0
 8008dc4:	dc39      	bgt.n	8008e3a <print_e+0xda>
 8008dc6:	2c00      	cmp	r4, #0
 8008dc8:	bfa8      	it	ge
 8008dca:	191b      	addge	r3, r3, r4
 8008dcc:	1e41      	subs	r1, r0, #1
 8008dce:	2900      	cmp	r1, #0
 8008dd0:	bfb8      	it	lt
 8008dd2:	f1c0 0001 	rsblt	r0, r0, #1
 8008dd6:	9105      	str	r1, [sp, #20]
 8008dd8:	bfb8      	it	lt
 8008dda:	9005      	strlt	r0, [sp, #20]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	9805      	ldr	r0, [sp, #20]
 8008de0:	f802 6b02 	strb.w	r6, [r2], #2
 8008de4:	bfb5      	itete	lt
 8008de6:	212d      	movlt	r1, #45	; 0x2d
 8008de8:	212b      	movge	r1, #43	; 0x2b
 8008dea:	7059      	strblt	r1, [r3, #1]
 8008dec:	7059      	strbge	r1, [r3, #1]
 8008dee:	2863      	cmp	r0, #99	; 0x63
 8008df0:	dd0b      	ble.n	8008e0a <print_e+0xaa>
 8008df2:	2164      	movs	r1, #100	; 0x64
 8008df4:	fb90 f1f1 	sdiv	r1, r0, r1
 8008df8:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8008dfc:	1cda      	adds	r2, r3, #3
 8008dfe:	709c      	strb	r4, [r3, #2]
 8008e00:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008e04:	fb03 0101 	mla	r1, r3, r1, r0
 8008e08:	9105      	str	r1, [sp, #20]
 8008e0a:	9905      	ldr	r1, [sp, #20]
 8008e0c:	230a      	movs	r3, #10
 8008e0e:	fb91 f3f3 	sdiv	r3, r1, r3
 8008e12:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008e16:	7010      	strb	r0, [r2, #0]
 8008e18:	f06f 0009 	mvn.w	r0, #9
 8008e1c:	fb00 1303 	mla	r3, r0, r3, r1
 8008e20:	3330      	adds	r3, #48	; 0x30
 8008e22:	7053      	strb	r3, [r2, #1]
 8008e24:	2300      	movs	r3, #0
 8008e26:	7093      	strb	r3, [r2, #2]
 8008e28:	e7b5      	b.n	8008d96 <print_e+0x36>
 8008e2a:	222e      	movs	r2, #46	; 0x2e
 8008e2c:	1cbb      	adds	r3, r7, #2
 8008e2e:	707a      	strb	r2, [r7, #1]
 8008e30:	e7ba      	b.n	8008da8 <print_e+0x48>
 8008e32:	f803 2b01 	strb.w	r2, [r3], #1
 8008e36:	3c01      	subs	r4, #1
 8008e38:	e7b6      	b.n	8008da8 <print_e+0x48>
 8008e3a:	f802 7b01 	strb.w	r7, [r2], #1
 8008e3e:	e7bf      	b.n	8008dc0 <print_e+0x60>
 8008e40:	2665      	movs	r6, #101	; 0x65
 8008e42:	e7c3      	b.n	8008dcc <print_e+0x6c>
 8008e44:	2645      	movs	r6, #69	; 0x45
 8008e46:	e7c1      	b.n	8008dcc <print_e+0x6c>

08008e48 <_gcvt>:
 8008e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e4c:	ec55 4b10 	vmov	r4, r5, d0
 8008e50:	b088      	sub	sp, #32
 8008e52:	4681      	mov	r9, r0
 8008e54:	460f      	mov	r7, r1
 8008e56:	4616      	mov	r6, r2
 8008e58:	469a      	mov	sl, r3
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	ee10 0a10 	vmov	r0, s0
 8008e62:	4629      	mov	r1, r5
 8008e64:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8008e68:	f7f7 fde4 	bl	8000a34 <__aeabi_dcmplt>
 8008e6c:	b110      	cbz	r0, 8008e74 <_gcvt+0x2c>
 8008e6e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008e72:	461d      	mov	r5, r3
 8008e74:	2200      	movs	r2, #0
 8008e76:	2300      	movs	r3, #0
 8008e78:	4620      	mov	r0, r4
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	f7f7 fdd0 	bl	8000a20 <__aeabi_dcmpeq>
 8008e80:	b138      	cbz	r0, 8008e92 <_gcvt+0x4a>
 8008e82:	2330      	movs	r3, #48	; 0x30
 8008e84:	7033      	strb	r3, [r6, #0]
 8008e86:	2300      	movs	r3, #0
 8008e88:	7073      	strb	r3, [r6, #1]
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	b008      	add	sp, #32
 8008e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e92:	a350      	add	r3, pc, #320	; (adr r3, 8008fd4 <_gcvt+0x18c>)
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	4620      	mov	r0, r4
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	f7f7 fdd4 	bl	8000a48 <__aeabi_dcmple>
 8008ea0:	b150      	cbz	r0, 8008eb8 <_gcvt+0x70>
 8008ea2:	3f01      	subs	r7, #1
 8008ea4:	e9cd a801 	strd	sl, r8, [sp, #4]
 8008ea8:	9700      	str	r7, [sp, #0]
 8008eaa:	4622      	mov	r2, r4
 8008eac:	462b      	mov	r3, r5
 8008eae:	4631      	mov	r1, r6
 8008eb0:	4648      	mov	r0, r9
 8008eb2:	f7ff ff55 	bl	8008d60 <print_e>
 8008eb6:	e7e8      	b.n	8008e8a <_gcvt+0x42>
 8008eb8:	4638      	mov	r0, r7
 8008eba:	f000 fb81 	bl	80095c0 <_mprec_log10>
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	462b      	mov	r3, r5
 8008ec2:	ec51 0b10 	vmov	r0, r1, d0
 8008ec6:	f7f7 fdbf 	bl	8000a48 <__aeabi_dcmple>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d1e9      	bne.n	8008ea2 <_gcvt+0x5a>
 8008ece:	2200      	movs	r2, #0
 8008ed0:	4b3f      	ldr	r3, [pc, #252]	; (8008fd0 <_gcvt+0x188>)
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	f7f7 fdad 	bl	8000a34 <__aeabi_dcmplt>
 8008eda:	aa07      	add	r2, sp, #28
 8008edc:	ab06      	add	r3, sp, #24
 8008ede:	e9cd 3200 	strd	r3, r2, [sp]
 8008ee2:	ab05      	add	r3, sp, #20
 8008ee4:	463a      	mov	r2, r7
 8008ee6:	b360      	cbz	r0, 8008f42 <_gcvt+0xfa>
 8008ee8:	2103      	movs	r1, #3
 8008eea:	ec45 4b10 	vmov	d0, r4, r5
 8008eee:	4648      	mov	r0, r9
 8008ef0:	f7ff f97e 	bl	80081f0 <_dtoa_r>
 8008ef4:	9a05      	ldr	r2, [sp, #20]
 8008ef6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d023      	beq.n	8008f46 <_gcvt+0xfe>
 8008efe:	4633      	mov	r3, r6
 8008f00:	4437      	add	r7, r6
 8008f02:	4601      	mov	r1, r0
 8008f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f08:	9d05      	ldr	r5, [sp, #20]
 8008f0a:	1afc      	subs	r4, r7, r3
 8008f0c:	b32a      	cbz	r2, 8008f5a <_gcvt+0x112>
 8008f0e:	2d00      	cmp	r5, #0
 8008f10:	dc1e      	bgt.n	8008f50 <_gcvt+0x108>
 8008f12:	f1b8 0f00 	cmp.w	r8, #0
 8008f16:	d102      	bne.n	8008f1e <_gcvt+0xd6>
 8008f18:	780a      	ldrb	r2, [r1, #0]
 8008f1a:	2a00      	cmp	r2, #0
 8008f1c:	d045      	beq.n	8008faa <_gcvt+0x162>
 8008f1e:	429e      	cmp	r6, r3
 8008f20:	bf02      	ittt	eq
 8008f22:	1c73      	addeq	r3, r6, #1
 8008f24:	2230      	moveq	r2, #48	; 0x30
 8008f26:	7032      	strbeq	r2, [r6, #0]
 8008f28:	222e      	movs	r2, #46	; 0x2e
 8008f2a:	701a      	strb	r2, [r3, #0]
 8008f2c:	9a05      	ldr	r2, [sp, #20]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	2000      	movs	r0, #0
 8008f32:	2730      	movs	r7, #48	; 0x30
 8008f34:	2a00      	cmp	r2, #0
 8008f36:	4615      	mov	r5, r2
 8008f38:	db24      	blt.n	8008f84 <_gcvt+0x13c>
 8008f3a:	b100      	cbz	r0, 8008f3e <_gcvt+0xf6>
 8008f3c:	9205      	str	r2, [sp, #20]
 8008f3e:	1e4a      	subs	r2, r1, #1
 8008f40:	e02b      	b.n	8008f9a <_gcvt+0x152>
 8008f42:	2102      	movs	r1, #2
 8008f44:	e7d1      	b.n	8008eea <_gcvt+0xa2>
 8008f46:	4601      	mov	r1, r0
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f000 fbcf 	bl	80096ec <strcpy>
 8008f4e:	e79c      	b.n	8008e8a <_gcvt+0x42>
 8008f50:	3d01      	subs	r5, #1
 8008f52:	f803 2b01 	strb.w	r2, [r3], #1
 8008f56:	9505      	str	r5, [sp, #20]
 8008f58:	e7d3      	b.n	8008f02 <_gcvt+0xba>
 8008f5a:	1b2d      	subs	r5, r5, r4
 8008f5c:	2730      	movs	r7, #48	; 0x30
 8008f5e:	e005      	b.n	8008f6c <_gcvt+0x124>
 8008f60:	2c00      	cmp	r4, #0
 8008f62:	dd06      	ble.n	8008f72 <_gcvt+0x12a>
 8008f64:	f803 7b01 	strb.w	r7, [r3], #1
 8008f68:	3c01      	subs	r4, #1
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	1928      	adds	r0, r5, r4
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	dcf6      	bgt.n	8008f60 <_gcvt+0x118>
 8008f72:	2a00      	cmp	r2, #0
 8008f74:	d0cd      	beq.n	8008f12 <_gcvt+0xca>
 8008f76:	9005      	str	r0, [sp, #20]
 8008f78:	e7cb      	b.n	8008f12 <_gcvt+0xca>
 8008f7a:	f803 7b01 	strb.w	r7, [r3], #1
 8008f7e:	3c01      	subs	r4, #1
 8008f80:	2001      	movs	r0, #1
 8008f82:	e7d7      	b.n	8008f34 <_gcvt+0xec>
 8008f84:	2c00      	cmp	r4, #0
 8008f86:	f102 0201 	add.w	r2, r2, #1
 8008f8a:	dcf6      	bgt.n	8008f7a <_gcvt+0x132>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d0d6      	beq.n	8008f3e <_gcvt+0xf6>
 8008f90:	9505      	str	r5, [sp, #20]
 8008f92:	e7d4      	b.n	8008f3e <_gcvt+0xf6>
 8008f94:	f803 1b01 	strb.w	r1, [r3], #1
 8008f98:	3c01      	subs	r4, #1
 8008f9a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008f9e:	b109      	cbz	r1, 8008fa4 <_gcvt+0x15c>
 8008fa0:	2c00      	cmp	r4, #0
 8008fa2:	dcf7      	bgt.n	8008f94 <_gcvt+0x14c>
 8008fa4:	f1b8 0f00 	cmp.w	r8, #0
 8008fa8:	d10b      	bne.n	8008fc2 <_gcvt+0x17a>
 8008faa:	2200      	movs	r2, #0
 8008fac:	701a      	strb	r2, [r3, #0]
 8008fae:	e76c      	b.n	8008e8a <_gcvt+0x42>
 8008fb0:	f802 5b01 	strb.w	r5, [r2], #1
 8008fb4:	1a81      	subs	r1, r0, r2
 8008fb6:	2900      	cmp	r1, #0
 8008fb8:	dcfa      	bgt.n	8008fb0 <_gcvt+0x168>
 8008fba:	2c00      	cmp	r4, #0
 8008fbc:	bfa8      	it	ge
 8008fbe:	191b      	addge	r3, r3, r4
 8008fc0:	e7f3      	b.n	8008faa <_gcvt+0x162>
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	1918      	adds	r0, r3, r4
 8008fc6:	2530      	movs	r5, #48	; 0x30
 8008fc8:	e7f4      	b.n	8008fb4 <_gcvt+0x16c>
 8008fca:	bf00      	nop
 8008fcc:	f3af 8000 	nop.w
 8008fd0:	3ff00000 	.word	0x3ff00000
 8008fd4:	eb1c432d 	.word	0xeb1c432d
 8008fd8:	3f1a36e2 	.word	0x3f1a36e2

08008fdc <_localeconv_r>:
 8008fdc:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <_localeconv_r+0x14>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6a18      	ldr	r0, [r3, #32]
 8008fe2:	4b04      	ldr	r3, [pc, #16]	; (8008ff4 <_localeconv_r+0x18>)
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	bf08      	it	eq
 8008fe8:	4618      	moveq	r0, r3
 8008fea:	30f0      	adds	r0, #240	; 0xf0
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	2000000c 	.word	0x2000000c
 8008ff4:	20000070 	.word	0x20000070

08008ff8 <malloc>:
 8008ff8:	4b02      	ldr	r3, [pc, #8]	; (8009004 <malloc+0xc>)
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	6818      	ldr	r0, [r3, #0]
 8008ffe:	f000 bb0b 	b.w	8009618 <_malloc_r>
 8009002:	bf00      	nop
 8009004:	2000000c 	.word	0x2000000c

08009008 <_Balloc>:
 8009008:	b570      	push	{r4, r5, r6, lr}
 800900a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800900c:	4604      	mov	r4, r0
 800900e:	460e      	mov	r6, r1
 8009010:	b93d      	cbnz	r5, 8009022 <_Balloc+0x1a>
 8009012:	2010      	movs	r0, #16
 8009014:	f7ff fff0 	bl	8008ff8 <malloc>
 8009018:	6260      	str	r0, [r4, #36]	; 0x24
 800901a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800901e:	6005      	str	r5, [r0, #0]
 8009020:	60c5      	str	r5, [r0, #12]
 8009022:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009024:	68eb      	ldr	r3, [r5, #12]
 8009026:	b183      	cbz	r3, 800904a <_Balloc+0x42>
 8009028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009030:	b9b8      	cbnz	r0, 8009062 <_Balloc+0x5a>
 8009032:	2101      	movs	r1, #1
 8009034:	fa01 f506 	lsl.w	r5, r1, r6
 8009038:	1d6a      	adds	r2, r5, #5
 800903a:	0092      	lsls	r2, r2, #2
 800903c:	4620      	mov	r0, r4
 800903e:	f000 fadd 	bl	80095fc <_calloc_r>
 8009042:	b160      	cbz	r0, 800905e <_Balloc+0x56>
 8009044:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009048:	e00e      	b.n	8009068 <_Balloc+0x60>
 800904a:	2221      	movs	r2, #33	; 0x21
 800904c:	2104      	movs	r1, #4
 800904e:	4620      	mov	r0, r4
 8009050:	f000 fad4 	bl	80095fc <_calloc_r>
 8009054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009056:	60e8      	str	r0, [r5, #12]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e4      	bne.n	8009028 <_Balloc+0x20>
 800905e:	2000      	movs	r0, #0
 8009060:	bd70      	pop	{r4, r5, r6, pc}
 8009062:	6802      	ldr	r2, [r0, #0]
 8009064:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009068:	2300      	movs	r3, #0
 800906a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800906e:	e7f7      	b.n	8009060 <_Balloc+0x58>

08009070 <_Bfree>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009074:	4606      	mov	r6, r0
 8009076:	460d      	mov	r5, r1
 8009078:	b93c      	cbnz	r4, 800908a <_Bfree+0x1a>
 800907a:	2010      	movs	r0, #16
 800907c:	f7ff ffbc 	bl	8008ff8 <malloc>
 8009080:	6270      	str	r0, [r6, #36]	; 0x24
 8009082:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009086:	6004      	str	r4, [r0, #0]
 8009088:	60c4      	str	r4, [r0, #12]
 800908a:	b13d      	cbz	r5, 800909c <_Bfree+0x2c>
 800908c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800908e:	686a      	ldr	r2, [r5, #4]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009096:	6029      	str	r1, [r5, #0]
 8009098:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800909c:	bd70      	pop	{r4, r5, r6, pc}

0800909e <__multadd>:
 800909e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a2:	690d      	ldr	r5, [r1, #16]
 80090a4:	461f      	mov	r7, r3
 80090a6:	4606      	mov	r6, r0
 80090a8:	460c      	mov	r4, r1
 80090aa:	f101 0c14 	add.w	ip, r1, #20
 80090ae:	2300      	movs	r3, #0
 80090b0:	f8dc 0000 	ldr.w	r0, [ip]
 80090b4:	b281      	uxth	r1, r0
 80090b6:	fb02 7101 	mla	r1, r2, r1, r7
 80090ba:	0c0f      	lsrs	r7, r1, #16
 80090bc:	0c00      	lsrs	r0, r0, #16
 80090be:	fb02 7000 	mla	r0, r2, r0, r7
 80090c2:	b289      	uxth	r1, r1
 80090c4:	3301      	adds	r3, #1
 80090c6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80090ca:	429d      	cmp	r5, r3
 80090cc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80090d0:	f84c 1b04 	str.w	r1, [ip], #4
 80090d4:	dcec      	bgt.n	80090b0 <__multadd+0x12>
 80090d6:	b1d7      	cbz	r7, 800910e <__multadd+0x70>
 80090d8:	68a3      	ldr	r3, [r4, #8]
 80090da:	42ab      	cmp	r3, r5
 80090dc:	dc12      	bgt.n	8009104 <__multadd+0x66>
 80090de:	6861      	ldr	r1, [r4, #4]
 80090e0:	4630      	mov	r0, r6
 80090e2:	3101      	adds	r1, #1
 80090e4:	f7ff ff90 	bl	8009008 <_Balloc>
 80090e8:	6922      	ldr	r2, [r4, #16]
 80090ea:	3202      	adds	r2, #2
 80090ec:	f104 010c 	add.w	r1, r4, #12
 80090f0:	4680      	mov	r8, r0
 80090f2:	0092      	lsls	r2, r2, #2
 80090f4:	300c      	adds	r0, #12
 80090f6:	f7fe fc51 	bl	800799c <memcpy>
 80090fa:	4621      	mov	r1, r4
 80090fc:	4630      	mov	r0, r6
 80090fe:	f7ff ffb7 	bl	8009070 <_Bfree>
 8009102:	4644      	mov	r4, r8
 8009104:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009108:	3501      	adds	r5, #1
 800910a:	615f      	str	r7, [r3, #20]
 800910c:	6125      	str	r5, [r4, #16]
 800910e:	4620      	mov	r0, r4
 8009110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009114 <__hi0bits>:
 8009114:	0c02      	lsrs	r2, r0, #16
 8009116:	0412      	lsls	r2, r2, #16
 8009118:	4603      	mov	r3, r0
 800911a:	b9b2      	cbnz	r2, 800914a <__hi0bits+0x36>
 800911c:	0403      	lsls	r3, r0, #16
 800911e:	2010      	movs	r0, #16
 8009120:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009124:	bf04      	itt	eq
 8009126:	021b      	lsleq	r3, r3, #8
 8009128:	3008      	addeq	r0, #8
 800912a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800912e:	bf04      	itt	eq
 8009130:	011b      	lsleq	r3, r3, #4
 8009132:	3004      	addeq	r0, #4
 8009134:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009138:	bf04      	itt	eq
 800913a:	009b      	lsleq	r3, r3, #2
 800913c:	3002      	addeq	r0, #2
 800913e:	2b00      	cmp	r3, #0
 8009140:	db06      	blt.n	8009150 <__hi0bits+0x3c>
 8009142:	005b      	lsls	r3, r3, #1
 8009144:	d503      	bpl.n	800914e <__hi0bits+0x3a>
 8009146:	3001      	adds	r0, #1
 8009148:	4770      	bx	lr
 800914a:	2000      	movs	r0, #0
 800914c:	e7e8      	b.n	8009120 <__hi0bits+0xc>
 800914e:	2020      	movs	r0, #32
 8009150:	4770      	bx	lr

08009152 <__lo0bits>:
 8009152:	6803      	ldr	r3, [r0, #0]
 8009154:	f013 0207 	ands.w	r2, r3, #7
 8009158:	4601      	mov	r1, r0
 800915a:	d00b      	beq.n	8009174 <__lo0bits+0x22>
 800915c:	07da      	lsls	r2, r3, #31
 800915e:	d423      	bmi.n	80091a8 <__lo0bits+0x56>
 8009160:	0798      	lsls	r0, r3, #30
 8009162:	bf49      	itett	mi
 8009164:	085b      	lsrmi	r3, r3, #1
 8009166:	089b      	lsrpl	r3, r3, #2
 8009168:	2001      	movmi	r0, #1
 800916a:	600b      	strmi	r3, [r1, #0]
 800916c:	bf5c      	itt	pl
 800916e:	600b      	strpl	r3, [r1, #0]
 8009170:	2002      	movpl	r0, #2
 8009172:	4770      	bx	lr
 8009174:	b298      	uxth	r0, r3
 8009176:	b9a8      	cbnz	r0, 80091a4 <__lo0bits+0x52>
 8009178:	0c1b      	lsrs	r3, r3, #16
 800917a:	2010      	movs	r0, #16
 800917c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009180:	bf04      	itt	eq
 8009182:	0a1b      	lsreq	r3, r3, #8
 8009184:	3008      	addeq	r0, #8
 8009186:	071a      	lsls	r2, r3, #28
 8009188:	bf04      	itt	eq
 800918a:	091b      	lsreq	r3, r3, #4
 800918c:	3004      	addeq	r0, #4
 800918e:	079a      	lsls	r2, r3, #30
 8009190:	bf04      	itt	eq
 8009192:	089b      	lsreq	r3, r3, #2
 8009194:	3002      	addeq	r0, #2
 8009196:	07da      	lsls	r2, r3, #31
 8009198:	d402      	bmi.n	80091a0 <__lo0bits+0x4e>
 800919a:	085b      	lsrs	r3, r3, #1
 800919c:	d006      	beq.n	80091ac <__lo0bits+0x5a>
 800919e:	3001      	adds	r0, #1
 80091a0:	600b      	str	r3, [r1, #0]
 80091a2:	4770      	bx	lr
 80091a4:	4610      	mov	r0, r2
 80091a6:	e7e9      	b.n	800917c <__lo0bits+0x2a>
 80091a8:	2000      	movs	r0, #0
 80091aa:	4770      	bx	lr
 80091ac:	2020      	movs	r0, #32
 80091ae:	4770      	bx	lr

080091b0 <__i2b>:
 80091b0:	b510      	push	{r4, lr}
 80091b2:	460c      	mov	r4, r1
 80091b4:	2101      	movs	r1, #1
 80091b6:	f7ff ff27 	bl	8009008 <_Balloc>
 80091ba:	2201      	movs	r2, #1
 80091bc:	6144      	str	r4, [r0, #20]
 80091be:	6102      	str	r2, [r0, #16]
 80091c0:	bd10      	pop	{r4, pc}

080091c2 <__multiply>:
 80091c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c6:	4614      	mov	r4, r2
 80091c8:	690a      	ldr	r2, [r1, #16]
 80091ca:	6923      	ldr	r3, [r4, #16]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	bfb8      	it	lt
 80091d0:	460b      	movlt	r3, r1
 80091d2:	4688      	mov	r8, r1
 80091d4:	bfbc      	itt	lt
 80091d6:	46a0      	movlt	r8, r4
 80091d8:	461c      	movlt	r4, r3
 80091da:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80091de:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80091e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091e6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80091ea:	eb07 0609 	add.w	r6, r7, r9
 80091ee:	42b3      	cmp	r3, r6
 80091f0:	bfb8      	it	lt
 80091f2:	3101      	addlt	r1, #1
 80091f4:	f7ff ff08 	bl	8009008 <_Balloc>
 80091f8:	f100 0514 	add.w	r5, r0, #20
 80091fc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009200:	462b      	mov	r3, r5
 8009202:	2200      	movs	r2, #0
 8009204:	4573      	cmp	r3, lr
 8009206:	d316      	bcc.n	8009236 <__multiply+0x74>
 8009208:	f104 0214 	add.w	r2, r4, #20
 800920c:	f108 0114 	add.w	r1, r8, #20
 8009210:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009214:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	9b00      	ldr	r3, [sp, #0]
 800921c:	9201      	str	r2, [sp, #4]
 800921e:	4293      	cmp	r3, r2
 8009220:	d80c      	bhi.n	800923c <__multiply+0x7a>
 8009222:	2e00      	cmp	r6, #0
 8009224:	dd03      	ble.n	800922e <__multiply+0x6c>
 8009226:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800922a:	2b00      	cmp	r3, #0
 800922c:	d05d      	beq.n	80092ea <__multiply+0x128>
 800922e:	6106      	str	r6, [r0, #16]
 8009230:	b003      	add	sp, #12
 8009232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009236:	f843 2b04 	str.w	r2, [r3], #4
 800923a:	e7e3      	b.n	8009204 <__multiply+0x42>
 800923c:	f8b2 b000 	ldrh.w	fp, [r2]
 8009240:	f1bb 0f00 	cmp.w	fp, #0
 8009244:	d023      	beq.n	800928e <__multiply+0xcc>
 8009246:	4689      	mov	r9, r1
 8009248:	46ac      	mov	ip, r5
 800924a:	f04f 0800 	mov.w	r8, #0
 800924e:	f859 4b04 	ldr.w	r4, [r9], #4
 8009252:	f8dc a000 	ldr.w	sl, [ip]
 8009256:	b2a3      	uxth	r3, r4
 8009258:	fa1f fa8a 	uxth.w	sl, sl
 800925c:	fb0b a303 	mla	r3, fp, r3, sl
 8009260:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009264:	f8dc 4000 	ldr.w	r4, [ip]
 8009268:	4443      	add	r3, r8
 800926a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800926e:	fb0b 840a 	mla	r4, fp, sl, r8
 8009272:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009276:	46e2      	mov	sl, ip
 8009278:	b29b      	uxth	r3, r3
 800927a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800927e:	454f      	cmp	r7, r9
 8009280:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009284:	f84a 3b04 	str.w	r3, [sl], #4
 8009288:	d82b      	bhi.n	80092e2 <__multiply+0x120>
 800928a:	f8cc 8004 	str.w	r8, [ip, #4]
 800928e:	9b01      	ldr	r3, [sp, #4]
 8009290:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009294:	3204      	adds	r2, #4
 8009296:	f1ba 0f00 	cmp.w	sl, #0
 800929a:	d020      	beq.n	80092de <__multiply+0x11c>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	4689      	mov	r9, r1
 80092a0:	46a8      	mov	r8, r5
 80092a2:	f04f 0b00 	mov.w	fp, #0
 80092a6:	f8b9 c000 	ldrh.w	ip, [r9]
 80092aa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80092ae:	fb0a 440c 	mla	r4, sl, ip, r4
 80092b2:	445c      	add	r4, fp
 80092b4:	46c4      	mov	ip, r8
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80092bc:	f84c 3b04 	str.w	r3, [ip], #4
 80092c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80092c4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80092c8:	0c1b      	lsrs	r3, r3, #16
 80092ca:	fb0a b303 	mla	r3, sl, r3, fp
 80092ce:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80092d2:	454f      	cmp	r7, r9
 80092d4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80092d8:	d805      	bhi.n	80092e6 <__multiply+0x124>
 80092da:	f8c8 3004 	str.w	r3, [r8, #4]
 80092de:	3504      	adds	r5, #4
 80092e0:	e79b      	b.n	800921a <__multiply+0x58>
 80092e2:	46d4      	mov	ip, sl
 80092e4:	e7b3      	b.n	800924e <__multiply+0x8c>
 80092e6:	46e0      	mov	r8, ip
 80092e8:	e7dd      	b.n	80092a6 <__multiply+0xe4>
 80092ea:	3e01      	subs	r6, #1
 80092ec:	e799      	b.n	8009222 <__multiply+0x60>
	...

080092f0 <__pow5mult>:
 80092f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f4:	4615      	mov	r5, r2
 80092f6:	f012 0203 	ands.w	r2, r2, #3
 80092fa:	4606      	mov	r6, r0
 80092fc:	460f      	mov	r7, r1
 80092fe:	d007      	beq.n	8009310 <__pow5mult+0x20>
 8009300:	3a01      	subs	r2, #1
 8009302:	4c21      	ldr	r4, [pc, #132]	; (8009388 <__pow5mult+0x98>)
 8009304:	2300      	movs	r3, #0
 8009306:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800930a:	f7ff fec8 	bl	800909e <__multadd>
 800930e:	4607      	mov	r7, r0
 8009310:	10ad      	asrs	r5, r5, #2
 8009312:	d035      	beq.n	8009380 <__pow5mult+0x90>
 8009314:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009316:	b93c      	cbnz	r4, 8009328 <__pow5mult+0x38>
 8009318:	2010      	movs	r0, #16
 800931a:	f7ff fe6d 	bl	8008ff8 <malloc>
 800931e:	6270      	str	r0, [r6, #36]	; 0x24
 8009320:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009324:	6004      	str	r4, [r0, #0]
 8009326:	60c4      	str	r4, [r0, #12]
 8009328:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800932c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009330:	b94c      	cbnz	r4, 8009346 <__pow5mult+0x56>
 8009332:	f240 2171 	movw	r1, #625	; 0x271
 8009336:	4630      	mov	r0, r6
 8009338:	f7ff ff3a 	bl	80091b0 <__i2b>
 800933c:	2300      	movs	r3, #0
 800933e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009342:	4604      	mov	r4, r0
 8009344:	6003      	str	r3, [r0, #0]
 8009346:	f04f 0800 	mov.w	r8, #0
 800934a:	07eb      	lsls	r3, r5, #31
 800934c:	d50a      	bpl.n	8009364 <__pow5mult+0x74>
 800934e:	4639      	mov	r1, r7
 8009350:	4622      	mov	r2, r4
 8009352:	4630      	mov	r0, r6
 8009354:	f7ff ff35 	bl	80091c2 <__multiply>
 8009358:	4639      	mov	r1, r7
 800935a:	4681      	mov	r9, r0
 800935c:	4630      	mov	r0, r6
 800935e:	f7ff fe87 	bl	8009070 <_Bfree>
 8009362:	464f      	mov	r7, r9
 8009364:	106d      	asrs	r5, r5, #1
 8009366:	d00b      	beq.n	8009380 <__pow5mult+0x90>
 8009368:	6820      	ldr	r0, [r4, #0]
 800936a:	b938      	cbnz	r0, 800937c <__pow5mult+0x8c>
 800936c:	4622      	mov	r2, r4
 800936e:	4621      	mov	r1, r4
 8009370:	4630      	mov	r0, r6
 8009372:	f7ff ff26 	bl	80091c2 <__multiply>
 8009376:	6020      	str	r0, [r4, #0]
 8009378:	f8c0 8000 	str.w	r8, [r0]
 800937c:	4604      	mov	r4, r0
 800937e:	e7e4      	b.n	800934a <__pow5mult+0x5a>
 8009380:	4638      	mov	r0, r7
 8009382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009386:	bf00      	nop
 8009388:	0800ad48 	.word	0x0800ad48

0800938c <__lshift>:
 800938c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009390:	460c      	mov	r4, r1
 8009392:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009396:	6923      	ldr	r3, [r4, #16]
 8009398:	6849      	ldr	r1, [r1, #4]
 800939a:	eb0a 0903 	add.w	r9, sl, r3
 800939e:	68a3      	ldr	r3, [r4, #8]
 80093a0:	4607      	mov	r7, r0
 80093a2:	4616      	mov	r6, r2
 80093a4:	f109 0501 	add.w	r5, r9, #1
 80093a8:	42ab      	cmp	r3, r5
 80093aa:	db32      	blt.n	8009412 <__lshift+0x86>
 80093ac:	4638      	mov	r0, r7
 80093ae:	f7ff fe2b 	bl	8009008 <_Balloc>
 80093b2:	2300      	movs	r3, #0
 80093b4:	4680      	mov	r8, r0
 80093b6:	f100 0114 	add.w	r1, r0, #20
 80093ba:	461a      	mov	r2, r3
 80093bc:	4553      	cmp	r3, sl
 80093be:	db2b      	blt.n	8009418 <__lshift+0x8c>
 80093c0:	6920      	ldr	r0, [r4, #16]
 80093c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093c6:	f104 0314 	add.w	r3, r4, #20
 80093ca:	f016 021f 	ands.w	r2, r6, #31
 80093ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093d6:	d025      	beq.n	8009424 <__lshift+0x98>
 80093d8:	f1c2 0e20 	rsb	lr, r2, #32
 80093dc:	2000      	movs	r0, #0
 80093de:	681e      	ldr	r6, [r3, #0]
 80093e0:	468a      	mov	sl, r1
 80093e2:	4096      	lsls	r6, r2
 80093e4:	4330      	orrs	r0, r6
 80093e6:	f84a 0b04 	str.w	r0, [sl], #4
 80093ea:	f853 0b04 	ldr.w	r0, [r3], #4
 80093ee:	459c      	cmp	ip, r3
 80093f0:	fa20 f00e 	lsr.w	r0, r0, lr
 80093f4:	d814      	bhi.n	8009420 <__lshift+0x94>
 80093f6:	6048      	str	r0, [r1, #4]
 80093f8:	b108      	cbz	r0, 80093fe <__lshift+0x72>
 80093fa:	f109 0502 	add.w	r5, r9, #2
 80093fe:	3d01      	subs	r5, #1
 8009400:	4638      	mov	r0, r7
 8009402:	f8c8 5010 	str.w	r5, [r8, #16]
 8009406:	4621      	mov	r1, r4
 8009408:	f7ff fe32 	bl	8009070 <_Bfree>
 800940c:	4640      	mov	r0, r8
 800940e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009412:	3101      	adds	r1, #1
 8009414:	005b      	lsls	r3, r3, #1
 8009416:	e7c7      	b.n	80093a8 <__lshift+0x1c>
 8009418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800941c:	3301      	adds	r3, #1
 800941e:	e7cd      	b.n	80093bc <__lshift+0x30>
 8009420:	4651      	mov	r1, sl
 8009422:	e7dc      	b.n	80093de <__lshift+0x52>
 8009424:	3904      	subs	r1, #4
 8009426:	f853 2b04 	ldr.w	r2, [r3], #4
 800942a:	f841 2f04 	str.w	r2, [r1, #4]!
 800942e:	459c      	cmp	ip, r3
 8009430:	d8f9      	bhi.n	8009426 <__lshift+0x9a>
 8009432:	e7e4      	b.n	80093fe <__lshift+0x72>

08009434 <__mcmp>:
 8009434:	6903      	ldr	r3, [r0, #16]
 8009436:	690a      	ldr	r2, [r1, #16]
 8009438:	1a9b      	subs	r3, r3, r2
 800943a:	b530      	push	{r4, r5, lr}
 800943c:	d10c      	bne.n	8009458 <__mcmp+0x24>
 800943e:	0092      	lsls	r2, r2, #2
 8009440:	3014      	adds	r0, #20
 8009442:	3114      	adds	r1, #20
 8009444:	1884      	adds	r4, r0, r2
 8009446:	4411      	add	r1, r2
 8009448:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800944c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009450:	4295      	cmp	r5, r2
 8009452:	d003      	beq.n	800945c <__mcmp+0x28>
 8009454:	d305      	bcc.n	8009462 <__mcmp+0x2e>
 8009456:	2301      	movs	r3, #1
 8009458:	4618      	mov	r0, r3
 800945a:	bd30      	pop	{r4, r5, pc}
 800945c:	42a0      	cmp	r0, r4
 800945e:	d3f3      	bcc.n	8009448 <__mcmp+0x14>
 8009460:	e7fa      	b.n	8009458 <__mcmp+0x24>
 8009462:	f04f 33ff 	mov.w	r3, #4294967295
 8009466:	e7f7      	b.n	8009458 <__mcmp+0x24>

08009468 <__mdiff>:
 8009468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800946c:	460d      	mov	r5, r1
 800946e:	4607      	mov	r7, r0
 8009470:	4611      	mov	r1, r2
 8009472:	4628      	mov	r0, r5
 8009474:	4614      	mov	r4, r2
 8009476:	f7ff ffdd 	bl	8009434 <__mcmp>
 800947a:	1e06      	subs	r6, r0, #0
 800947c:	d108      	bne.n	8009490 <__mdiff+0x28>
 800947e:	4631      	mov	r1, r6
 8009480:	4638      	mov	r0, r7
 8009482:	f7ff fdc1 	bl	8009008 <_Balloc>
 8009486:	2301      	movs	r3, #1
 8009488:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800948c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009490:	bfa4      	itt	ge
 8009492:	4623      	movge	r3, r4
 8009494:	462c      	movge	r4, r5
 8009496:	4638      	mov	r0, r7
 8009498:	6861      	ldr	r1, [r4, #4]
 800949a:	bfa6      	itte	ge
 800949c:	461d      	movge	r5, r3
 800949e:	2600      	movge	r6, #0
 80094a0:	2601      	movlt	r6, #1
 80094a2:	f7ff fdb1 	bl	8009008 <_Balloc>
 80094a6:	692b      	ldr	r3, [r5, #16]
 80094a8:	60c6      	str	r6, [r0, #12]
 80094aa:	6926      	ldr	r6, [r4, #16]
 80094ac:	f105 0914 	add.w	r9, r5, #20
 80094b0:	f104 0214 	add.w	r2, r4, #20
 80094b4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80094b8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80094bc:	f100 0514 	add.w	r5, r0, #20
 80094c0:	f04f 0e00 	mov.w	lr, #0
 80094c4:	f852 ab04 	ldr.w	sl, [r2], #4
 80094c8:	f859 4b04 	ldr.w	r4, [r9], #4
 80094cc:	fa1e f18a 	uxtah	r1, lr, sl
 80094d0:	b2a3      	uxth	r3, r4
 80094d2:	1ac9      	subs	r1, r1, r3
 80094d4:	0c23      	lsrs	r3, r4, #16
 80094d6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80094da:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80094de:	b289      	uxth	r1, r1
 80094e0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80094e4:	45c8      	cmp	r8, r9
 80094e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80094ea:	4694      	mov	ip, r2
 80094ec:	f845 3b04 	str.w	r3, [r5], #4
 80094f0:	d8e8      	bhi.n	80094c4 <__mdiff+0x5c>
 80094f2:	45bc      	cmp	ip, r7
 80094f4:	d304      	bcc.n	8009500 <__mdiff+0x98>
 80094f6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80094fa:	b183      	cbz	r3, 800951e <__mdiff+0xb6>
 80094fc:	6106      	str	r6, [r0, #16]
 80094fe:	e7c5      	b.n	800948c <__mdiff+0x24>
 8009500:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009504:	fa1e f381 	uxtah	r3, lr, r1
 8009508:	141a      	asrs	r2, r3, #16
 800950a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800950e:	b29b      	uxth	r3, r3
 8009510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009514:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009518:	f845 3b04 	str.w	r3, [r5], #4
 800951c:	e7e9      	b.n	80094f2 <__mdiff+0x8a>
 800951e:	3e01      	subs	r6, #1
 8009520:	e7e9      	b.n	80094f6 <__mdiff+0x8e>

08009522 <__d2b>:
 8009522:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009526:	460e      	mov	r6, r1
 8009528:	2101      	movs	r1, #1
 800952a:	ec59 8b10 	vmov	r8, r9, d0
 800952e:	4615      	mov	r5, r2
 8009530:	f7ff fd6a 	bl	8009008 <_Balloc>
 8009534:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009538:	4607      	mov	r7, r0
 800953a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800953e:	bb34      	cbnz	r4, 800958e <__d2b+0x6c>
 8009540:	9301      	str	r3, [sp, #4]
 8009542:	f1b8 0300 	subs.w	r3, r8, #0
 8009546:	d027      	beq.n	8009598 <__d2b+0x76>
 8009548:	a802      	add	r0, sp, #8
 800954a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800954e:	f7ff fe00 	bl	8009152 <__lo0bits>
 8009552:	9900      	ldr	r1, [sp, #0]
 8009554:	b1f0      	cbz	r0, 8009594 <__d2b+0x72>
 8009556:	9a01      	ldr	r2, [sp, #4]
 8009558:	f1c0 0320 	rsb	r3, r0, #32
 800955c:	fa02 f303 	lsl.w	r3, r2, r3
 8009560:	430b      	orrs	r3, r1
 8009562:	40c2      	lsrs	r2, r0
 8009564:	617b      	str	r3, [r7, #20]
 8009566:	9201      	str	r2, [sp, #4]
 8009568:	9b01      	ldr	r3, [sp, #4]
 800956a:	61bb      	str	r3, [r7, #24]
 800956c:	2b00      	cmp	r3, #0
 800956e:	bf14      	ite	ne
 8009570:	2102      	movne	r1, #2
 8009572:	2101      	moveq	r1, #1
 8009574:	6139      	str	r1, [r7, #16]
 8009576:	b1c4      	cbz	r4, 80095aa <__d2b+0x88>
 8009578:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800957c:	4404      	add	r4, r0
 800957e:	6034      	str	r4, [r6, #0]
 8009580:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009584:	6028      	str	r0, [r5, #0]
 8009586:	4638      	mov	r0, r7
 8009588:	b003      	add	sp, #12
 800958a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800958e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009592:	e7d5      	b.n	8009540 <__d2b+0x1e>
 8009594:	6179      	str	r1, [r7, #20]
 8009596:	e7e7      	b.n	8009568 <__d2b+0x46>
 8009598:	a801      	add	r0, sp, #4
 800959a:	f7ff fdda 	bl	8009152 <__lo0bits>
 800959e:	9b01      	ldr	r3, [sp, #4]
 80095a0:	617b      	str	r3, [r7, #20]
 80095a2:	2101      	movs	r1, #1
 80095a4:	6139      	str	r1, [r7, #16]
 80095a6:	3020      	adds	r0, #32
 80095a8:	e7e5      	b.n	8009576 <__d2b+0x54>
 80095aa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80095ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095b2:	6030      	str	r0, [r6, #0]
 80095b4:	6918      	ldr	r0, [r3, #16]
 80095b6:	f7ff fdad 	bl	8009114 <__hi0bits>
 80095ba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80095be:	e7e1      	b.n	8009584 <__d2b+0x62>

080095c0 <_mprec_log10>:
 80095c0:	2817      	cmp	r0, #23
 80095c2:	b5d0      	push	{r4, r6, r7, lr}
 80095c4:	4604      	mov	r4, r0
 80095c6:	dc07      	bgt.n	80095d8 <_mprec_log10+0x18>
 80095c8:	4b09      	ldr	r3, [pc, #36]	; (80095f0 <_mprec_log10+0x30>)
 80095ca:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 80095ce:	e9d4 0100 	ldrd	r0, r1, [r4]
 80095d2:	ec41 0b10 	vmov	d0, r0, r1
 80095d6:	bdd0      	pop	{r4, r6, r7, pc}
 80095d8:	4906      	ldr	r1, [pc, #24]	; (80095f4 <_mprec_log10+0x34>)
 80095da:	4f07      	ldr	r7, [pc, #28]	; (80095f8 <_mprec_log10+0x38>)
 80095dc:	2000      	movs	r0, #0
 80095de:	2600      	movs	r6, #0
 80095e0:	4632      	mov	r2, r6
 80095e2:	463b      	mov	r3, r7
 80095e4:	f7f6 ffb4 	bl	8000550 <__aeabi_dmul>
 80095e8:	3c01      	subs	r4, #1
 80095ea:	d1f9      	bne.n	80095e0 <_mprec_log10+0x20>
 80095ec:	e7f1      	b.n	80095d2 <_mprec_log10+0x12>
 80095ee:	bf00      	nop
 80095f0:	0800ac80 	.word	0x0800ac80
 80095f4:	3ff00000 	.word	0x3ff00000
 80095f8:	40240000 	.word	0x40240000

080095fc <_calloc_r>:
 80095fc:	b538      	push	{r3, r4, r5, lr}
 80095fe:	fb02 f401 	mul.w	r4, r2, r1
 8009602:	4621      	mov	r1, r4
 8009604:	f000 f808 	bl	8009618 <_malloc_r>
 8009608:	4605      	mov	r5, r0
 800960a:	b118      	cbz	r0, 8009614 <_calloc_r+0x18>
 800960c:	4622      	mov	r2, r4
 800960e:	2100      	movs	r1, #0
 8009610:	f7fe f9cf 	bl	80079b2 <memset>
 8009614:	4628      	mov	r0, r5
 8009616:	bd38      	pop	{r3, r4, r5, pc}

08009618 <_malloc_r>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	1ccd      	adds	r5, r1, #3
 800961c:	f025 0503 	bic.w	r5, r5, #3
 8009620:	3508      	adds	r5, #8
 8009622:	2d0c      	cmp	r5, #12
 8009624:	bf38      	it	cc
 8009626:	250c      	movcc	r5, #12
 8009628:	2d00      	cmp	r5, #0
 800962a:	4606      	mov	r6, r0
 800962c:	db01      	blt.n	8009632 <_malloc_r+0x1a>
 800962e:	42a9      	cmp	r1, r5
 8009630:	d903      	bls.n	800963a <_malloc_r+0x22>
 8009632:	230c      	movs	r3, #12
 8009634:	6033      	str	r3, [r6, #0]
 8009636:	2000      	movs	r0, #0
 8009638:	bd70      	pop	{r4, r5, r6, pc}
 800963a:	f000 f871 	bl	8009720 <__malloc_lock>
 800963e:	4a21      	ldr	r2, [pc, #132]	; (80096c4 <_malloc_r+0xac>)
 8009640:	6814      	ldr	r4, [r2, #0]
 8009642:	4621      	mov	r1, r4
 8009644:	b991      	cbnz	r1, 800966c <_malloc_r+0x54>
 8009646:	4c20      	ldr	r4, [pc, #128]	; (80096c8 <_malloc_r+0xb0>)
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	b91b      	cbnz	r3, 8009654 <_malloc_r+0x3c>
 800964c:	4630      	mov	r0, r6
 800964e:	f000 f83d 	bl	80096cc <_sbrk_r>
 8009652:	6020      	str	r0, [r4, #0]
 8009654:	4629      	mov	r1, r5
 8009656:	4630      	mov	r0, r6
 8009658:	f000 f838 	bl	80096cc <_sbrk_r>
 800965c:	1c43      	adds	r3, r0, #1
 800965e:	d124      	bne.n	80096aa <_malloc_r+0x92>
 8009660:	230c      	movs	r3, #12
 8009662:	6033      	str	r3, [r6, #0]
 8009664:	4630      	mov	r0, r6
 8009666:	f000 f85c 	bl	8009722 <__malloc_unlock>
 800966a:	e7e4      	b.n	8009636 <_malloc_r+0x1e>
 800966c:	680b      	ldr	r3, [r1, #0]
 800966e:	1b5b      	subs	r3, r3, r5
 8009670:	d418      	bmi.n	80096a4 <_malloc_r+0x8c>
 8009672:	2b0b      	cmp	r3, #11
 8009674:	d90f      	bls.n	8009696 <_malloc_r+0x7e>
 8009676:	600b      	str	r3, [r1, #0]
 8009678:	50cd      	str	r5, [r1, r3]
 800967a:	18cc      	adds	r4, r1, r3
 800967c:	4630      	mov	r0, r6
 800967e:	f000 f850 	bl	8009722 <__malloc_unlock>
 8009682:	f104 000b 	add.w	r0, r4, #11
 8009686:	1d23      	adds	r3, r4, #4
 8009688:	f020 0007 	bic.w	r0, r0, #7
 800968c:	1ac3      	subs	r3, r0, r3
 800968e:	d0d3      	beq.n	8009638 <_malloc_r+0x20>
 8009690:	425a      	negs	r2, r3
 8009692:	50e2      	str	r2, [r4, r3]
 8009694:	e7d0      	b.n	8009638 <_malloc_r+0x20>
 8009696:	428c      	cmp	r4, r1
 8009698:	684b      	ldr	r3, [r1, #4]
 800969a:	bf16      	itet	ne
 800969c:	6063      	strne	r3, [r4, #4]
 800969e:	6013      	streq	r3, [r2, #0]
 80096a0:	460c      	movne	r4, r1
 80096a2:	e7eb      	b.n	800967c <_malloc_r+0x64>
 80096a4:	460c      	mov	r4, r1
 80096a6:	6849      	ldr	r1, [r1, #4]
 80096a8:	e7cc      	b.n	8009644 <_malloc_r+0x2c>
 80096aa:	1cc4      	adds	r4, r0, #3
 80096ac:	f024 0403 	bic.w	r4, r4, #3
 80096b0:	42a0      	cmp	r0, r4
 80096b2:	d005      	beq.n	80096c0 <_malloc_r+0xa8>
 80096b4:	1a21      	subs	r1, r4, r0
 80096b6:	4630      	mov	r0, r6
 80096b8:	f000 f808 	bl	80096cc <_sbrk_r>
 80096bc:	3001      	adds	r0, #1
 80096be:	d0cf      	beq.n	8009660 <_malloc_r+0x48>
 80096c0:	6025      	str	r5, [r4, #0]
 80096c2:	e7db      	b.n	800967c <_malloc_r+0x64>
 80096c4:	2000020c 	.word	0x2000020c
 80096c8:	20000210 	.word	0x20000210

080096cc <_sbrk_r>:
 80096cc:	b538      	push	{r3, r4, r5, lr}
 80096ce:	4c06      	ldr	r4, [pc, #24]	; (80096e8 <_sbrk_r+0x1c>)
 80096d0:	2300      	movs	r3, #0
 80096d2:	4605      	mov	r5, r0
 80096d4:	4608      	mov	r0, r1
 80096d6:	6023      	str	r3, [r4, #0]
 80096d8:	f7f8 fe64 	bl	80023a4 <_sbrk>
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	d102      	bne.n	80096e6 <_sbrk_r+0x1a>
 80096e0:	6823      	ldr	r3, [r4, #0]
 80096e2:	b103      	cbz	r3, 80096e6 <_sbrk_r+0x1a>
 80096e4:	602b      	str	r3, [r5, #0]
 80096e6:	bd38      	pop	{r3, r4, r5, pc}
 80096e8:	200004ac 	.word	0x200004ac

080096ec <strcpy>:
 80096ec:	4603      	mov	r3, r0
 80096ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096f2:	f803 2b01 	strb.w	r2, [r3], #1
 80096f6:	2a00      	cmp	r2, #0
 80096f8:	d1f9      	bne.n	80096ee <strcpy+0x2>
 80096fa:	4770      	bx	lr

080096fc <__ascii_mbtowc>:
 80096fc:	b082      	sub	sp, #8
 80096fe:	b901      	cbnz	r1, 8009702 <__ascii_mbtowc+0x6>
 8009700:	a901      	add	r1, sp, #4
 8009702:	b142      	cbz	r2, 8009716 <__ascii_mbtowc+0x1a>
 8009704:	b14b      	cbz	r3, 800971a <__ascii_mbtowc+0x1e>
 8009706:	7813      	ldrb	r3, [r2, #0]
 8009708:	600b      	str	r3, [r1, #0]
 800970a:	7812      	ldrb	r2, [r2, #0]
 800970c:	1c10      	adds	r0, r2, #0
 800970e:	bf18      	it	ne
 8009710:	2001      	movne	r0, #1
 8009712:	b002      	add	sp, #8
 8009714:	4770      	bx	lr
 8009716:	4610      	mov	r0, r2
 8009718:	e7fb      	b.n	8009712 <__ascii_mbtowc+0x16>
 800971a:	f06f 0001 	mvn.w	r0, #1
 800971e:	e7f8      	b.n	8009712 <__ascii_mbtowc+0x16>

08009720 <__malloc_lock>:
 8009720:	4770      	bx	lr

08009722 <__malloc_unlock>:
 8009722:	4770      	bx	lr

08009724 <__ascii_wctomb>:
 8009724:	b149      	cbz	r1, 800973a <__ascii_wctomb+0x16>
 8009726:	2aff      	cmp	r2, #255	; 0xff
 8009728:	bf85      	ittet	hi
 800972a:	238a      	movhi	r3, #138	; 0x8a
 800972c:	6003      	strhi	r3, [r0, #0]
 800972e:	700a      	strbls	r2, [r1, #0]
 8009730:	f04f 30ff 	movhi.w	r0, #4294967295
 8009734:	bf98      	it	ls
 8009736:	2001      	movls	r0, #1
 8009738:	4770      	bx	lr
 800973a:	4608      	mov	r0, r1
 800973c:	4770      	bx	lr
	...

08009740 <atan>:
 8009740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	ec55 4b10 	vmov	r4, r5, d0
 8009748:	4bc3      	ldr	r3, [pc, #780]	; (8009a58 <atan+0x318>)
 800974a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800974e:	429e      	cmp	r6, r3
 8009750:	46ab      	mov	fp, r5
 8009752:	dd18      	ble.n	8009786 <atan+0x46>
 8009754:	4bc1      	ldr	r3, [pc, #772]	; (8009a5c <atan+0x31c>)
 8009756:	429e      	cmp	r6, r3
 8009758:	dc01      	bgt.n	800975e <atan+0x1e>
 800975a:	d109      	bne.n	8009770 <atan+0x30>
 800975c:	b144      	cbz	r4, 8009770 <atan+0x30>
 800975e:	4622      	mov	r2, r4
 8009760:	462b      	mov	r3, r5
 8009762:	4620      	mov	r0, r4
 8009764:	4629      	mov	r1, r5
 8009766:	f7f6 fd3d 	bl	80001e4 <__adddf3>
 800976a:	4604      	mov	r4, r0
 800976c:	460d      	mov	r5, r1
 800976e:	e006      	b.n	800977e <atan+0x3e>
 8009770:	f1bb 0f00 	cmp.w	fp, #0
 8009774:	f340 8131 	ble.w	80099da <atan+0x29a>
 8009778:	a59b      	add	r5, pc, #620	; (adr r5, 80099e8 <atan+0x2a8>)
 800977a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800977e:	ec45 4b10 	vmov	d0, r4, r5
 8009782:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009786:	4bb6      	ldr	r3, [pc, #728]	; (8009a60 <atan+0x320>)
 8009788:	429e      	cmp	r6, r3
 800978a:	dc14      	bgt.n	80097b6 <atan+0x76>
 800978c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009790:	429e      	cmp	r6, r3
 8009792:	dc0d      	bgt.n	80097b0 <atan+0x70>
 8009794:	a396      	add	r3, pc, #600	; (adr r3, 80099f0 <atan+0x2b0>)
 8009796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979a:	ee10 0a10 	vmov	r0, s0
 800979e:	4629      	mov	r1, r5
 80097a0:	f7f6 fd20 	bl	80001e4 <__adddf3>
 80097a4:	2200      	movs	r2, #0
 80097a6:	4baf      	ldr	r3, [pc, #700]	; (8009a64 <atan+0x324>)
 80097a8:	f7f7 f962 	bl	8000a70 <__aeabi_dcmpgt>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d1e6      	bne.n	800977e <atan+0x3e>
 80097b0:	f04f 3aff 	mov.w	sl, #4294967295
 80097b4:	e02b      	b.n	800980e <atan+0xce>
 80097b6:	f000 f963 	bl	8009a80 <fabs>
 80097ba:	4bab      	ldr	r3, [pc, #684]	; (8009a68 <atan+0x328>)
 80097bc:	429e      	cmp	r6, r3
 80097be:	ec55 4b10 	vmov	r4, r5, d0
 80097c2:	f300 80bf 	bgt.w	8009944 <atan+0x204>
 80097c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80097ca:	429e      	cmp	r6, r3
 80097cc:	f300 80a0 	bgt.w	8009910 <atan+0x1d0>
 80097d0:	ee10 2a10 	vmov	r2, s0
 80097d4:	ee10 0a10 	vmov	r0, s0
 80097d8:	462b      	mov	r3, r5
 80097da:	4629      	mov	r1, r5
 80097dc:	f7f6 fd02 	bl	80001e4 <__adddf3>
 80097e0:	2200      	movs	r2, #0
 80097e2:	4ba0      	ldr	r3, [pc, #640]	; (8009a64 <atan+0x324>)
 80097e4:	f7f6 fcfc 	bl	80001e0 <__aeabi_dsub>
 80097e8:	2200      	movs	r2, #0
 80097ea:	4606      	mov	r6, r0
 80097ec:	460f      	mov	r7, r1
 80097ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097f2:	4620      	mov	r0, r4
 80097f4:	4629      	mov	r1, r5
 80097f6:	f7f6 fcf5 	bl	80001e4 <__adddf3>
 80097fa:	4602      	mov	r2, r0
 80097fc:	460b      	mov	r3, r1
 80097fe:	4630      	mov	r0, r6
 8009800:	4639      	mov	r1, r7
 8009802:	f7f6 ffcf 	bl	80007a4 <__aeabi_ddiv>
 8009806:	f04f 0a00 	mov.w	sl, #0
 800980a:	4604      	mov	r4, r0
 800980c:	460d      	mov	r5, r1
 800980e:	4622      	mov	r2, r4
 8009810:	462b      	mov	r3, r5
 8009812:	4620      	mov	r0, r4
 8009814:	4629      	mov	r1, r5
 8009816:	f7f6 fe9b 	bl	8000550 <__aeabi_dmul>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	4680      	mov	r8, r0
 8009820:	4689      	mov	r9, r1
 8009822:	f7f6 fe95 	bl	8000550 <__aeabi_dmul>
 8009826:	a374      	add	r3, pc, #464	; (adr r3, 80099f8 <atan+0x2b8>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	4606      	mov	r6, r0
 800982e:	460f      	mov	r7, r1
 8009830:	f7f6 fe8e 	bl	8000550 <__aeabi_dmul>
 8009834:	a372      	add	r3, pc, #456	; (adr r3, 8009a00 <atan+0x2c0>)
 8009836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983a:	f7f6 fcd3 	bl	80001e4 <__adddf3>
 800983e:	4632      	mov	r2, r6
 8009840:	463b      	mov	r3, r7
 8009842:	f7f6 fe85 	bl	8000550 <__aeabi_dmul>
 8009846:	a370      	add	r3, pc, #448	; (adr r3, 8009a08 <atan+0x2c8>)
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	f7f6 fcca 	bl	80001e4 <__adddf3>
 8009850:	4632      	mov	r2, r6
 8009852:	463b      	mov	r3, r7
 8009854:	f7f6 fe7c 	bl	8000550 <__aeabi_dmul>
 8009858:	a36d      	add	r3, pc, #436	; (adr r3, 8009a10 <atan+0x2d0>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f6 fcc1 	bl	80001e4 <__adddf3>
 8009862:	4632      	mov	r2, r6
 8009864:	463b      	mov	r3, r7
 8009866:	f7f6 fe73 	bl	8000550 <__aeabi_dmul>
 800986a:	a36b      	add	r3, pc, #428	; (adr r3, 8009a18 <atan+0x2d8>)
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	f7f6 fcb8 	bl	80001e4 <__adddf3>
 8009874:	4632      	mov	r2, r6
 8009876:	463b      	mov	r3, r7
 8009878:	f7f6 fe6a 	bl	8000550 <__aeabi_dmul>
 800987c:	a368      	add	r3, pc, #416	; (adr r3, 8009a20 <atan+0x2e0>)
 800987e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009882:	f7f6 fcaf 	bl	80001e4 <__adddf3>
 8009886:	4642      	mov	r2, r8
 8009888:	464b      	mov	r3, r9
 800988a:	f7f6 fe61 	bl	8000550 <__aeabi_dmul>
 800988e:	a366      	add	r3, pc, #408	; (adr r3, 8009a28 <atan+0x2e8>)
 8009890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009894:	4680      	mov	r8, r0
 8009896:	4689      	mov	r9, r1
 8009898:	4630      	mov	r0, r6
 800989a:	4639      	mov	r1, r7
 800989c:	f7f6 fe58 	bl	8000550 <__aeabi_dmul>
 80098a0:	a363      	add	r3, pc, #396	; (adr r3, 8009a30 <atan+0x2f0>)
 80098a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a6:	f7f6 fc9b 	bl	80001e0 <__aeabi_dsub>
 80098aa:	4632      	mov	r2, r6
 80098ac:	463b      	mov	r3, r7
 80098ae:	f7f6 fe4f 	bl	8000550 <__aeabi_dmul>
 80098b2:	a361      	add	r3, pc, #388	; (adr r3, 8009a38 <atan+0x2f8>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 fc92 	bl	80001e0 <__aeabi_dsub>
 80098bc:	4632      	mov	r2, r6
 80098be:	463b      	mov	r3, r7
 80098c0:	f7f6 fe46 	bl	8000550 <__aeabi_dmul>
 80098c4:	a35e      	add	r3, pc, #376	; (adr r3, 8009a40 <atan+0x300>)
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f7f6 fc89 	bl	80001e0 <__aeabi_dsub>
 80098ce:	4632      	mov	r2, r6
 80098d0:	463b      	mov	r3, r7
 80098d2:	f7f6 fe3d 	bl	8000550 <__aeabi_dmul>
 80098d6:	a35c      	add	r3, pc, #368	; (adr r3, 8009a48 <atan+0x308>)
 80098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098dc:	f7f6 fc80 	bl	80001e0 <__aeabi_dsub>
 80098e0:	4632      	mov	r2, r6
 80098e2:	463b      	mov	r3, r7
 80098e4:	f7f6 fe34 	bl	8000550 <__aeabi_dmul>
 80098e8:	4602      	mov	r2, r0
 80098ea:	460b      	mov	r3, r1
 80098ec:	4640      	mov	r0, r8
 80098ee:	4649      	mov	r1, r9
 80098f0:	f7f6 fc78 	bl	80001e4 <__adddf3>
 80098f4:	4622      	mov	r2, r4
 80098f6:	462b      	mov	r3, r5
 80098f8:	f7f6 fe2a 	bl	8000550 <__aeabi_dmul>
 80098fc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	d14b      	bne.n	800999e <atan+0x25e>
 8009906:	4620      	mov	r0, r4
 8009908:	4629      	mov	r1, r5
 800990a:	f7f6 fc69 	bl	80001e0 <__aeabi_dsub>
 800990e:	e72c      	b.n	800976a <atan+0x2a>
 8009910:	ee10 0a10 	vmov	r0, s0
 8009914:	2200      	movs	r2, #0
 8009916:	4b53      	ldr	r3, [pc, #332]	; (8009a64 <atan+0x324>)
 8009918:	4629      	mov	r1, r5
 800991a:	f7f6 fc61 	bl	80001e0 <__aeabi_dsub>
 800991e:	2200      	movs	r2, #0
 8009920:	4606      	mov	r6, r0
 8009922:	460f      	mov	r7, r1
 8009924:	4b4f      	ldr	r3, [pc, #316]	; (8009a64 <atan+0x324>)
 8009926:	4620      	mov	r0, r4
 8009928:	4629      	mov	r1, r5
 800992a:	f7f6 fc5b 	bl	80001e4 <__adddf3>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	4630      	mov	r0, r6
 8009934:	4639      	mov	r1, r7
 8009936:	f7f6 ff35 	bl	80007a4 <__aeabi_ddiv>
 800993a:	f04f 0a01 	mov.w	sl, #1
 800993e:	4604      	mov	r4, r0
 8009940:	460d      	mov	r5, r1
 8009942:	e764      	b.n	800980e <atan+0xce>
 8009944:	4b49      	ldr	r3, [pc, #292]	; (8009a6c <atan+0x32c>)
 8009946:	429e      	cmp	r6, r3
 8009948:	dc1d      	bgt.n	8009986 <atan+0x246>
 800994a:	ee10 0a10 	vmov	r0, s0
 800994e:	2200      	movs	r2, #0
 8009950:	4b47      	ldr	r3, [pc, #284]	; (8009a70 <atan+0x330>)
 8009952:	4629      	mov	r1, r5
 8009954:	f7f6 fc44 	bl	80001e0 <__aeabi_dsub>
 8009958:	2200      	movs	r2, #0
 800995a:	4606      	mov	r6, r0
 800995c:	460f      	mov	r7, r1
 800995e:	4b44      	ldr	r3, [pc, #272]	; (8009a70 <atan+0x330>)
 8009960:	4620      	mov	r0, r4
 8009962:	4629      	mov	r1, r5
 8009964:	f7f6 fdf4 	bl	8000550 <__aeabi_dmul>
 8009968:	2200      	movs	r2, #0
 800996a:	4b3e      	ldr	r3, [pc, #248]	; (8009a64 <atan+0x324>)
 800996c:	f7f6 fc3a 	bl	80001e4 <__adddf3>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	4630      	mov	r0, r6
 8009976:	4639      	mov	r1, r7
 8009978:	f7f6 ff14 	bl	80007a4 <__aeabi_ddiv>
 800997c:	f04f 0a02 	mov.w	sl, #2
 8009980:	4604      	mov	r4, r0
 8009982:	460d      	mov	r5, r1
 8009984:	e743      	b.n	800980e <atan+0xce>
 8009986:	462b      	mov	r3, r5
 8009988:	ee10 2a10 	vmov	r2, s0
 800998c:	2000      	movs	r0, #0
 800998e:	4939      	ldr	r1, [pc, #228]	; (8009a74 <atan+0x334>)
 8009990:	f7f6 ff08 	bl	80007a4 <__aeabi_ddiv>
 8009994:	f04f 0a03 	mov.w	sl, #3
 8009998:	4604      	mov	r4, r0
 800999a:	460d      	mov	r5, r1
 800999c:	e737      	b.n	800980e <atan+0xce>
 800999e:	4b36      	ldr	r3, [pc, #216]	; (8009a78 <atan+0x338>)
 80099a0:	4e36      	ldr	r6, [pc, #216]	; (8009a7c <atan+0x33c>)
 80099a2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80099a6:	4456      	add	r6, sl
 80099a8:	449a      	add	sl, r3
 80099aa:	e9da 2300 	ldrd	r2, r3, [sl]
 80099ae:	f7f6 fc17 	bl	80001e0 <__aeabi_dsub>
 80099b2:	4622      	mov	r2, r4
 80099b4:	462b      	mov	r3, r5
 80099b6:	f7f6 fc13 	bl	80001e0 <__aeabi_dsub>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	e9d6 0100 	ldrd	r0, r1, [r6]
 80099c2:	f7f6 fc0d 	bl	80001e0 <__aeabi_dsub>
 80099c6:	f1bb 0f00 	cmp.w	fp, #0
 80099ca:	4604      	mov	r4, r0
 80099cc:	460d      	mov	r5, r1
 80099ce:	f6bf aed6 	bge.w	800977e <atan+0x3e>
 80099d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099d6:	461d      	mov	r5, r3
 80099d8:	e6d1      	b.n	800977e <atan+0x3e>
 80099da:	a51d      	add	r5, pc, #116	; (adr r5, 8009a50 <atan+0x310>)
 80099dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80099e0:	e6cd      	b.n	800977e <atan+0x3e>
 80099e2:	bf00      	nop
 80099e4:	f3af 8000 	nop.w
 80099e8:	54442d18 	.word	0x54442d18
 80099ec:	3ff921fb 	.word	0x3ff921fb
 80099f0:	8800759c 	.word	0x8800759c
 80099f4:	7e37e43c 	.word	0x7e37e43c
 80099f8:	e322da11 	.word	0xe322da11
 80099fc:	3f90ad3a 	.word	0x3f90ad3a
 8009a00:	24760deb 	.word	0x24760deb
 8009a04:	3fa97b4b 	.word	0x3fa97b4b
 8009a08:	a0d03d51 	.word	0xa0d03d51
 8009a0c:	3fb10d66 	.word	0x3fb10d66
 8009a10:	c54c206e 	.word	0xc54c206e
 8009a14:	3fb745cd 	.word	0x3fb745cd
 8009a18:	920083ff 	.word	0x920083ff
 8009a1c:	3fc24924 	.word	0x3fc24924
 8009a20:	5555550d 	.word	0x5555550d
 8009a24:	3fd55555 	.word	0x3fd55555
 8009a28:	2c6a6c2f 	.word	0x2c6a6c2f
 8009a2c:	bfa2b444 	.word	0xbfa2b444
 8009a30:	52defd9a 	.word	0x52defd9a
 8009a34:	3fadde2d 	.word	0x3fadde2d
 8009a38:	af749a6d 	.word	0xaf749a6d
 8009a3c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009a40:	fe231671 	.word	0xfe231671
 8009a44:	3fbc71c6 	.word	0x3fbc71c6
 8009a48:	9998ebc4 	.word	0x9998ebc4
 8009a4c:	3fc99999 	.word	0x3fc99999
 8009a50:	54442d18 	.word	0x54442d18
 8009a54:	bff921fb 	.word	0xbff921fb
 8009a58:	440fffff 	.word	0x440fffff
 8009a5c:	7ff00000 	.word	0x7ff00000
 8009a60:	3fdbffff 	.word	0x3fdbffff
 8009a64:	3ff00000 	.word	0x3ff00000
 8009a68:	3ff2ffff 	.word	0x3ff2ffff
 8009a6c:	40037fff 	.word	0x40037fff
 8009a70:	3ff80000 	.word	0x3ff80000
 8009a74:	bff00000 	.word	0xbff00000
 8009a78:	0800ae80 	.word	0x0800ae80
 8009a7c:	0800ae60 	.word	0x0800ae60

08009a80 <fabs>:
 8009a80:	ec51 0b10 	vmov	r0, r1, d0
 8009a84:	ee10 2a10 	vmov	r2, s0
 8009a88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a8c:	ec43 2b10 	vmov	d0, r2, r3
 8009a90:	4770      	bx	lr
	...

08009a94 <pow>:
 8009a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a98:	ed2d 8b04 	vpush	{d8-d9}
 8009a9c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009d70 <pow+0x2dc>
 8009aa0:	b08d      	sub	sp, #52	; 0x34
 8009aa2:	ec57 6b10 	vmov	r6, r7, d0
 8009aa6:	ec55 4b11 	vmov	r4, r5, d1
 8009aaa:	f000 f9bd 	bl	8009e28 <__ieee754_pow>
 8009aae:	f999 3000 	ldrsb.w	r3, [r9]
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	eeb0 8a40 	vmov.f32	s16, s0
 8009aba:	eef0 8a60 	vmov.f32	s17, s1
 8009abe:	46c8      	mov	r8, r9
 8009ac0:	d05f      	beq.n	8009b82 <pow+0xee>
 8009ac2:	4622      	mov	r2, r4
 8009ac4:	462b      	mov	r3, r5
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	4629      	mov	r1, r5
 8009aca:	f7f6 ffdb 	bl	8000a84 <__aeabi_dcmpun>
 8009ace:	4683      	mov	fp, r0
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d156      	bne.n	8009b82 <pow+0xee>
 8009ad4:	4632      	mov	r2, r6
 8009ad6:	463b      	mov	r3, r7
 8009ad8:	4630      	mov	r0, r6
 8009ada:	4639      	mov	r1, r7
 8009adc:	f7f6 ffd2 	bl	8000a84 <__aeabi_dcmpun>
 8009ae0:	9001      	str	r0, [sp, #4]
 8009ae2:	b1e8      	cbz	r0, 8009b20 <pow+0x8c>
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	4620      	mov	r0, r4
 8009aea:	4629      	mov	r1, r5
 8009aec:	f7f6 ff98 	bl	8000a20 <__aeabi_dcmpeq>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d046      	beq.n	8009b82 <pow+0xee>
 8009af4:	2301      	movs	r3, #1
 8009af6:	9302      	str	r3, [sp, #8]
 8009af8:	4b96      	ldr	r3, [pc, #600]	; (8009d54 <pow+0x2c0>)
 8009afa:	9303      	str	r3, [sp, #12]
 8009afc:	4b96      	ldr	r3, [pc, #600]	; (8009d58 <pow+0x2c4>)
 8009afe:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009b02:	2200      	movs	r2, #0
 8009b04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009b08:	9b00      	ldr	r3, [sp, #0]
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009b10:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009b14:	d033      	beq.n	8009b7e <pow+0xea>
 8009b16:	a802      	add	r0, sp, #8
 8009b18:	f000 ff4c 	bl	800a9b4 <matherr>
 8009b1c:	bb48      	cbnz	r0, 8009b72 <pow+0xde>
 8009b1e:	e05d      	b.n	8009bdc <pow+0x148>
 8009b20:	f04f 0a00 	mov.w	sl, #0
 8009b24:	f04f 0b00 	mov.w	fp, #0
 8009b28:	4652      	mov	r2, sl
 8009b2a:	465b      	mov	r3, fp
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	4639      	mov	r1, r7
 8009b30:	f7f6 ff76 	bl	8000a20 <__aeabi_dcmpeq>
 8009b34:	ec4b ab19 	vmov	d9, sl, fp
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d054      	beq.n	8009be6 <pow+0x152>
 8009b3c:	4652      	mov	r2, sl
 8009b3e:	465b      	mov	r3, fp
 8009b40:	4620      	mov	r0, r4
 8009b42:	4629      	mov	r1, r5
 8009b44:	f7f6 ff6c 	bl	8000a20 <__aeabi_dcmpeq>
 8009b48:	4680      	mov	r8, r0
 8009b4a:	b318      	cbz	r0, 8009b94 <pow+0x100>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	9302      	str	r3, [sp, #8]
 8009b50:	4b80      	ldr	r3, [pc, #512]	; (8009d54 <pow+0x2c0>)
 8009b52:	9303      	str	r3, [sp, #12]
 8009b54:	9b01      	ldr	r3, [sp, #4]
 8009b56:	930a      	str	r3, [sp, #40]	; 0x28
 8009b58:	9b00      	ldr	r3, [sp, #0]
 8009b5a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009b5e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009b62:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d0d5      	beq.n	8009b16 <pow+0x82>
 8009b6a:	4b7b      	ldr	r3, [pc, #492]	; (8009d58 <pow+0x2c4>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b74:	b11b      	cbz	r3, 8009b7e <pow+0xea>
 8009b76:	f7fd fecd 	bl	8007914 <__errno>
 8009b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b7c:	6003      	str	r3, [r0, #0]
 8009b7e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8009b82:	eeb0 0a48 	vmov.f32	s0, s16
 8009b86:	eef0 0a68 	vmov.f32	s1, s17
 8009b8a:	b00d      	add	sp, #52	; 0x34
 8009b8c:	ecbd 8b04 	vpop	{d8-d9}
 8009b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b94:	ec45 4b10 	vmov	d0, r4, r5
 8009b98:	f000 ff04 	bl	800a9a4 <finite>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d0f0      	beq.n	8009b82 <pow+0xee>
 8009ba0:	4652      	mov	r2, sl
 8009ba2:	465b      	mov	r3, fp
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	f7f6 ff44 	bl	8000a34 <__aeabi_dcmplt>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d0e8      	beq.n	8009b82 <pow+0xee>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	9302      	str	r3, [sp, #8]
 8009bb4:	4b67      	ldr	r3, [pc, #412]	; (8009d54 <pow+0x2c0>)
 8009bb6:	9303      	str	r3, [sp, #12]
 8009bb8:	f999 3000 	ldrsb.w	r3, [r9]
 8009bbc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009bc0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009bc4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009bc8:	b913      	cbnz	r3, 8009bd0 <pow+0x13c>
 8009bca:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009bce:	e7a2      	b.n	8009b16 <pow+0x82>
 8009bd0:	4962      	ldr	r1, [pc, #392]	; (8009d5c <pow+0x2c8>)
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d19c      	bne.n	8009b16 <pow+0x82>
 8009bdc:	f7fd fe9a 	bl	8007914 <__errno>
 8009be0:	2321      	movs	r3, #33	; 0x21
 8009be2:	6003      	str	r3, [r0, #0]
 8009be4:	e7c5      	b.n	8009b72 <pow+0xde>
 8009be6:	eeb0 0a48 	vmov.f32	s0, s16
 8009bea:	eef0 0a68 	vmov.f32	s1, s17
 8009bee:	f000 fed9 	bl	800a9a4 <finite>
 8009bf2:	9000      	str	r0, [sp, #0]
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	f040 8081 	bne.w	8009cfc <pow+0x268>
 8009bfa:	ec47 6b10 	vmov	d0, r6, r7
 8009bfe:	f000 fed1 	bl	800a9a4 <finite>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d07a      	beq.n	8009cfc <pow+0x268>
 8009c06:	ec45 4b10 	vmov	d0, r4, r5
 8009c0a:	f000 fecb 	bl	800a9a4 <finite>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d074      	beq.n	8009cfc <pow+0x268>
 8009c12:	ec53 2b18 	vmov	r2, r3, d8
 8009c16:	ee18 0a10 	vmov	r0, s16
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	f7f6 ff32 	bl	8000a84 <__aeabi_dcmpun>
 8009c20:	f999 9000 	ldrsb.w	r9, [r9]
 8009c24:	4b4b      	ldr	r3, [pc, #300]	; (8009d54 <pow+0x2c0>)
 8009c26:	b1b0      	cbz	r0, 8009c56 <pow+0x1c2>
 8009c28:	2201      	movs	r2, #1
 8009c2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c2e:	9b00      	ldr	r3, [sp, #0]
 8009c30:	930a      	str	r3, [sp, #40]	; 0x28
 8009c32:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009c36:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009c3a:	f1b9 0f00 	cmp.w	r9, #0
 8009c3e:	d0c4      	beq.n	8009bca <pow+0x136>
 8009c40:	4652      	mov	r2, sl
 8009c42:	465b      	mov	r3, fp
 8009c44:	4650      	mov	r0, sl
 8009c46:	4659      	mov	r1, fp
 8009c48:	f7f6 fdac 	bl	80007a4 <__aeabi_ddiv>
 8009c4c:	f1b9 0f02 	cmp.w	r9, #2
 8009c50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c54:	e7c1      	b.n	8009bda <pow+0x146>
 8009c56:	2203      	movs	r2, #3
 8009c58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c5c:	900a      	str	r0, [sp, #40]	; 0x28
 8009c5e:	4629      	mov	r1, r5
 8009c60:	4620      	mov	r0, r4
 8009c62:	2200      	movs	r2, #0
 8009c64:	4b3e      	ldr	r3, [pc, #248]	; (8009d60 <pow+0x2cc>)
 8009c66:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009c6a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009c6e:	f7f6 fc6f 	bl	8000550 <__aeabi_dmul>
 8009c72:	4604      	mov	r4, r0
 8009c74:	460d      	mov	r5, r1
 8009c76:	f1b9 0f00 	cmp.w	r9, #0
 8009c7a:	d124      	bne.n	8009cc6 <pow+0x232>
 8009c7c:	4b39      	ldr	r3, [pc, #228]	; (8009d64 <pow+0x2d0>)
 8009c7e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009c82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c86:	4630      	mov	r0, r6
 8009c88:	4652      	mov	r2, sl
 8009c8a:	465b      	mov	r3, fp
 8009c8c:	4639      	mov	r1, r7
 8009c8e:	f7f6 fed1 	bl	8000a34 <__aeabi_dcmplt>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d056      	beq.n	8009d44 <pow+0x2b0>
 8009c96:	ec45 4b10 	vmov	d0, r4, r5
 8009c9a:	f000 fe95 	bl	800a9c8 <rint>
 8009c9e:	4622      	mov	r2, r4
 8009ca0:	462b      	mov	r3, r5
 8009ca2:	ec51 0b10 	vmov	r0, r1, d0
 8009ca6:	f7f6 febb 	bl	8000a20 <__aeabi_dcmpeq>
 8009caa:	b920      	cbnz	r0, 8009cb6 <pow+0x222>
 8009cac:	4b2e      	ldr	r3, [pc, #184]	; (8009d68 <pow+0x2d4>)
 8009cae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009cb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009cb6:	f998 3000 	ldrsb.w	r3, [r8]
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d142      	bne.n	8009d44 <pow+0x2b0>
 8009cbe:	f7fd fe29 	bl	8007914 <__errno>
 8009cc2:	2322      	movs	r3, #34	; 0x22
 8009cc4:	e78d      	b.n	8009be2 <pow+0x14e>
 8009cc6:	4b29      	ldr	r3, [pc, #164]	; (8009d6c <pow+0x2d8>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009cce:	4630      	mov	r0, r6
 8009cd0:	4652      	mov	r2, sl
 8009cd2:	465b      	mov	r3, fp
 8009cd4:	4639      	mov	r1, r7
 8009cd6:	f7f6 fead 	bl	8000a34 <__aeabi_dcmplt>
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d0eb      	beq.n	8009cb6 <pow+0x222>
 8009cde:	ec45 4b10 	vmov	d0, r4, r5
 8009ce2:	f000 fe71 	bl	800a9c8 <rint>
 8009ce6:	4622      	mov	r2, r4
 8009ce8:	462b      	mov	r3, r5
 8009cea:	ec51 0b10 	vmov	r0, r1, d0
 8009cee:	f7f6 fe97 	bl	8000a20 <__aeabi_dcmpeq>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d1df      	bne.n	8009cb6 <pow+0x222>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	4b18      	ldr	r3, [pc, #96]	; (8009d5c <pow+0x2c8>)
 8009cfa:	e7da      	b.n	8009cb2 <pow+0x21e>
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2300      	movs	r3, #0
 8009d00:	ec51 0b18 	vmov	r0, r1, d8
 8009d04:	f7f6 fe8c 	bl	8000a20 <__aeabi_dcmpeq>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	f43f af3a 	beq.w	8009b82 <pow+0xee>
 8009d0e:	ec47 6b10 	vmov	d0, r6, r7
 8009d12:	f000 fe47 	bl	800a9a4 <finite>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	f43f af33 	beq.w	8009b82 <pow+0xee>
 8009d1c:	ec45 4b10 	vmov	d0, r4, r5
 8009d20:	f000 fe40 	bl	800a9a4 <finite>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	f43f af2c 	beq.w	8009b82 <pow+0xee>
 8009d2a:	2304      	movs	r3, #4
 8009d2c:	9302      	str	r3, [sp, #8]
 8009d2e:	4b09      	ldr	r3, [pc, #36]	; (8009d54 <pow+0x2c0>)
 8009d30:	9303      	str	r3, [sp, #12]
 8009d32:	2300      	movs	r3, #0
 8009d34:	930a      	str	r3, [sp, #40]	; 0x28
 8009d36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009d3a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009d3e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009d42:	e7b8      	b.n	8009cb6 <pow+0x222>
 8009d44:	a802      	add	r0, sp, #8
 8009d46:	f000 fe35 	bl	800a9b4 <matherr>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	f47f af11 	bne.w	8009b72 <pow+0xde>
 8009d50:	e7b5      	b.n	8009cbe <pow+0x22a>
 8009d52:	bf00      	nop
 8009d54:	0800aea0 	.word	0x0800aea0
 8009d58:	3ff00000 	.word	0x3ff00000
 8009d5c:	fff00000 	.word	0xfff00000
 8009d60:	3fe00000 	.word	0x3fe00000
 8009d64:	47efffff 	.word	0x47efffff
 8009d68:	c7efffff 	.word	0xc7efffff
 8009d6c:	7ff00000 	.word	0x7ff00000
 8009d70:	200001dc 	.word	0x200001dc

08009d74 <sqrt>:
 8009d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d78:	ed2d 8b02 	vpush	{d8}
 8009d7c:	b08b      	sub	sp, #44	; 0x2c
 8009d7e:	ec55 4b10 	vmov	r4, r5, d0
 8009d82:	f000 fd5f 	bl	800a844 <__ieee754_sqrt>
 8009d86:	4b26      	ldr	r3, [pc, #152]	; (8009e20 <sqrt+0xac>)
 8009d88:	eeb0 8a40 	vmov.f32	s16, s0
 8009d8c:	eef0 8a60 	vmov.f32	s17, s1
 8009d90:	f993 6000 	ldrsb.w	r6, [r3]
 8009d94:	1c73      	adds	r3, r6, #1
 8009d96:	d02a      	beq.n	8009dee <sqrt+0x7a>
 8009d98:	4622      	mov	r2, r4
 8009d9a:	462b      	mov	r3, r5
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	4629      	mov	r1, r5
 8009da0:	f7f6 fe70 	bl	8000a84 <__aeabi_dcmpun>
 8009da4:	4607      	mov	r7, r0
 8009da6:	bb10      	cbnz	r0, 8009dee <sqrt+0x7a>
 8009da8:	f04f 0800 	mov.w	r8, #0
 8009dac:	f04f 0900 	mov.w	r9, #0
 8009db0:	4642      	mov	r2, r8
 8009db2:	464b      	mov	r3, r9
 8009db4:	4620      	mov	r0, r4
 8009db6:	4629      	mov	r1, r5
 8009db8:	f7f6 fe3c 	bl	8000a34 <__aeabi_dcmplt>
 8009dbc:	b1b8      	cbz	r0, 8009dee <sqrt+0x7a>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	4b18      	ldr	r3, [pc, #96]	; (8009e24 <sqrt+0xb0>)
 8009dc4:	9301      	str	r3, [sp, #4]
 8009dc6:	9708      	str	r7, [sp, #32]
 8009dc8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009dcc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009dd0:	b9b6      	cbnz	r6, 8009e00 <sqrt+0x8c>
 8009dd2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009dd6:	4668      	mov	r0, sp
 8009dd8:	f000 fdec 	bl	800a9b4 <matherr>
 8009ddc:	b1d0      	cbz	r0, 8009e14 <sqrt+0xa0>
 8009dde:	9b08      	ldr	r3, [sp, #32]
 8009de0:	b11b      	cbz	r3, 8009dea <sqrt+0x76>
 8009de2:	f7fd fd97 	bl	8007914 <__errno>
 8009de6:	9b08      	ldr	r3, [sp, #32]
 8009de8:	6003      	str	r3, [r0, #0]
 8009dea:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009dee:	eeb0 0a48 	vmov.f32	s0, s16
 8009df2:	eef0 0a68 	vmov.f32	s1, s17
 8009df6:	b00b      	add	sp, #44	; 0x2c
 8009df8:	ecbd 8b02 	vpop	{d8}
 8009dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e00:	4642      	mov	r2, r8
 8009e02:	464b      	mov	r3, r9
 8009e04:	4640      	mov	r0, r8
 8009e06:	4649      	mov	r1, r9
 8009e08:	f7f6 fccc 	bl	80007a4 <__aeabi_ddiv>
 8009e0c:	2e02      	cmp	r6, #2
 8009e0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e12:	d1e0      	bne.n	8009dd6 <sqrt+0x62>
 8009e14:	f7fd fd7e 	bl	8007914 <__errno>
 8009e18:	2321      	movs	r3, #33	; 0x21
 8009e1a:	6003      	str	r3, [r0, #0]
 8009e1c:	e7df      	b.n	8009dde <sqrt+0x6a>
 8009e1e:	bf00      	nop
 8009e20:	200001dc 	.word	0x200001dc
 8009e24:	0800aea4 	.word	0x0800aea4

08009e28 <__ieee754_pow>:
 8009e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	b091      	sub	sp, #68	; 0x44
 8009e2e:	ed8d 1b00 	vstr	d1, [sp]
 8009e32:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009e36:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009e3a:	ea58 0302 	orrs.w	r3, r8, r2
 8009e3e:	ec57 6b10 	vmov	r6, r7, d0
 8009e42:	f000 84be 	beq.w	800a7c2 <__ieee754_pow+0x99a>
 8009e46:	4b7a      	ldr	r3, [pc, #488]	; (800a030 <__ieee754_pow+0x208>)
 8009e48:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009e4c:	429c      	cmp	r4, r3
 8009e4e:	463d      	mov	r5, r7
 8009e50:	ee10 aa10 	vmov	sl, s0
 8009e54:	dc09      	bgt.n	8009e6a <__ieee754_pow+0x42>
 8009e56:	d103      	bne.n	8009e60 <__ieee754_pow+0x38>
 8009e58:	b93e      	cbnz	r6, 8009e6a <__ieee754_pow+0x42>
 8009e5a:	45a0      	cmp	r8, r4
 8009e5c:	dc0d      	bgt.n	8009e7a <__ieee754_pow+0x52>
 8009e5e:	e001      	b.n	8009e64 <__ieee754_pow+0x3c>
 8009e60:	4598      	cmp	r8, r3
 8009e62:	dc02      	bgt.n	8009e6a <__ieee754_pow+0x42>
 8009e64:	4598      	cmp	r8, r3
 8009e66:	d10e      	bne.n	8009e86 <__ieee754_pow+0x5e>
 8009e68:	b16a      	cbz	r2, 8009e86 <__ieee754_pow+0x5e>
 8009e6a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009e6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009e72:	ea54 030a 	orrs.w	r3, r4, sl
 8009e76:	f000 84a4 	beq.w	800a7c2 <__ieee754_pow+0x99a>
 8009e7a:	486e      	ldr	r0, [pc, #440]	; (800a034 <__ieee754_pow+0x20c>)
 8009e7c:	b011      	add	sp, #68	; 0x44
 8009e7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e82:	f000 bd99 	b.w	800a9b8 <nan>
 8009e86:	2d00      	cmp	r5, #0
 8009e88:	da53      	bge.n	8009f32 <__ieee754_pow+0x10a>
 8009e8a:	4b6b      	ldr	r3, [pc, #428]	; (800a038 <__ieee754_pow+0x210>)
 8009e8c:	4598      	cmp	r8, r3
 8009e8e:	dc4d      	bgt.n	8009f2c <__ieee754_pow+0x104>
 8009e90:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009e94:	4598      	cmp	r8, r3
 8009e96:	dd4c      	ble.n	8009f32 <__ieee754_pow+0x10a>
 8009e98:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009e9c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ea0:	2b14      	cmp	r3, #20
 8009ea2:	dd26      	ble.n	8009ef2 <__ieee754_pow+0xca>
 8009ea4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009ea8:	fa22 f103 	lsr.w	r1, r2, r3
 8009eac:	fa01 f303 	lsl.w	r3, r1, r3
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d13e      	bne.n	8009f32 <__ieee754_pow+0x10a>
 8009eb4:	f001 0101 	and.w	r1, r1, #1
 8009eb8:	f1c1 0b02 	rsb	fp, r1, #2
 8009ebc:	2a00      	cmp	r2, #0
 8009ebe:	d15b      	bne.n	8009f78 <__ieee754_pow+0x150>
 8009ec0:	4b5b      	ldr	r3, [pc, #364]	; (800a030 <__ieee754_pow+0x208>)
 8009ec2:	4598      	cmp	r8, r3
 8009ec4:	d124      	bne.n	8009f10 <__ieee754_pow+0xe8>
 8009ec6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009eca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009ece:	ea53 030a 	orrs.w	r3, r3, sl
 8009ed2:	f000 8476 	beq.w	800a7c2 <__ieee754_pow+0x99a>
 8009ed6:	4b59      	ldr	r3, [pc, #356]	; (800a03c <__ieee754_pow+0x214>)
 8009ed8:	429c      	cmp	r4, r3
 8009eda:	dd2d      	ble.n	8009f38 <__ieee754_pow+0x110>
 8009edc:	f1b9 0f00 	cmp.w	r9, #0
 8009ee0:	f280 8473 	bge.w	800a7ca <__ieee754_pow+0x9a2>
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	ec41 0b10 	vmov	d0, r0, r1
 8009eec:	b011      	add	sp, #68	; 0x44
 8009eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef2:	2a00      	cmp	r2, #0
 8009ef4:	d13e      	bne.n	8009f74 <__ieee754_pow+0x14c>
 8009ef6:	f1c3 0314 	rsb	r3, r3, #20
 8009efa:	fa48 f103 	asr.w	r1, r8, r3
 8009efe:	fa01 f303 	lsl.w	r3, r1, r3
 8009f02:	4543      	cmp	r3, r8
 8009f04:	f040 8469 	bne.w	800a7da <__ieee754_pow+0x9b2>
 8009f08:	f001 0101 	and.w	r1, r1, #1
 8009f0c:	f1c1 0b02 	rsb	fp, r1, #2
 8009f10:	4b4b      	ldr	r3, [pc, #300]	; (800a040 <__ieee754_pow+0x218>)
 8009f12:	4598      	cmp	r8, r3
 8009f14:	d118      	bne.n	8009f48 <__ieee754_pow+0x120>
 8009f16:	f1b9 0f00 	cmp.w	r9, #0
 8009f1a:	f280 845a 	bge.w	800a7d2 <__ieee754_pow+0x9aa>
 8009f1e:	4948      	ldr	r1, [pc, #288]	; (800a040 <__ieee754_pow+0x218>)
 8009f20:	4632      	mov	r2, r6
 8009f22:	463b      	mov	r3, r7
 8009f24:	2000      	movs	r0, #0
 8009f26:	f7f6 fc3d 	bl	80007a4 <__aeabi_ddiv>
 8009f2a:	e7dd      	b.n	8009ee8 <__ieee754_pow+0xc0>
 8009f2c:	f04f 0b02 	mov.w	fp, #2
 8009f30:	e7c4      	b.n	8009ebc <__ieee754_pow+0x94>
 8009f32:	f04f 0b00 	mov.w	fp, #0
 8009f36:	e7c1      	b.n	8009ebc <__ieee754_pow+0x94>
 8009f38:	f1b9 0f00 	cmp.w	r9, #0
 8009f3c:	dad2      	bge.n	8009ee4 <__ieee754_pow+0xbc>
 8009f3e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009f42:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009f46:	e7cf      	b.n	8009ee8 <__ieee754_pow+0xc0>
 8009f48:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009f4c:	d106      	bne.n	8009f5c <__ieee754_pow+0x134>
 8009f4e:	4632      	mov	r2, r6
 8009f50:	463b      	mov	r3, r7
 8009f52:	4610      	mov	r0, r2
 8009f54:	4619      	mov	r1, r3
 8009f56:	f7f6 fafb 	bl	8000550 <__aeabi_dmul>
 8009f5a:	e7c5      	b.n	8009ee8 <__ieee754_pow+0xc0>
 8009f5c:	4b39      	ldr	r3, [pc, #228]	; (800a044 <__ieee754_pow+0x21c>)
 8009f5e:	4599      	cmp	r9, r3
 8009f60:	d10a      	bne.n	8009f78 <__ieee754_pow+0x150>
 8009f62:	2d00      	cmp	r5, #0
 8009f64:	db08      	blt.n	8009f78 <__ieee754_pow+0x150>
 8009f66:	ec47 6b10 	vmov	d0, r6, r7
 8009f6a:	b011      	add	sp, #68	; 0x44
 8009f6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	f000 bc68 	b.w	800a844 <__ieee754_sqrt>
 8009f74:	f04f 0b00 	mov.w	fp, #0
 8009f78:	ec47 6b10 	vmov	d0, r6, r7
 8009f7c:	f7ff fd80 	bl	8009a80 <fabs>
 8009f80:	ec51 0b10 	vmov	r0, r1, d0
 8009f84:	f1ba 0f00 	cmp.w	sl, #0
 8009f88:	d127      	bne.n	8009fda <__ieee754_pow+0x1b2>
 8009f8a:	b124      	cbz	r4, 8009f96 <__ieee754_pow+0x16e>
 8009f8c:	4b2c      	ldr	r3, [pc, #176]	; (800a040 <__ieee754_pow+0x218>)
 8009f8e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d121      	bne.n	8009fda <__ieee754_pow+0x1b2>
 8009f96:	f1b9 0f00 	cmp.w	r9, #0
 8009f9a:	da05      	bge.n	8009fa8 <__ieee754_pow+0x180>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	4927      	ldr	r1, [pc, #156]	; (800a040 <__ieee754_pow+0x218>)
 8009fa4:	f7f6 fbfe 	bl	80007a4 <__aeabi_ddiv>
 8009fa8:	2d00      	cmp	r5, #0
 8009faa:	da9d      	bge.n	8009ee8 <__ieee754_pow+0xc0>
 8009fac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009fb0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009fb4:	ea54 030b 	orrs.w	r3, r4, fp
 8009fb8:	d108      	bne.n	8009fcc <__ieee754_pow+0x1a4>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	f7f6 f90d 	bl	80001e0 <__aeabi_dsub>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	e7ac      	b.n	8009f26 <__ieee754_pow+0xfe>
 8009fcc:	f1bb 0f01 	cmp.w	fp, #1
 8009fd0:	d18a      	bne.n	8009ee8 <__ieee754_pow+0xc0>
 8009fd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	e786      	b.n	8009ee8 <__ieee754_pow+0xc0>
 8009fda:	0fed      	lsrs	r5, r5, #31
 8009fdc:	1e6b      	subs	r3, r5, #1
 8009fde:	930d      	str	r3, [sp, #52]	; 0x34
 8009fe0:	ea5b 0303 	orrs.w	r3, fp, r3
 8009fe4:	d102      	bne.n	8009fec <__ieee754_pow+0x1c4>
 8009fe6:	4632      	mov	r2, r6
 8009fe8:	463b      	mov	r3, r7
 8009fea:	e7e8      	b.n	8009fbe <__ieee754_pow+0x196>
 8009fec:	4b16      	ldr	r3, [pc, #88]	; (800a048 <__ieee754_pow+0x220>)
 8009fee:	4598      	cmp	r8, r3
 8009ff0:	f340 80fe 	ble.w	800a1f0 <__ieee754_pow+0x3c8>
 8009ff4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009ff8:	4598      	cmp	r8, r3
 8009ffa:	dd0a      	ble.n	800a012 <__ieee754_pow+0x1ea>
 8009ffc:	4b0f      	ldr	r3, [pc, #60]	; (800a03c <__ieee754_pow+0x214>)
 8009ffe:	429c      	cmp	r4, r3
 800a000:	dc0d      	bgt.n	800a01e <__ieee754_pow+0x1f6>
 800a002:	f1b9 0f00 	cmp.w	r9, #0
 800a006:	f6bf af6d 	bge.w	8009ee4 <__ieee754_pow+0xbc>
 800a00a:	a307      	add	r3, pc, #28	; (adr r3, 800a028 <__ieee754_pow+0x200>)
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	e79f      	b.n	8009f52 <__ieee754_pow+0x12a>
 800a012:	4b0e      	ldr	r3, [pc, #56]	; (800a04c <__ieee754_pow+0x224>)
 800a014:	429c      	cmp	r4, r3
 800a016:	ddf4      	ble.n	800a002 <__ieee754_pow+0x1da>
 800a018:	4b09      	ldr	r3, [pc, #36]	; (800a040 <__ieee754_pow+0x218>)
 800a01a:	429c      	cmp	r4, r3
 800a01c:	dd18      	ble.n	800a050 <__ieee754_pow+0x228>
 800a01e:	f1b9 0f00 	cmp.w	r9, #0
 800a022:	dcf2      	bgt.n	800a00a <__ieee754_pow+0x1e2>
 800a024:	e75e      	b.n	8009ee4 <__ieee754_pow+0xbc>
 800a026:	bf00      	nop
 800a028:	8800759c 	.word	0x8800759c
 800a02c:	7e37e43c 	.word	0x7e37e43c
 800a030:	7ff00000 	.word	0x7ff00000
 800a034:	0800ad5d 	.word	0x0800ad5d
 800a038:	433fffff 	.word	0x433fffff
 800a03c:	3fefffff 	.word	0x3fefffff
 800a040:	3ff00000 	.word	0x3ff00000
 800a044:	3fe00000 	.word	0x3fe00000
 800a048:	41e00000 	.word	0x41e00000
 800a04c:	3feffffe 	.word	0x3feffffe
 800a050:	2200      	movs	r2, #0
 800a052:	4b63      	ldr	r3, [pc, #396]	; (800a1e0 <__ieee754_pow+0x3b8>)
 800a054:	f7f6 f8c4 	bl	80001e0 <__aeabi_dsub>
 800a058:	a355      	add	r3, pc, #340	; (adr r3, 800a1b0 <__ieee754_pow+0x388>)
 800a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05e:	4604      	mov	r4, r0
 800a060:	460d      	mov	r5, r1
 800a062:	f7f6 fa75 	bl	8000550 <__aeabi_dmul>
 800a066:	a354      	add	r3, pc, #336	; (adr r3, 800a1b8 <__ieee754_pow+0x390>)
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	4606      	mov	r6, r0
 800a06e:	460f      	mov	r7, r1
 800a070:	4620      	mov	r0, r4
 800a072:	4629      	mov	r1, r5
 800a074:	f7f6 fa6c 	bl	8000550 <__aeabi_dmul>
 800a078:	2200      	movs	r2, #0
 800a07a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a07e:	4b59      	ldr	r3, [pc, #356]	; (800a1e4 <__ieee754_pow+0x3bc>)
 800a080:	4620      	mov	r0, r4
 800a082:	4629      	mov	r1, r5
 800a084:	f7f6 fa64 	bl	8000550 <__aeabi_dmul>
 800a088:	4602      	mov	r2, r0
 800a08a:	460b      	mov	r3, r1
 800a08c:	a14c      	add	r1, pc, #304	; (adr r1, 800a1c0 <__ieee754_pow+0x398>)
 800a08e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a092:	f7f6 f8a5 	bl	80001e0 <__aeabi_dsub>
 800a096:	4622      	mov	r2, r4
 800a098:	462b      	mov	r3, r5
 800a09a:	f7f6 fa59 	bl	8000550 <__aeabi_dmul>
 800a09e:	4602      	mov	r2, r0
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	4950      	ldr	r1, [pc, #320]	; (800a1e8 <__ieee754_pow+0x3c0>)
 800a0a6:	f7f6 f89b 	bl	80001e0 <__aeabi_dsub>
 800a0aa:	4622      	mov	r2, r4
 800a0ac:	462b      	mov	r3, r5
 800a0ae:	4680      	mov	r8, r0
 800a0b0:	4689      	mov	r9, r1
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	f7f6 fa4b 	bl	8000550 <__aeabi_dmul>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4640      	mov	r0, r8
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	f7f6 fa45 	bl	8000550 <__aeabi_dmul>
 800a0c6:	a340      	add	r3, pc, #256	; (adr r3, 800a1c8 <__ieee754_pow+0x3a0>)
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	f7f6 fa40 	bl	8000550 <__aeabi_dmul>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0d8:	f7f6 f882 	bl	80001e0 <__aeabi_dsub>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	460d      	mov	r5, r1
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	4639      	mov	r1, r7
 800a0e8:	f7f6 f87c 	bl	80001e4 <__adddf3>
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0f2:	4632      	mov	r2, r6
 800a0f4:	463b      	mov	r3, r7
 800a0f6:	f7f6 f873 	bl	80001e0 <__aeabi_dsub>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	4620      	mov	r0, r4
 800a100:	4629      	mov	r1, r5
 800a102:	f7f6 f86d 	bl	80001e0 <__aeabi_dsub>
 800a106:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a108:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a10c:	4313      	orrs	r3, r2
 800a10e:	4606      	mov	r6, r0
 800a110:	460f      	mov	r7, r1
 800a112:	f040 81eb 	bne.w	800a4ec <__ieee754_pow+0x6c4>
 800a116:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a1d0 <__ieee754_pow+0x3a8>
 800a11a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a11e:	2400      	movs	r4, #0
 800a120:	4622      	mov	r2, r4
 800a122:	462b      	mov	r3, r5
 800a124:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a128:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a12c:	f7f6 f858 	bl	80001e0 <__aeabi_dsub>
 800a130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a134:	f7f6 fa0c 	bl	8000550 <__aeabi_dmul>
 800a138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a13c:	4680      	mov	r8, r0
 800a13e:	4689      	mov	r9, r1
 800a140:	4630      	mov	r0, r6
 800a142:	4639      	mov	r1, r7
 800a144:	f7f6 fa04 	bl	8000550 <__aeabi_dmul>
 800a148:	4602      	mov	r2, r0
 800a14a:	460b      	mov	r3, r1
 800a14c:	4640      	mov	r0, r8
 800a14e:	4649      	mov	r1, r9
 800a150:	f7f6 f848 	bl	80001e4 <__adddf3>
 800a154:	4622      	mov	r2, r4
 800a156:	462b      	mov	r3, r5
 800a158:	4680      	mov	r8, r0
 800a15a:	4689      	mov	r9, r1
 800a15c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a160:	f7f6 f9f6 	bl	8000550 <__aeabi_dmul>
 800a164:	460b      	mov	r3, r1
 800a166:	4604      	mov	r4, r0
 800a168:	460d      	mov	r5, r1
 800a16a:	4602      	mov	r2, r0
 800a16c:	4649      	mov	r1, r9
 800a16e:	4640      	mov	r0, r8
 800a170:	e9cd 4500 	strd	r4, r5, [sp]
 800a174:	f7f6 f836 	bl	80001e4 <__adddf3>
 800a178:	4b1c      	ldr	r3, [pc, #112]	; (800a1ec <__ieee754_pow+0x3c4>)
 800a17a:	4299      	cmp	r1, r3
 800a17c:	4606      	mov	r6, r0
 800a17e:	460f      	mov	r7, r1
 800a180:	468b      	mov	fp, r1
 800a182:	f340 82f7 	ble.w	800a774 <__ieee754_pow+0x94c>
 800a186:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a18a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a18e:	4303      	orrs	r3, r0
 800a190:	f000 81ea 	beq.w	800a568 <__ieee754_pow+0x740>
 800a194:	a310      	add	r3, pc, #64	; (adr r3, 800a1d8 <__ieee754_pow+0x3b0>)
 800a196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a19e:	f7f6 f9d7 	bl	8000550 <__aeabi_dmul>
 800a1a2:	a30d      	add	r3, pc, #52	; (adr r3, 800a1d8 <__ieee754_pow+0x3b0>)
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	e6d5      	b.n	8009f56 <__ieee754_pow+0x12e>
 800a1aa:	bf00      	nop
 800a1ac:	f3af 8000 	nop.w
 800a1b0:	60000000 	.word	0x60000000
 800a1b4:	3ff71547 	.word	0x3ff71547
 800a1b8:	f85ddf44 	.word	0xf85ddf44
 800a1bc:	3e54ae0b 	.word	0x3e54ae0b
 800a1c0:	55555555 	.word	0x55555555
 800a1c4:	3fd55555 	.word	0x3fd55555
 800a1c8:	652b82fe 	.word	0x652b82fe
 800a1cc:	3ff71547 	.word	0x3ff71547
 800a1d0:	00000000 	.word	0x00000000
 800a1d4:	bff00000 	.word	0xbff00000
 800a1d8:	8800759c 	.word	0x8800759c
 800a1dc:	7e37e43c 	.word	0x7e37e43c
 800a1e0:	3ff00000 	.word	0x3ff00000
 800a1e4:	3fd00000 	.word	0x3fd00000
 800a1e8:	3fe00000 	.word	0x3fe00000
 800a1ec:	408fffff 	.word	0x408fffff
 800a1f0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a1f4:	f04f 0200 	mov.w	r2, #0
 800a1f8:	da05      	bge.n	800a206 <__ieee754_pow+0x3de>
 800a1fa:	4bd3      	ldr	r3, [pc, #844]	; (800a548 <__ieee754_pow+0x720>)
 800a1fc:	f7f6 f9a8 	bl	8000550 <__aeabi_dmul>
 800a200:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a204:	460c      	mov	r4, r1
 800a206:	1523      	asrs	r3, r4, #20
 800a208:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a20c:	4413      	add	r3, r2
 800a20e:	9309      	str	r3, [sp, #36]	; 0x24
 800a210:	4bce      	ldr	r3, [pc, #824]	; (800a54c <__ieee754_pow+0x724>)
 800a212:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a216:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a21a:	429c      	cmp	r4, r3
 800a21c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a220:	dd08      	ble.n	800a234 <__ieee754_pow+0x40c>
 800a222:	4bcb      	ldr	r3, [pc, #812]	; (800a550 <__ieee754_pow+0x728>)
 800a224:	429c      	cmp	r4, r3
 800a226:	f340 815e 	ble.w	800a4e6 <__ieee754_pow+0x6be>
 800a22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a22c:	3301      	adds	r3, #1
 800a22e:	9309      	str	r3, [sp, #36]	; 0x24
 800a230:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a234:	f04f 0a00 	mov.w	sl, #0
 800a238:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a23c:	930c      	str	r3, [sp, #48]	; 0x30
 800a23e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a240:	4bc4      	ldr	r3, [pc, #784]	; (800a554 <__ieee754_pow+0x72c>)
 800a242:	4413      	add	r3, r2
 800a244:	ed93 7b00 	vldr	d7, [r3]
 800a248:	4629      	mov	r1, r5
 800a24a:	ec53 2b17 	vmov	r2, r3, d7
 800a24e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a252:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a256:	f7f5 ffc3 	bl	80001e0 <__aeabi_dsub>
 800a25a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a25e:	4606      	mov	r6, r0
 800a260:	460f      	mov	r7, r1
 800a262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a266:	f7f5 ffbd 	bl	80001e4 <__adddf3>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	2000      	movs	r0, #0
 800a270:	49b9      	ldr	r1, [pc, #740]	; (800a558 <__ieee754_pow+0x730>)
 800a272:	f7f6 fa97 	bl	80007a4 <__aeabi_ddiv>
 800a276:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	4630      	mov	r0, r6
 800a280:	4639      	mov	r1, r7
 800a282:	f7f6 f965 	bl	8000550 <__aeabi_dmul>
 800a286:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a28a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a28e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a292:	2300      	movs	r3, #0
 800a294:	9302      	str	r3, [sp, #8]
 800a296:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a29a:	106d      	asrs	r5, r5, #1
 800a29c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a2a0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a2aa:	4640      	mov	r0, r8
 800a2ac:	4649      	mov	r1, r9
 800a2ae:	4614      	mov	r4, r2
 800a2b0:	461d      	mov	r5, r3
 800a2b2:	f7f6 f94d 	bl	8000550 <__aeabi_dmul>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	4639      	mov	r1, r7
 800a2be:	f7f5 ff8f 	bl	80001e0 <__aeabi_dsub>
 800a2c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	460f      	mov	r7, r1
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	4629      	mov	r1, r5
 800a2ce:	f7f5 ff87 	bl	80001e0 <__aeabi_dsub>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a2da:	f7f5 ff81 	bl	80001e0 <__aeabi_dsub>
 800a2de:	4642      	mov	r2, r8
 800a2e0:	464b      	mov	r3, r9
 800a2e2:	f7f6 f935 	bl	8000550 <__aeabi_dmul>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	4639      	mov	r1, r7
 800a2ee:	f7f5 ff77 	bl	80001e0 <__aeabi_dsub>
 800a2f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a2f6:	f7f6 f92b 	bl	8000550 <__aeabi_dmul>
 800a2fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a302:	4610      	mov	r0, r2
 800a304:	4619      	mov	r1, r3
 800a306:	f7f6 f923 	bl	8000550 <__aeabi_dmul>
 800a30a:	a37b      	add	r3, pc, #492	; (adr r3, 800a4f8 <__ieee754_pow+0x6d0>)
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	4604      	mov	r4, r0
 800a312:	460d      	mov	r5, r1
 800a314:	f7f6 f91c 	bl	8000550 <__aeabi_dmul>
 800a318:	a379      	add	r3, pc, #484	; (adr r3, 800a500 <__ieee754_pow+0x6d8>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f7f5 ff61 	bl	80001e4 <__adddf3>
 800a322:	4622      	mov	r2, r4
 800a324:	462b      	mov	r3, r5
 800a326:	f7f6 f913 	bl	8000550 <__aeabi_dmul>
 800a32a:	a377      	add	r3, pc, #476	; (adr r3, 800a508 <__ieee754_pow+0x6e0>)
 800a32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a330:	f7f5 ff58 	bl	80001e4 <__adddf3>
 800a334:	4622      	mov	r2, r4
 800a336:	462b      	mov	r3, r5
 800a338:	f7f6 f90a 	bl	8000550 <__aeabi_dmul>
 800a33c:	a374      	add	r3, pc, #464	; (adr r3, 800a510 <__ieee754_pow+0x6e8>)
 800a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a342:	f7f5 ff4f 	bl	80001e4 <__adddf3>
 800a346:	4622      	mov	r2, r4
 800a348:	462b      	mov	r3, r5
 800a34a:	f7f6 f901 	bl	8000550 <__aeabi_dmul>
 800a34e:	a372      	add	r3, pc, #456	; (adr r3, 800a518 <__ieee754_pow+0x6f0>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	f7f5 ff46 	bl	80001e4 <__adddf3>
 800a358:	4622      	mov	r2, r4
 800a35a:	462b      	mov	r3, r5
 800a35c:	f7f6 f8f8 	bl	8000550 <__aeabi_dmul>
 800a360:	a36f      	add	r3, pc, #444	; (adr r3, 800a520 <__ieee754_pow+0x6f8>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	f7f5 ff3d 	bl	80001e4 <__adddf3>
 800a36a:	4622      	mov	r2, r4
 800a36c:	4606      	mov	r6, r0
 800a36e:	460f      	mov	r7, r1
 800a370:	462b      	mov	r3, r5
 800a372:	4620      	mov	r0, r4
 800a374:	4629      	mov	r1, r5
 800a376:	f7f6 f8eb 	bl	8000550 <__aeabi_dmul>
 800a37a:	4602      	mov	r2, r0
 800a37c:	460b      	mov	r3, r1
 800a37e:	4630      	mov	r0, r6
 800a380:	4639      	mov	r1, r7
 800a382:	f7f6 f8e5 	bl	8000550 <__aeabi_dmul>
 800a386:	4642      	mov	r2, r8
 800a388:	4604      	mov	r4, r0
 800a38a:	460d      	mov	r5, r1
 800a38c:	464b      	mov	r3, r9
 800a38e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a392:	f7f5 ff27 	bl	80001e4 <__adddf3>
 800a396:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a39a:	f7f6 f8d9 	bl	8000550 <__aeabi_dmul>
 800a39e:	4622      	mov	r2, r4
 800a3a0:	462b      	mov	r3, r5
 800a3a2:	f7f5 ff1f 	bl	80001e4 <__adddf3>
 800a3a6:	4642      	mov	r2, r8
 800a3a8:	4606      	mov	r6, r0
 800a3aa:	460f      	mov	r7, r1
 800a3ac:	464b      	mov	r3, r9
 800a3ae:	4640      	mov	r0, r8
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	f7f6 f8cd 	bl	8000550 <__aeabi_dmul>
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	4b68      	ldr	r3, [pc, #416]	; (800a55c <__ieee754_pow+0x734>)
 800a3ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a3be:	f7f5 ff11 	bl	80001e4 <__adddf3>
 800a3c2:	4632      	mov	r2, r6
 800a3c4:	463b      	mov	r3, r7
 800a3c6:	f7f5 ff0d 	bl	80001e4 <__adddf3>
 800a3ca:	9802      	ldr	r0, [sp, #8]
 800a3cc:	460d      	mov	r5, r1
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4640      	mov	r0, r8
 800a3d6:	4649      	mov	r1, r9
 800a3d8:	f7f6 f8ba 	bl	8000550 <__aeabi_dmul>
 800a3dc:	2200      	movs	r2, #0
 800a3de:	4680      	mov	r8, r0
 800a3e0:	4689      	mov	r9, r1
 800a3e2:	4b5e      	ldr	r3, [pc, #376]	; (800a55c <__ieee754_pow+0x734>)
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7f5 fefa 	bl	80001e0 <__aeabi_dsub>
 800a3ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a3f0:	f7f5 fef6 	bl	80001e0 <__aeabi_dsub>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	4639      	mov	r1, r7
 800a3fc:	f7f5 fef0 	bl	80001e0 <__aeabi_dsub>
 800a400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a404:	f7f6 f8a4 	bl	8000550 <__aeabi_dmul>
 800a408:	4622      	mov	r2, r4
 800a40a:	4606      	mov	r6, r0
 800a40c:	460f      	mov	r7, r1
 800a40e:	462b      	mov	r3, r5
 800a410:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a414:	f7f6 f89c 	bl	8000550 <__aeabi_dmul>
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	4630      	mov	r0, r6
 800a41e:	4639      	mov	r1, r7
 800a420:	f7f5 fee0 	bl	80001e4 <__adddf3>
 800a424:	4606      	mov	r6, r0
 800a426:	460f      	mov	r7, r1
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	4640      	mov	r0, r8
 800a42e:	4649      	mov	r1, r9
 800a430:	f7f5 fed8 	bl	80001e4 <__adddf3>
 800a434:	9802      	ldr	r0, [sp, #8]
 800a436:	a33c      	add	r3, pc, #240	; (adr r3, 800a528 <__ieee754_pow+0x700>)
 800a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43c:	4604      	mov	r4, r0
 800a43e:	460d      	mov	r5, r1
 800a440:	f7f6 f886 	bl	8000550 <__aeabi_dmul>
 800a444:	4642      	mov	r2, r8
 800a446:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a44a:	464b      	mov	r3, r9
 800a44c:	4620      	mov	r0, r4
 800a44e:	4629      	mov	r1, r5
 800a450:	f7f5 fec6 	bl	80001e0 <__aeabi_dsub>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	4630      	mov	r0, r6
 800a45a:	4639      	mov	r1, r7
 800a45c:	f7f5 fec0 	bl	80001e0 <__aeabi_dsub>
 800a460:	a333      	add	r3, pc, #204	; (adr r3, 800a530 <__ieee754_pow+0x708>)
 800a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a466:	f7f6 f873 	bl	8000550 <__aeabi_dmul>
 800a46a:	a333      	add	r3, pc, #204	; (adr r3, 800a538 <__ieee754_pow+0x710>)
 800a46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a470:	4606      	mov	r6, r0
 800a472:	460f      	mov	r7, r1
 800a474:	4620      	mov	r0, r4
 800a476:	4629      	mov	r1, r5
 800a478:	f7f6 f86a 	bl	8000550 <__aeabi_dmul>
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	4630      	mov	r0, r6
 800a482:	4639      	mov	r1, r7
 800a484:	f7f5 feae 	bl	80001e4 <__adddf3>
 800a488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a48a:	4b35      	ldr	r3, [pc, #212]	; (800a560 <__ieee754_pow+0x738>)
 800a48c:	4413      	add	r3, r2
 800a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a492:	f7f5 fea7 	bl	80001e4 <__adddf3>
 800a496:	4604      	mov	r4, r0
 800a498:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a49a:	460d      	mov	r5, r1
 800a49c:	f7f5 ffee 	bl	800047c <__aeabi_i2d>
 800a4a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4a2:	4b30      	ldr	r3, [pc, #192]	; (800a564 <__ieee754_pow+0x73c>)
 800a4a4:	4413      	add	r3, r2
 800a4a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4aa:	4606      	mov	r6, r0
 800a4ac:	460f      	mov	r7, r1
 800a4ae:	4622      	mov	r2, r4
 800a4b0:	462b      	mov	r3, r5
 800a4b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4b6:	f7f5 fe95 	bl	80001e4 <__adddf3>
 800a4ba:	4642      	mov	r2, r8
 800a4bc:	464b      	mov	r3, r9
 800a4be:	f7f5 fe91 	bl	80001e4 <__adddf3>
 800a4c2:	4632      	mov	r2, r6
 800a4c4:	463b      	mov	r3, r7
 800a4c6:	f7f5 fe8d 	bl	80001e4 <__adddf3>
 800a4ca:	9802      	ldr	r0, [sp, #8]
 800a4cc:	4632      	mov	r2, r6
 800a4ce:	463b      	mov	r3, r7
 800a4d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4d4:	f7f5 fe84 	bl	80001e0 <__aeabi_dsub>
 800a4d8:	4642      	mov	r2, r8
 800a4da:	464b      	mov	r3, r9
 800a4dc:	f7f5 fe80 	bl	80001e0 <__aeabi_dsub>
 800a4e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4e4:	e607      	b.n	800a0f6 <__ieee754_pow+0x2ce>
 800a4e6:	f04f 0a01 	mov.w	sl, #1
 800a4ea:	e6a5      	b.n	800a238 <__ieee754_pow+0x410>
 800a4ec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a540 <__ieee754_pow+0x718>
 800a4f0:	e613      	b.n	800a11a <__ieee754_pow+0x2f2>
 800a4f2:	bf00      	nop
 800a4f4:	f3af 8000 	nop.w
 800a4f8:	4a454eef 	.word	0x4a454eef
 800a4fc:	3fca7e28 	.word	0x3fca7e28
 800a500:	93c9db65 	.word	0x93c9db65
 800a504:	3fcd864a 	.word	0x3fcd864a
 800a508:	a91d4101 	.word	0xa91d4101
 800a50c:	3fd17460 	.word	0x3fd17460
 800a510:	518f264d 	.word	0x518f264d
 800a514:	3fd55555 	.word	0x3fd55555
 800a518:	db6fabff 	.word	0xdb6fabff
 800a51c:	3fdb6db6 	.word	0x3fdb6db6
 800a520:	33333303 	.word	0x33333303
 800a524:	3fe33333 	.word	0x3fe33333
 800a528:	e0000000 	.word	0xe0000000
 800a52c:	3feec709 	.word	0x3feec709
 800a530:	dc3a03fd 	.word	0xdc3a03fd
 800a534:	3feec709 	.word	0x3feec709
 800a538:	145b01f5 	.word	0x145b01f5
 800a53c:	be3e2fe0 	.word	0xbe3e2fe0
 800a540:	00000000 	.word	0x00000000
 800a544:	3ff00000 	.word	0x3ff00000
 800a548:	43400000 	.word	0x43400000
 800a54c:	0003988e 	.word	0x0003988e
 800a550:	000bb679 	.word	0x000bb679
 800a554:	0800aeb0 	.word	0x0800aeb0
 800a558:	3ff00000 	.word	0x3ff00000
 800a55c:	40080000 	.word	0x40080000
 800a560:	0800aed0 	.word	0x0800aed0
 800a564:	0800aec0 	.word	0x0800aec0
 800a568:	a3b4      	add	r3, pc, #720	; (adr r3, 800a83c <__ieee754_pow+0xa14>)
 800a56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56e:	4640      	mov	r0, r8
 800a570:	4649      	mov	r1, r9
 800a572:	f7f5 fe37 	bl	80001e4 <__adddf3>
 800a576:	4622      	mov	r2, r4
 800a578:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a57c:	462b      	mov	r3, r5
 800a57e:	4630      	mov	r0, r6
 800a580:	4639      	mov	r1, r7
 800a582:	f7f5 fe2d 	bl	80001e0 <__aeabi_dsub>
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a58e:	f7f6 fa6f 	bl	8000a70 <__aeabi_dcmpgt>
 800a592:	2800      	cmp	r0, #0
 800a594:	f47f adfe 	bne.w	800a194 <__ieee754_pow+0x36c>
 800a598:	4aa3      	ldr	r2, [pc, #652]	; (800a828 <__ieee754_pow+0xa00>)
 800a59a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	f340 810a 	ble.w	800a7b8 <__ieee754_pow+0x990>
 800a5a4:	151b      	asrs	r3, r3, #20
 800a5a6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a5aa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a5ae:	fa4a f303 	asr.w	r3, sl, r3
 800a5b2:	445b      	add	r3, fp
 800a5b4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a5b8:	4e9c      	ldr	r6, [pc, #624]	; (800a82c <__ieee754_pow+0xa04>)
 800a5ba:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a5be:	4116      	asrs	r6, r2
 800a5c0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	ea23 0106 	bic.w	r1, r3, r6
 800a5ca:	f1c2 0214 	rsb	r2, r2, #20
 800a5ce:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a5d2:	fa4a fa02 	asr.w	sl, sl, r2
 800a5d6:	f1bb 0f00 	cmp.w	fp, #0
 800a5da:	4602      	mov	r2, r0
 800a5dc:	460b      	mov	r3, r1
 800a5de:	4620      	mov	r0, r4
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	bfb8      	it	lt
 800a5e4:	f1ca 0a00 	rsblt	sl, sl, #0
 800a5e8:	f7f5 fdfa 	bl	80001e0 <__aeabi_dsub>
 800a5ec:	e9cd 0100 	strd	r0, r1, [sp]
 800a5f0:	4642      	mov	r2, r8
 800a5f2:	464b      	mov	r3, r9
 800a5f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5f8:	f7f5 fdf4 	bl	80001e4 <__adddf3>
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	a378      	add	r3, pc, #480	; (adr r3, 800a7e0 <__ieee754_pow+0x9b8>)
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	4604      	mov	r4, r0
 800a606:	460d      	mov	r5, r1
 800a608:	f7f5 ffa2 	bl	8000550 <__aeabi_dmul>
 800a60c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a610:	4606      	mov	r6, r0
 800a612:	460f      	mov	r7, r1
 800a614:	4620      	mov	r0, r4
 800a616:	4629      	mov	r1, r5
 800a618:	f7f5 fde2 	bl	80001e0 <__aeabi_dsub>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	4640      	mov	r0, r8
 800a622:	4649      	mov	r1, r9
 800a624:	f7f5 fddc 	bl	80001e0 <__aeabi_dsub>
 800a628:	a36f      	add	r3, pc, #444	; (adr r3, 800a7e8 <__ieee754_pow+0x9c0>)
 800a62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62e:	f7f5 ff8f 	bl	8000550 <__aeabi_dmul>
 800a632:	a36f      	add	r3, pc, #444	; (adr r3, 800a7f0 <__ieee754_pow+0x9c8>)
 800a634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a638:	4680      	mov	r8, r0
 800a63a:	4689      	mov	r9, r1
 800a63c:	4620      	mov	r0, r4
 800a63e:	4629      	mov	r1, r5
 800a640:	f7f5 ff86 	bl	8000550 <__aeabi_dmul>
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	4640      	mov	r0, r8
 800a64a:	4649      	mov	r1, r9
 800a64c:	f7f5 fdca 	bl	80001e4 <__adddf3>
 800a650:	4604      	mov	r4, r0
 800a652:	460d      	mov	r5, r1
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	4630      	mov	r0, r6
 800a65a:	4639      	mov	r1, r7
 800a65c:	f7f5 fdc2 	bl	80001e4 <__adddf3>
 800a660:	4632      	mov	r2, r6
 800a662:	463b      	mov	r3, r7
 800a664:	4680      	mov	r8, r0
 800a666:	4689      	mov	r9, r1
 800a668:	f7f5 fdba 	bl	80001e0 <__aeabi_dsub>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	4620      	mov	r0, r4
 800a672:	4629      	mov	r1, r5
 800a674:	f7f5 fdb4 	bl	80001e0 <__aeabi_dsub>
 800a678:	4642      	mov	r2, r8
 800a67a:	4606      	mov	r6, r0
 800a67c:	460f      	mov	r7, r1
 800a67e:	464b      	mov	r3, r9
 800a680:	4640      	mov	r0, r8
 800a682:	4649      	mov	r1, r9
 800a684:	f7f5 ff64 	bl	8000550 <__aeabi_dmul>
 800a688:	a35b      	add	r3, pc, #364	; (adr r3, 800a7f8 <__ieee754_pow+0x9d0>)
 800a68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68e:	4604      	mov	r4, r0
 800a690:	460d      	mov	r5, r1
 800a692:	f7f5 ff5d 	bl	8000550 <__aeabi_dmul>
 800a696:	a35a      	add	r3, pc, #360	; (adr r3, 800a800 <__ieee754_pow+0x9d8>)
 800a698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69c:	f7f5 fda0 	bl	80001e0 <__aeabi_dsub>
 800a6a0:	4622      	mov	r2, r4
 800a6a2:	462b      	mov	r3, r5
 800a6a4:	f7f5 ff54 	bl	8000550 <__aeabi_dmul>
 800a6a8:	a357      	add	r3, pc, #348	; (adr r3, 800a808 <__ieee754_pow+0x9e0>)
 800a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ae:	f7f5 fd99 	bl	80001e4 <__adddf3>
 800a6b2:	4622      	mov	r2, r4
 800a6b4:	462b      	mov	r3, r5
 800a6b6:	f7f5 ff4b 	bl	8000550 <__aeabi_dmul>
 800a6ba:	a355      	add	r3, pc, #340	; (adr r3, 800a810 <__ieee754_pow+0x9e8>)
 800a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c0:	f7f5 fd8e 	bl	80001e0 <__aeabi_dsub>
 800a6c4:	4622      	mov	r2, r4
 800a6c6:	462b      	mov	r3, r5
 800a6c8:	f7f5 ff42 	bl	8000550 <__aeabi_dmul>
 800a6cc:	a352      	add	r3, pc, #328	; (adr r3, 800a818 <__ieee754_pow+0x9f0>)
 800a6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d2:	f7f5 fd87 	bl	80001e4 <__adddf3>
 800a6d6:	4622      	mov	r2, r4
 800a6d8:	462b      	mov	r3, r5
 800a6da:	f7f5 ff39 	bl	8000550 <__aeabi_dmul>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4640      	mov	r0, r8
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	f7f5 fd7b 	bl	80001e0 <__aeabi_dsub>
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	460d      	mov	r5, r1
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	4640      	mov	r0, r8
 800a6f4:	4649      	mov	r1, r9
 800a6f6:	f7f5 ff2b 	bl	8000550 <__aeabi_dmul>
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	e9cd 0100 	strd	r0, r1, [sp]
 800a700:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a704:	4620      	mov	r0, r4
 800a706:	4629      	mov	r1, r5
 800a708:	f7f5 fd6a 	bl	80001e0 <__aeabi_dsub>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a714:	f7f6 f846 	bl	80007a4 <__aeabi_ddiv>
 800a718:	4632      	mov	r2, r6
 800a71a:	4604      	mov	r4, r0
 800a71c:	460d      	mov	r5, r1
 800a71e:	463b      	mov	r3, r7
 800a720:	4640      	mov	r0, r8
 800a722:	4649      	mov	r1, r9
 800a724:	f7f5 ff14 	bl	8000550 <__aeabi_dmul>
 800a728:	4632      	mov	r2, r6
 800a72a:	463b      	mov	r3, r7
 800a72c:	f7f5 fd5a 	bl	80001e4 <__adddf3>
 800a730:	4602      	mov	r2, r0
 800a732:	460b      	mov	r3, r1
 800a734:	4620      	mov	r0, r4
 800a736:	4629      	mov	r1, r5
 800a738:	f7f5 fd52 	bl	80001e0 <__aeabi_dsub>
 800a73c:	4642      	mov	r2, r8
 800a73e:	464b      	mov	r3, r9
 800a740:	f7f5 fd4e 	bl	80001e0 <__aeabi_dsub>
 800a744:	4602      	mov	r2, r0
 800a746:	460b      	mov	r3, r1
 800a748:	2000      	movs	r0, #0
 800a74a:	4939      	ldr	r1, [pc, #228]	; (800a830 <__ieee754_pow+0xa08>)
 800a74c:	f7f5 fd48 	bl	80001e0 <__aeabi_dsub>
 800a750:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a754:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	da2f      	bge.n	800a7be <__ieee754_pow+0x996>
 800a75e:	4650      	mov	r0, sl
 800a760:	ec43 2b10 	vmov	d0, r2, r3
 800a764:	f000 f9b4 	bl	800aad0 <scalbn>
 800a768:	ec51 0b10 	vmov	r0, r1, d0
 800a76c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a770:	f7ff bbf1 	b.w	8009f56 <__ieee754_pow+0x12e>
 800a774:	4b2f      	ldr	r3, [pc, #188]	; (800a834 <__ieee754_pow+0xa0c>)
 800a776:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a77a:	429e      	cmp	r6, r3
 800a77c:	f77f af0c 	ble.w	800a598 <__ieee754_pow+0x770>
 800a780:	4b2d      	ldr	r3, [pc, #180]	; (800a838 <__ieee754_pow+0xa10>)
 800a782:	440b      	add	r3, r1
 800a784:	4303      	orrs	r3, r0
 800a786:	d00b      	beq.n	800a7a0 <__ieee754_pow+0x978>
 800a788:	a325      	add	r3, pc, #148	; (adr r3, 800a820 <__ieee754_pow+0x9f8>)
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a792:	f7f5 fedd 	bl	8000550 <__aeabi_dmul>
 800a796:	a322      	add	r3, pc, #136	; (adr r3, 800a820 <__ieee754_pow+0x9f8>)
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	f7ff bbdb 	b.w	8009f56 <__ieee754_pow+0x12e>
 800a7a0:	4622      	mov	r2, r4
 800a7a2:	462b      	mov	r3, r5
 800a7a4:	f7f5 fd1c 	bl	80001e0 <__aeabi_dsub>
 800a7a8:	4642      	mov	r2, r8
 800a7aa:	464b      	mov	r3, r9
 800a7ac:	f7f6 f956 	bl	8000a5c <__aeabi_dcmpge>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	f43f aef1 	beq.w	800a598 <__ieee754_pow+0x770>
 800a7b6:	e7e7      	b.n	800a788 <__ieee754_pow+0x960>
 800a7b8:	f04f 0a00 	mov.w	sl, #0
 800a7bc:	e718      	b.n	800a5f0 <__ieee754_pow+0x7c8>
 800a7be:	4621      	mov	r1, r4
 800a7c0:	e7d4      	b.n	800a76c <__ieee754_pow+0x944>
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	491a      	ldr	r1, [pc, #104]	; (800a830 <__ieee754_pow+0xa08>)
 800a7c6:	f7ff bb8f 	b.w	8009ee8 <__ieee754_pow+0xc0>
 800a7ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7ce:	f7ff bb8b 	b.w	8009ee8 <__ieee754_pow+0xc0>
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	f7ff bb87 	b.w	8009ee8 <__ieee754_pow+0xc0>
 800a7da:	4693      	mov	fp, r2
 800a7dc:	f7ff bb98 	b.w	8009f10 <__ieee754_pow+0xe8>
 800a7e0:	00000000 	.word	0x00000000
 800a7e4:	3fe62e43 	.word	0x3fe62e43
 800a7e8:	fefa39ef 	.word	0xfefa39ef
 800a7ec:	3fe62e42 	.word	0x3fe62e42
 800a7f0:	0ca86c39 	.word	0x0ca86c39
 800a7f4:	be205c61 	.word	0xbe205c61
 800a7f8:	72bea4d0 	.word	0x72bea4d0
 800a7fc:	3e663769 	.word	0x3e663769
 800a800:	c5d26bf1 	.word	0xc5d26bf1
 800a804:	3ebbbd41 	.word	0x3ebbbd41
 800a808:	af25de2c 	.word	0xaf25de2c
 800a80c:	3f11566a 	.word	0x3f11566a
 800a810:	16bebd93 	.word	0x16bebd93
 800a814:	3f66c16c 	.word	0x3f66c16c
 800a818:	5555553e 	.word	0x5555553e
 800a81c:	3fc55555 	.word	0x3fc55555
 800a820:	c2f8f359 	.word	0xc2f8f359
 800a824:	01a56e1f 	.word	0x01a56e1f
 800a828:	3fe00000 	.word	0x3fe00000
 800a82c:	000fffff 	.word	0x000fffff
 800a830:	3ff00000 	.word	0x3ff00000
 800a834:	4090cbff 	.word	0x4090cbff
 800a838:	3f6f3400 	.word	0x3f6f3400
 800a83c:	652b82fe 	.word	0x652b82fe
 800a840:	3c971547 	.word	0x3c971547

0800a844 <__ieee754_sqrt>:
 800a844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a848:	4955      	ldr	r1, [pc, #340]	; (800a9a0 <__ieee754_sqrt+0x15c>)
 800a84a:	ec55 4b10 	vmov	r4, r5, d0
 800a84e:	43a9      	bics	r1, r5
 800a850:	462b      	mov	r3, r5
 800a852:	462a      	mov	r2, r5
 800a854:	d112      	bne.n	800a87c <__ieee754_sqrt+0x38>
 800a856:	ee10 2a10 	vmov	r2, s0
 800a85a:	ee10 0a10 	vmov	r0, s0
 800a85e:	4629      	mov	r1, r5
 800a860:	f7f5 fe76 	bl	8000550 <__aeabi_dmul>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	4620      	mov	r0, r4
 800a86a:	4629      	mov	r1, r5
 800a86c:	f7f5 fcba 	bl	80001e4 <__adddf3>
 800a870:	4604      	mov	r4, r0
 800a872:	460d      	mov	r5, r1
 800a874:	ec45 4b10 	vmov	d0, r4, r5
 800a878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a87c:	2d00      	cmp	r5, #0
 800a87e:	ee10 0a10 	vmov	r0, s0
 800a882:	4621      	mov	r1, r4
 800a884:	dc0f      	bgt.n	800a8a6 <__ieee754_sqrt+0x62>
 800a886:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a88a:	4330      	orrs	r0, r6
 800a88c:	d0f2      	beq.n	800a874 <__ieee754_sqrt+0x30>
 800a88e:	b155      	cbz	r5, 800a8a6 <__ieee754_sqrt+0x62>
 800a890:	ee10 2a10 	vmov	r2, s0
 800a894:	4620      	mov	r0, r4
 800a896:	4629      	mov	r1, r5
 800a898:	f7f5 fca2 	bl	80001e0 <__aeabi_dsub>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	f7f5 ff80 	bl	80007a4 <__aeabi_ddiv>
 800a8a4:	e7e4      	b.n	800a870 <__ieee754_sqrt+0x2c>
 800a8a6:	151b      	asrs	r3, r3, #20
 800a8a8:	d073      	beq.n	800a992 <__ieee754_sqrt+0x14e>
 800a8aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a8ae:	07dd      	lsls	r5, r3, #31
 800a8b0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a8b4:	bf48      	it	mi
 800a8b6:	0fc8      	lsrmi	r0, r1, #31
 800a8b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a8bc:	bf44      	itt	mi
 800a8be:	0049      	lslmi	r1, r1, #1
 800a8c0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a8c4:	2500      	movs	r5, #0
 800a8c6:	1058      	asrs	r0, r3, #1
 800a8c8:	0fcb      	lsrs	r3, r1, #31
 800a8ca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a8ce:	0049      	lsls	r1, r1, #1
 800a8d0:	2316      	movs	r3, #22
 800a8d2:	462c      	mov	r4, r5
 800a8d4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a8d8:	19a7      	adds	r7, r4, r6
 800a8da:	4297      	cmp	r7, r2
 800a8dc:	bfde      	ittt	le
 800a8de:	19bc      	addle	r4, r7, r6
 800a8e0:	1bd2      	suble	r2, r2, r7
 800a8e2:	19ad      	addle	r5, r5, r6
 800a8e4:	0fcf      	lsrs	r7, r1, #31
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a8ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a8f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a8f4:	d1f0      	bne.n	800a8d8 <__ieee754_sqrt+0x94>
 800a8f6:	f04f 0c20 	mov.w	ip, #32
 800a8fa:	469e      	mov	lr, r3
 800a8fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a900:	42a2      	cmp	r2, r4
 800a902:	eb06 070e 	add.w	r7, r6, lr
 800a906:	dc02      	bgt.n	800a90e <__ieee754_sqrt+0xca>
 800a908:	d112      	bne.n	800a930 <__ieee754_sqrt+0xec>
 800a90a:	428f      	cmp	r7, r1
 800a90c:	d810      	bhi.n	800a930 <__ieee754_sqrt+0xec>
 800a90e:	2f00      	cmp	r7, #0
 800a910:	eb07 0e06 	add.w	lr, r7, r6
 800a914:	da42      	bge.n	800a99c <__ieee754_sqrt+0x158>
 800a916:	f1be 0f00 	cmp.w	lr, #0
 800a91a:	db3f      	blt.n	800a99c <__ieee754_sqrt+0x158>
 800a91c:	f104 0801 	add.w	r8, r4, #1
 800a920:	1b12      	subs	r2, r2, r4
 800a922:	428f      	cmp	r7, r1
 800a924:	bf88      	it	hi
 800a926:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a92a:	1bc9      	subs	r1, r1, r7
 800a92c:	4433      	add	r3, r6
 800a92e:	4644      	mov	r4, r8
 800a930:	0052      	lsls	r2, r2, #1
 800a932:	f1bc 0c01 	subs.w	ip, ip, #1
 800a936:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a93a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a93e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a942:	d1dd      	bne.n	800a900 <__ieee754_sqrt+0xbc>
 800a944:	430a      	orrs	r2, r1
 800a946:	d006      	beq.n	800a956 <__ieee754_sqrt+0x112>
 800a948:	1c5c      	adds	r4, r3, #1
 800a94a:	bf13      	iteet	ne
 800a94c:	3301      	addne	r3, #1
 800a94e:	3501      	addeq	r5, #1
 800a950:	4663      	moveq	r3, ip
 800a952:	f023 0301 	bicne.w	r3, r3, #1
 800a956:	106a      	asrs	r2, r5, #1
 800a958:	085b      	lsrs	r3, r3, #1
 800a95a:	07e9      	lsls	r1, r5, #31
 800a95c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a960:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a964:	bf48      	it	mi
 800a966:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a96a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a96e:	461c      	mov	r4, r3
 800a970:	e780      	b.n	800a874 <__ieee754_sqrt+0x30>
 800a972:	0aca      	lsrs	r2, r1, #11
 800a974:	3815      	subs	r0, #21
 800a976:	0549      	lsls	r1, r1, #21
 800a978:	2a00      	cmp	r2, #0
 800a97a:	d0fa      	beq.n	800a972 <__ieee754_sqrt+0x12e>
 800a97c:	02d6      	lsls	r6, r2, #11
 800a97e:	d50a      	bpl.n	800a996 <__ieee754_sqrt+0x152>
 800a980:	f1c3 0420 	rsb	r4, r3, #32
 800a984:	fa21 f404 	lsr.w	r4, r1, r4
 800a988:	1e5d      	subs	r5, r3, #1
 800a98a:	4099      	lsls	r1, r3
 800a98c:	4322      	orrs	r2, r4
 800a98e:	1b43      	subs	r3, r0, r5
 800a990:	e78b      	b.n	800a8aa <__ieee754_sqrt+0x66>
 800a992:	4618      	mov	r0, r3
 800a994:	e7f0      	b.n	800a978 <__ieee754_sqrt+0x134>
 800a996:	0052      	lsls	r2, r2, #1
 800a998:	3301      	adds	r3, #1
 800a99a:	e7ef      	b.n	800a97c <__ieee754_sqrt+0x138>
 800a99c:	46a0      	mov	r8, r4
 800a99e:	e7bf      	b.n	800a920 <__ieee754_sqrt+0xdc>
 800a9a0:	7ff00000 	.word	0x7ff00000

0800a9a4 <finite>:
 800a9a4:	ee10 3a90 	vmov	r3, s1
 800a9a8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a9ac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a9b0:	0fc0      	lsrs	r0, r0, #31
 800a9b2:	4770      	bx	lr

0800a9b4 <matherr>:
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	4770      	bx	lr

0800a9b8 <nan>:
 800a9b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a9c0 <nan+0x8>
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	00000000 	.word	0x00000000
 800a9c4:	7ff80000 	.word	0x7ff80000

0800a9c8 <rint>:
 800a9c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9ca:	ec51 0b10 	vmov	r0, r1, d0
 800a9ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a9d2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a9d6:	2e13      	cmp	r6, #19
 800a9d8:	460b      	mov	r3, r1
 800a9da:	ee10 4a10 	vmov	r4, s0
 800a9de:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a9e2:	dc56      	bgt.n	800aa92 <rint+0xca>
 800a9e4:	2e00      	cmp	r6, #0
 800a9e6:	da2b      	bge.n	800aa40 <rint+0x78>
 800a9e8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a9ec:	4302      	orrs	r2, r0
 800a9ee:	d023      	beq.n	800aa38 <rint+0x70>
 800a9f0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a9f4:	4302      	orrs	r2, r0
 800a9f6:	4254      	negs	r4, r2
 800a9f8:	4314      	orrs	r4, r2
 800a9fa:	0c4b      	lsrs	r3, r1, #17
 800a9fc:	0b24      	lsrs	r4, r4, #12
 800a9fe:	045b      	lsls	r3, r3, #17
 800aa00:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800aa04:	ea44 0103 	orr.w	r1, r4, r3
 800aa08:	460b      	mov	r3, r1
 800aa0a:	492f      	ldr	r1, [pc, #188]	; (800aac8 <rint+0x100>)
 800aa0c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800aa10:	e9d1 6700 	ldrd	r6, r7, [r1]
 800aa14:	4602      	mov	r2, r0
 800aa16:	4639      	mov	r1, r7
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f7f5 fbe3 	bl	80001e4 <__adddf3>
 800aa1e:	e9cd 0100 	strd	r0, r1, [sp]
 800aa22:	463b      	mov	r3, r7
 800aa24:	4632      	mov	r2, r6
 800aa26:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa2a:	f7f5 fbd9 	bl	80001e0 <__aeabi_dsub>
 800aa2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa32:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800aa36:	4639      	mov	r1, r7
 800aa38:	ec41 0b10 	vmov	d0, r0, r1
 800aa3c:	b003      	add	sp, #12
 800aa3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa40:	4a22      	ldr	r2, [pc, #136]	; (800aacc <rint+0x104>)
 800aa42:	4132      	asrs	r2, r6
 800aa44:	ea01 0702 	and.w	r7, r1, r2
 800aa48:	4307      	orrs	r7, r0
 800aa4a:	d0f5      	beq.n	800aa38 <rint+0x70>
 800aa4c:	0852      	lsrs	r2, r2, #1
 800aa4e:	4011      	ands	r1, r2
 800aa50:	430c      	orrs	r4, r1
 800aa52:	d00b      	beq.n	800aa6c <rint+0xa4>
 800aa54:	ea23 0202 	bic.w	r2, r3, r2
 800aa58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aa5c:	2e13      	cmp	r6, #19
 800aa5e:	fa43 f306 	asr.w	r3, r3, r6
 800aa62:	bf0c      	ite	eq
 800aa64:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800aa68:	2400      	movne	r4, #0
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	4916      	ldr	r1, [pc, #88]	; (800aac8 <rint+0x100>)
 800aa6e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800aa72:	4622      	mov	r2, r4
 800aa74:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aa78:	4620      	mov	r0, r4
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	f7f5 fbb2 	bl	80001e4 <__adddf3>
 800aa80:	e9cd 0100 	strd	r0, r1, [sp]
 800aa84:	4622      	mov	r2, r4
 800aa86:	462b      	mov	r3, r5
 800aa88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa8c:	f7f5 fba8 	bl	80001e0 <__aeabi_dsub>
 800aa90:	e7d2      	b.n	800aa38 <rint+0x70>
 800aa92:	2e33      	cmp	r6, #51	; 0x33
 800aa94:	dd07      	ble.n	800aaa6 <rint+0xde>
 800aa96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aa9a:	d1cd      	bne.n	800aa38 <rint+0x70>
 800aa9c:	ee10 2a10 	vmov	r2, s0
 800aaa0:	f7f5 fba0 	bl	80001e4 <__adddf3>
 800aaa4:	e7c8      	b.n	800aa38 <rint+0x70>
 800aaa6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800aaaa:	f04f 32ff 	mov.w	r2, #4294967295
 800aaae:	40f2      	lsrs	r2, r6
 800aab0:	4210      	tst	r0, r2
 800aab2:	d0c1      	beq.n	800aa38 <rint+0x70>
 800aab4:	0852      	lsrs	r2, r2, #1
 800aab6:	4210      	tst	r0, r2
 800aab8:	bf1f      	itttt	ne
 800aaba:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800aabe:	ea20 0202 	bicne.w	r2, r0, r2
 800aac2:	4134      	asrne	r4, r6
 800aac4:	4314      	orrne	r4, r2
 800aac6:	e7d1      	b.n	800aa6c <rint+0xa4>
 800aac8:	0800aee0 	.word	0x0800aee0
 800aacc:	000fffff 	.word	0x000fffff

0800aad0 <scalbn>:
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	ec55 4b10 	vmov	r4, r5, d0
 800aad6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800aada:	4606      	mov	r6, r0
 800aadc:	462b      	mov	r3, r5
 800aade:	b9aa      	cbnz	r2, 800ab0c <scalbn+0x3c>
 800aae0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aae4:	4323      	orrs	r3, r4
 800aae6:	d03b      	beq.n	800ab60 <scalbn+0x90>
 800aae8:	4b31      	ldr	r3, [pc, #196]	; (800abb0 <scalbn+0xe0>)
 800aaea:	4629      	mov	r1, r5
 800aaec:	2200      	movs	r2, #0
 800aaee:	ee10 0a10 	vmov	r0, s0
 800aaf2:	f7f5 fd2d 	bl	8000550 <__aeabi_dmul>
 800aaf6:	4b2f      	ldr	r3, [pc, #188]	; (800abb4 <scalbn+0xe4>)
 800aaf8:	429e      	cmp	r6, r3
 800aafa:	4604      	mov	r4, r0
 800aafc:	460d      	mov	r5, r1
 800aafe:	da12      	bge.n	800ab26 <scalbn+0x56>
 800ab00:	a327      	add	r3, pc, #156	; (adr r3, 800aba0 <scalbn+0xd0>)
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	f7f5 fd23 	bl	8000550 <__aeabi_dmul>
 800ab0a:	e009      	b.n	800ab20 <scalbn+0x50>
 800ab0c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ab10:	428a      	cmp	r2, r1
 800ab12:	d10c      	bne.n	800ab2e <scalbn+0x5e>
 800ab14:	ee10 2a10 	vmov	r2, s0
 800ab18:	4620      	mov	r0, r4
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	f7f5 fb62 	bl	80001e4 <__adddf3>
 800ab20:	4604      	mov	r4, r0
 800ab22:	460d      	mov	r5, r1
 800ab24:	e01c      	b.n	800ab60 <scalbn+0x90>
 800ab26:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	3a36      	subs	r2, #54	; 0x36
 800ab2e:	4432      	add	r2, r6
 800ab30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ab34:	428a      	cmp	r2, r1
 800ab36:	dd0b      	ble.n	800ab50 <scalbn+0x80>
 800ab38:	ec45 4b11 	vmov	d1, r4, r5
 800ab3c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800aba8 <scalbn+0xd8>
 800ab40:	f000 f83c 	bl	800abbc <copysign>
 800ab44:	a318      	add	r3, pc, #96	; (adr r3, 800aba8 <scalbn+0xd8>)
 800ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4a:	ec51 0b10 	vmov	r0, r1, d0
 800ab4e:	e7da      	b.n	800ab06 <scalbn+0x36>
 800ab50:	2a00      	cmp	r2, #0
 800ab52:	dd08      	ble.n	800ab66 <scalbn+0x96>
 800ab54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ab5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab60:	ec45 4b10 	vmov	d0, r4, r5
 800ab64:	bd70      	pop	{r4, r5, r6, pc}
 800ab66:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ab6a:	da0d      	bge.n	800ab88 <scalbn+0xb8>
 800ab6c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ab70:	429e      	cmp	r6, r3
 800ab72:	ec45 4b11 	vmov	d1, r4, r5
 800ab76:	dce1      	bgt.n	800ab3c <scalbn+0x6c>
 800ab78:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800aba0 <scalbn+0xd0>
 800ab7c:	f000 f81e 	bl	800abbc <copysign>
 800ab80:	a307      	add	r3, pc, #28	; (adr r3, 800aba0 <scalbn+0xd0>)
 800ab82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab86:	e7e0      	b.n	800ab4a <scalbn+0x7a>
 800ab88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab8c:	3236      	adds	r2, #54	; 0x36
 800ab8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ab92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab96:	4620      	mov	r0, r4
 800ab98:	4629      	mov	r1, r5
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	4b06      	ldr	r3, [pc, #24]	; (800abb8 <scalbn+0xe8>)
 800ab9e:	e7b2      	b.n	800ab06 <scalbn+0x36>
 800aba0:	c2f8f359 	.word	0xc2f8f359
 800aba4:	01a56e1f 	.word	0x01a56e1f
 800aba8:	8800759c 	.word	0x8800759c
 800abac:	7e37e43c 	.word	0x7e37e43c
 800abb0:	43500000 	.word	0x43500000
 800abb4:	ffff3cb0 	.word	0xffff3cb0
 800abb8:	3c900000 	.word	0x3c900000

0800abbc <copysign>:
 800abbc:	ec51 0b10 	vmov	r0, r1, d0
 800abc0:	ee11 0a90 	vmov	r0, s3
 800abc4:	ee10 2a10 	vmov	r2, s0
 800abc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800abcc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800abd0:	ea41 0300 	orr.w	r3, r1, r0
 800abd4:	ec43 2b10 	vmov	d0, r2, r3
 800abd8:	4770      	bx	lr
	...

0800abdc <_init>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	bf00      	nop
 800abe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe2:	bc08      	pop	{r3}
 800abe4:	469e      	mov	lr, r3
 800abe6:	4770      	bx	lr

0800abe8 <_fini>:
 800abe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abea:	bf00      	nop
 800abec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abee:	bc08      	pop	{r3}
 800abf0:	469e      	mov	lr, r3
 800abf2:	4770      	bx	lr
