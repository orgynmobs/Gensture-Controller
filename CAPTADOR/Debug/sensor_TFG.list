
sensor_TFG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5cc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800a758  0800a758  0001a758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa50  0800aa50  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa50  0800aa50  0001aa50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa58  0800aa58  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa58  0800aa58  0001aa58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa5c  0800aa5c  0001aa5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800aa60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  200001e0  0800ac40  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  0800ac40  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6f3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f39  00000000  00000000  0002f903  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  00031840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  000327e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021c24  00000000  00000000  000336b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b7dd  00000000  00000000  000552d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d07e3  00000000  00000000  00060ab1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00131294  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005054  00000000  00000000  00131310  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e0 	.word	0x200001e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a73c 	.word	0x0800a73c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e4 	.word	0x200001e4
 80001c4:	0800a73c 	.word	0x0800a73c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b972 	b.w	8000e9c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9e08      	ldr	r6, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4688      	mov	r8, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14b      	bne.n	8000c76 <__udivmoddi4+0xa6>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4615      	mov	r5, r2
 8000be2:	d967      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0720 	rsb	r7, r2, #32
 8000bee:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf2:	fa20 f707 	lsr.w	r7, r0, r7
 8000bf6:	4095      	lsls	r5, r2
 8000bf8:	ea47 0803 	orr.w	r8, r7, r3
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c08:	fa1f fc85 	uxth.w	ip, r5
 8000c0c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c10:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c14:	fb07 f10c 	mul.w	r1, r7, ip
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18eb      	adds	r3, r5, r3
 8000c1e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c22:	f080 811b 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8118 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c2c:	3f02      	subs	r7, #2
 8000c2e:	442b      	add	r3, r5
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	192c      	adds	r4, r5, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x290>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x290>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	442c      	add	r4, r5
 8000c5c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c60:	eba4 040c 	sub.w	r4, r4, ip
 8000c64:	2700      	movs	r7, #0
 8000c66:	b11e      	cbz	r6, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c70:	4639      	mov	r1, r7
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0xbe>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f000 80eb 	beq.w	8000e56 <__udivmoddi4+0x286>
 8000c80:	2700      	movs	r7, #0
 8000c82:	e9c6 0100 	strd	r0, r1, [r6]
 8000c86:	4638      	mov	r0, r7
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f783 	clz	r7, r3
 8000c92:	2f00      	cmp	r7, #0
 8000c94:	d147      	bne.n	8000d26 <__udivmoddi4+0x156>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xd0>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80fa 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4698      	mov	r8, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d0e0      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000cae:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb2:	e7dd      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000cb4:	b902      	cbnz	r2, 8000cb8 <__udivmoddi4+0xe8>
 8000cb6:	deff      	udf	#255	; 0xff
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	f040 808f 	bne.w	8000de0 <__udivmoddi4+0x210>
 8000cc2:	1b49      	subs	r1, r1, r5
 8000cc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc8:	fa1f f885 	uxth.w	r8, r5
 8000ccc:	2701      	movs	r7, #1
 8000cce:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cd2:	0c23      	lsrs	r3, r4, #16
 8000cd4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x124>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x122>
 8000cec:	4299      	cmp	r1, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cf2:	4684      	mov	ip, r0
 8000cf4:	1a59      	subs	r1, r3, r1
 8000cf6:	b2a3      	uxth	r3, r4
 8000cf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d00:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d04:	fb08 f800 	mul.w	r8, r8, r0
 8000d08:	45a0      	cmp	r8, r4
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x14c>
 8000d0c:	192c      	adds	r4, r5, r4
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x14a>
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	f200 80b6 	bhi.w	8000e86 <__udivmoddi4+0x2b6>
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	eba4 0408 	sub.w	r4, r4, r8
 8000d20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d24:	e79f      	b.n	8000c66 <__udivmoddi4+0x96>
 8000d26:	f1c7 0c20 	rsb	ip, r7, #32
 8000d2a:	40bb      	lsls	r3, r7
 8000d2c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d30:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d34:	fa01 f407 	lsl.w	r4, r1, r7
 8000d38:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d3c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d40:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d44:	4325      	orrs	r5, r4
 8000d46:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d4a:	0c2c      	lsrs	r4, r5, #16
 8000d4c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d50:	fa1f fa8e 	uxth.w	sl, lr
 8000d54:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d58:	fb09 f40a 	mul.w	r4, r9, sl
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d62:	fa00 f107 	lsl.w	r1, r0, r7
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b0>
 8000d68:	eb1e 0303 	adds.w	r3, lr, r3
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d70:	f080 8087 	bcs.w	8000e82 <__udivmoddi4+0x2b2>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f240 8084 	bls.w	8000e82 <__udivmoddi4+0x2b2>
 8000d7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7e:	4473      	add	r3, lr
 8000d80:	1b1b      	subs	r3, r3, r4
 8000d82:	b2ad      	uxth	r5, r5
 8000d84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d88:	fb08 3310 	mls	r3, r8, r0, r3
 8000d8c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d90:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d94:	45a2      	cmp	sl, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1da>
 8000d98:	eb1e 0404 	adds.w	r4, lr, r4
 8000d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da0:	d26b      	bcs.n	8000e7a <__udivmoddi4+0x2aa>
 8000da2:	45a2      	cmp	sl, r4
 8000da4:	d969      	bls.n	8000e7a <__udivmoddi4+0x2aa>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4474      	add	r4, lr
 8000daa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	eba4 040a 	sub.w	r4, r4, sl
 8000db6:	454c      	cmp	r4, r9
 8000db8:	46c2      	mov	sl, r8
 8000dba:	464b      	mov	r3, r9
 8000dbc:	d354      	bcc.n	8000e68 <__udivmoddi4+0x298>
 8000dbe:	d051      	beq.n	8000e64 <__udivmoddi4+0x294>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d069      	beq.n	8000e98 <__udivmoddi4+0x2c8>
 8000dc4:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dcc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd0:	40fd      	lsrs	r5, r7
 8000dd2:	40fc      	lsrs	r4, r7
 8000dd4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd8:	e9c6 5400 	strd	r5, r4, [r6]
 8000ddc:	2700      	movs	r7, #0
 8000dde:	e747      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f703 	lsr.w	r7, r0, r3
 8000de8:	4095      	lsls	r5, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	fa21 f303 	lsr.w	r3, r1, r3
 8000df2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df6:	4338      	orrs	r0, r7
 8000df8:	0c01      	lsrs	r1, r0, #16
 8000dfa:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dfe:	fa1f f885 	uxth.w	r8, r5
 8000e02:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb07 f308 	mul.w	r3, r7, r8
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x256>
 8000e16:	1869      	adds	r1, r5, r1
 8000e18:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e1c:	d22f      	bcs.n	8000e7e <__udivmoddi4+0x2ae>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d92d      	bls.n	8000e7e <__udivmoddi4+0x2ae>
 8000e22:	3f02      	subs	r7, #2
 8000e24:	4429      	add	r1, r5
 8000e26:	1acb      	subs	r3, r1, r3
 8000e28:	b281      	uxth	r1, r0
 8000e2a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb00 f308 	mul.w	r3, r0, r8
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x27e>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e44:	d217      	bcs.n	8000e76 <__udivmoddi4+0x2a6>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d915      	bls.n	8000e76 <__udivmoddi4+0x2a6>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1ac9      	subs	r1, r1, r3
 8000e50:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e54:	e73b      	b.n	8000cce <__udivmoddi4+0xfe>
 8000e56:	4637      	mov	r7, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e709      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e5c:	4607      	mov	r7, r0
 8000e5e:	e6e7      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e60:	4618      	mov	r0, r3
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e64:	4541      	cmp	r1, r8
 8000e66:	d2ab      	bcs.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e68:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e6c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e70:	3801      	subs	r0, #1
 8000e72:	4613      	mov	r3, r2
 8000e74:	e7a4      	b.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e76:	4660      	mov	r0, ip
 8000e78:	e7e9      	b.n	8000e4e <__udivmoddi4+0x27e>
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	e795      	b.n	8000daa <__udivmoddi4+0x1da>
 8000e7e:	4667      	mov	r7, ip
 8000e80:	e7d1      	b.n	8000e26 <__udivmoddi4+0x256>
 8000e82:	4681      	mov	r9, r0
 8000e84:	e77c      	b.n	8000d80 <__udivmoddi4+0x1b0>
 8000e86:	3802      	subs	r0, #2
 8000e88:	442c      	add	r4, r5
 8000e8a:	e747      	b.n	8000d1c <__udivmoddi4+0x14c>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	442b      	add	r3, r5
 8000e92:	e72f      	b.n	8000cf4 <__udivmoddi4+0x124>
 8000e94:	4638      	mov	r0, r7
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xda>
 8000e98:	4637      	mov	r7, r6
 8000e9a:	e6e9      	b.n	8000c70 <__udivmoddi4+0xa0>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MPU6050_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int MPU6050_Init (void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af04      	add	r7, sp, #16
	uint8_t check;
		uint8_t Data;

		// check device ID WHO_AM_I
		Data = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	1dbb      	adds	r3, r7, #6
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	226b      	movs	r2, #107	; 0x6b
 8000ebc:	21d0      	movs	r1, #208	; 0xd0
 8000ebe:	4823      	ldr	r0, [pc, #140]	; (8000f4c <MPU6050_Init+0xac>)
 8000ec0:	f002 f8d8 	bl	8003074 <HAL_I2C_Mem_Write>

		HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8000ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec8:	9302      	str	r3, [sp, #8]
 8000eca:	2301      	movs	r3, #1
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2275      	movs	r2, #117	; 0x75
 8000ed6:	21d0      	movs	r1, #208	; 0xd0
 8000ed8:	481c      	ldr	r0, [pc, #112]	; (8000f4c <MPU6050_Init+0xac>)
 8000eda:	f002 f9c5 	bl	8003268 <HAL_I2C_Mem_Read>

		if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b68      	cmp	r3, #104	; 0x68
 8000ee2:	d12e      	bne.n	8000f42 <MPU6050_Init+0xa2>
		{
			// power management register 0X6B we should write all 0's to wake the sensor up


			// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
			Data = 0x07;
 8000ee4:	2307      	movs	r3, #7
 8000ee6:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000ee8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eec:	9302      	str	r3, [sp, #8]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	1dbb      	adds	r3, r7, #6
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	2219      	movs	r2, #25
 8000efa:	21d0      	movs	r1, #208	; 0xd0
 8000efc:	4813      	ldr	r0, [pc, #76]	; (8000f4c <MPU6050_Init+0xac>)
 8000efe:	f002 f8b9 	bl	8003074 <HAL_I2C_Mem_Write>

			// Set accelerometer configuration in ACCEL_CONFIG Register
			// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
			Data = 0x00;
 8000f02:	2300      	movs	r3, #0
 8000f04:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	1dbb      	adds	r3, r7, #6
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2301      	movs	r3, #1
 8000f16:	221c      	movs	r2, #28
 8000f18:	21d0      	movs	r1, #208	; 0xd0
 8000f1a:	480c      	ldr	r0, [pc, #48]	; (8000f4c <MPU6050_Init+0xac>)
 8000f1c:	f002 f8aa 	bl	8003074 <HAL_I2C_Mem_Write>

			// Set Gyroscopic configuration in GYRO_CONFIG Register
			// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 °/s
			Data = 0x00;
 8000f20:	2300      	movs	r3, #0
 8000f22:	71bb      	strb	r3, [r7, #6]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8000f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f28:	9302      	str	r3, [sp, #8]
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	1dbb      	adds	r3, r7, #6
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	221b      	movs	r2, #27
 8000f36:	21d0      	movs	r1, #208	; 0xd0
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MPU6050_Init+0xac>)
 8000f3a:	f002 f89b 	bl	8003074 <HAL_I2C_Mem_Write>
			return 1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <MPU6050_Init+0xa4>
		}
 return 0;
 8000f42:	2300      	movs	r3, #0
	}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000260 	.word	0x20000260

08000f50 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel (void)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	2306      	movs	r3, #6
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	463b      	mov	r3, r7
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2301      	movs	r3, #1
 8000f66:	223b      	movs	r2, #59	; 0x3b
 8000f68:	21d0      	movs	r1, #208	; 0xd0
 8000f6a:	482f      	ldr	r0, [pc, #188]	; (8001028 <MPU6050_Read_Accel+0xd8>)
 8000f6c:	f002 f97c 	bl	8003268 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000f70:	783b      	ldrb	r3, [r7, #0]
 8000f72:	021b      	lsls	r3, r3, #8
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	787b      	ldrb	r3, [r7, #1]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <MPU6050_Read_Accel+0xdc>)
 8000f80:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000f82:	78bb      	ldrb	r3, [r7, #2]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <MPU6050_Read_Accel+0xe0>)
 8000f92:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000f94:	793b      	ldrb	r3, [r7, #4]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	797b      	ldrb	r3, [r7, #5]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21a      	sxth	r2, r3
 8000fa2:	4b24      	ldr	r3, [pc, #144]	; (8001034 <MPU6050_Read_Accel+0xe4>)
 8000fa4:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <MPU6050_Read_Accel+0xdc>)
 8000fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fa65 	bl	800047c <__aeabi_i2d>
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b20      	ldr	r3, [pc, #128]	; (8001038 <MPU6050_Read_Accel+0xe8>)
 8000fb8:	f7ff fbf4 	bl	80007a4 <__aeabi_ddiv>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	460c      	mov	r4, r1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	4621      	mov	r1, r4
 8000fc4:	f7ff fd9c 	bl	8000b00 <__aeabi_d2f>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MPU6050_Read_Accel+0xec>)
 8000fcc:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MPU6050_Read_Accel+0xe0>)
 8000fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fa51 	bl	800047c <__aeabi_i2d>
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MPU6050_Read_Accel+0xe8>)
 8000fe0:	f7ff fbe0 	bl	80007a4 <__aeabi_ddiv>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	460c      	mov	r4, r1
 8000fe8:	4618      	mov	r0, r3
 8000fea:	4621      	mov	r1, r4
 8000fec:	f7ff fd88 	bl	8000b00 <__aeabi_d2f>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <MPU6050_Read_Accel+0xf0>)
 8000ff4:	601a      	str	r2, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MPU6050_Read_Accel+0xe4>)
 8000ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa3d 	bl	800047c <__aeabi_i2d>
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MPU6050_Read_Accel+0xe8>)
 8001008:	f7ff fbcc 	bl	80007a4 <__aeabi_ddiv>
 800100c:	4603      	mov	r3, r0
 800100e:	460c      	mov	r4, r1
 8001010:	4618      	mov	r0, r3
 8001012:	4621      	mov	r1, r4
 8001014:	f7ff fd74 	bl	8000b00 <__aeabi_d2f>
 8001018:	4602      	mov	r2, r0
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <MPU6050_Read_Accel+0xf4>)
 800101c:	601a      	str	r2, [r3, #0]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bd90      	pop	{r4, r7, pc}
 8001026:	bf00      	nop
 8001028:	20000260 	.word	0x20000260
 800102c:	200001fc 	.word	0x200001fc
 8001030:	200001fe 	.word	0x200001fe
 8001034:	20000200 	.word	0x20000200
 8001038:	40d00000 	.word	0x40d00000
 800103c:	200003a8 	.word	0x200003a8
 8001040:	2000030c 	.word	0x2000030c
 8001044:	200003c0 	.word	0x200003c0

08001048 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro (void)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b087      	sub	sp, #28
 800104c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800104e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001052:	9302      	str	r3, [sp, #8]
 8001054:	2306      	movs	r3, #6
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	463b      	mov	r3, r7
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	2243      	movs	r2, #67	; 0x43
 8001060:	21d0      	movs	r1, #208	; 0xd0
 8001062:	4831      	ldr	r0, [pc, #196]	; (8001128 <MPU6050_Read_Gyro+0xe0>)
 8001064:	f002 f900 	bl	8003268 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001068:	783b      	ldrb	r3, [r7, #0]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	787b      	ldrb	r3, [r7, #1]
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21a      	sxth	r2, r3
 8001076:	4b2d      	ldr	r3, [pc, #180]	; (800112c <MPU6050_Read_Gyro+0xe4>)
 8001078:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800107a:	78bb      	ldrb	r3, [r7, #2]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b21a      	sxth	r2, r3
 8001088:	4b29      	ldr	r3, [pc, #164]	; (8001130 <MPU6050_Read_Gyro+0xe8>)
 800108a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800108c:	793b      	ldrb	r3, [r7, #4]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	b21a      	sxth	r2, r3
 8001092:	797b      	ldrb	r3, [r7, #5]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21a      	sxth	r2, r3
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <MPU6050_Read_Gyro+0xec>)
 800109c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <MPU6050_Read_Gyro+0xe4>)
 80010a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff f9e9 	bl	800047c <__aeabi_i2d>
 80010aa:	a31d      	add	r3, pc, #116	; (adr r3, 8001120 <MPU6050_Read_Gyro+0xd8>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff fb78 	bl	80007a4 <__aeabi_ddiv>
 80010b4:	4603      	mov	r3, r0
 80010b6:	460c      	mov	r4, r1
 80010b8:	4618      	mov	r0, r3
 80010ba:	4621      	mov	r1, r4
 80010bc:	f7ff fd20 	bl	8000b00 <__aeabi_d2f>
 80010c0:	4602      	mov	r2, r0
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <MPU6050_Read_Gyro+0xf0>)
 80010c4:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MPU6050_Read_Gyro+0xe8>)
 80010c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f9d5 	bl	800047c <__aeabi_i2d>
 80010d2:	a313      	add	r3, pc, #76	; (adr r3, 8001120 <MPU6050_Read_Gyro+0xd8>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	f7ff fb64 	bl	80007a4 <__aeabi_ddiv>
 80010dc:	4603      	mov	r3, r0
 80010de:	460c      	mov	r4, r1
 80010e0:	4618      	mov	r0, r3
 80010e2:	4621      	mov	r1, r4
 80010e4:	f7ff fd0c 	bl	8000b00 <__aeabi_d2f>
 80010e8:	4602      	mov	r2, r0
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <MPU6050_Read_Gyro+0xf4>)
 80010ec:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MPU6050_Read_Gyro+0xec>)
 80010f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f9c1 	bl	800047c <__aeabi_i2d>
 80010fa:	a309      	add	r3, pc, #36	; (adr r3, 8001120 <MPU6050_Read_Gyro+0xd8>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f7ff fb50 	bl	80007a4 <__aeabi_ddiv>
 8001104:	4603      	mov	r3, r0
 8001106:	460c      	mov	r4, r1
 8001108:	4618      	mov	r0, r3
 800110a:	4621      	mov	r1, r4
 800110c:	f7ff fcf8 	bl	8000b00 <__aeabi_d2f>
 8001110:	4602      	mov	r2, r0
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MPU6050_Read_Gyro+0xf8>)
 8001114:	601a      	str	r2, [r3, #0]
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bd90      	pop	{r4, r7, pc}
 800111e:	bf00      	nop
 8001120:	00000000 	.word	0x00000000
 8001124:	40606000 	.word	0x40606000
 8001128:	20000260 	.word	0x20000260
 800112c:	20000202 	.word	0x20000202
 8001130:	20000204 	.word	0x20000204
 8001134:	20000206 	.word	0x20000206
 8001138:	20000214 	.word	0x20000214
 800113c:	20000358 	.word	0x20000358
 8001140:	200003ec 	.word	0x200003ec
 8001144:	00000000 	.word	0x00000000

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800114c:	b09a      	sub	sp, #104	; 0x68
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
int start = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	667b      	str	r3, [r7, #100]	; 0x64
off_gy= 0;
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <main+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]


//valores stadisticos
	float desv_tipica = 2.0231;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <main+0x78>)
 800115c:	65fb      	str	r3, [r7, #92]	; 0x5c
	float desv_estado = 2.0231;
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <main+0x78>)
 8001160:	65bb      	str	r3, [r7, #88]	; 0x58
	float var = desv_tipica*desv_tipica;
 8001162:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001166:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800116a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float var_estado = desv_estado*desv_estado;
 8001172:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001176:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800117a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	float P = var_estado;
 8001182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001184:	663b      	str	r3, [r7, #96]	; 0x60

	float P_previa;


	char info_real[32], info_kalman[32];
		char ln[] = "\n\r";
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <main+0x7c>)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	4611      	mov	r1, r2
 800118e:	8019      	strh	r1, [r3, #0]
 8001190:	3302      	adds	r3, #2
 8001192:	0c12      	lsrs	r2, r2, #16
 8001194:	701a      	strb	r2, [r3, #0]
		char comma[] = ",";
 8001196:	232c      	movs	r3, #44	; 0x2c
 8001198:	803b      	strh	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119a:	f000 ff2b 	bl	8001ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119e:	f000 fab5 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a2:	f000 fc4f 	bl	8001a44 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011a6:	f000 fb6d 	bl	8001884 <MX_I2C1_Init>
  MX_TIM4_Init();
 80011aa:	f000 fbc7 	bl	800193c <MX_TIM4_Init>
  MX_UART5_Init();
 80011ae:	f000 fc1f 	bl	80019f0 <MX_UART5_Init>
  MX_ADC1_Init();
 80011b2:	f000 fb15 	bl	80017e0 <MX_ADC1_Init>
  MX_I2C2_Init();
 80011b6:	f000 fb93 	bl	80018e0 <MX_I2C2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	while(start == 0){
 80011ba:	e008      	b.n	80011ce <main+0x86>
 80011bc:	200003b0 	.word	0x200003b0
 80011c0:	40017a78 	.word	0x40017a78
 80011c4:	0800a758 	.word	0x0800a758
		 start = MPU6050_Init();
 80011c8:	f7ff fe6a 	bl	8000ea0 <MPU6050_Init>
 80011cc:	6678      	str	r0, [r7, #100]	; 0x64
	while(start == 0){
 80011ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f9      	beq.n	80011c8 <main+0x80>
	}

	  // read the Accelerometer and Gyro values and tranform into angles


	 	  MPU6050_Read_Accel();
 80011d4:	f7ff febc 	bl	8000f50 <MPU6050_Read_Accel>
	 	  MPU6050_Read_Gyro();
 80011d8:	f7ff ff36 	bl	8001048 <MPU6050_Read_Gyro>
accel_x= atan(Ay/sqrt(pow(Ax,2) + pow(Az,2)))*(180.0/3.14);
 80011dc:	4bd2      	ldr	r3, [pc, #840]	; (8001528 <main+0x3e0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f95d 	bl	80004a0 <__aeabi_f2d>
 80011e6:	4680      	mov	r8, r0
 80011e8:	4689      	mov	r9, r1
 80011ea:	4bd0      	ldr	r3, [pc, #832]	; (800152c <main+0x3e4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f956 	bl	80004a0 <__aeabi_f2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	ed9f 1bbf 	vldr	d1, [pc, #764]	; 80014f8 <main+0x3b0>
 80011fc:	ec43 2b10 	vmov	d0, r2, r3
 8001200:	f008 f9f8 	bl	80095f4 <pow>
 8001204:	ec5b ab10 	vmov	sl, fp, d0
 8001208:	4bc9      	ldr	r3, [pc, #804]	; (8001530 <main+0x3e8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f947 	bl	80004a0 <__aeabi_f2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	ed9f 1bb8 	vldr	d1, [pc, #736]	; 80014f8 <main+0x3b0>
 800121a:	ec43 2b10 	vmov	d0, r2, r3
 800121e:	f008 f9e9 	bl	80095f4 <pow>
 8001222:	ec53 2b10 	vmov	r2, r3, d0
 8001226:	4650      	mov	r0, sl
 8001228:	4659      	mov	r1, fp
 800122a:	f7fe ffdb 	bl	80001e4 <__adddf3>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	ec43 2b17 	vmov	d7, r2, r3
 8001236:	eeb0 0a47 	vmov.f32	s0, s14
 800123a:	eef0 0a67 	vmov.f32	s1, s15
 800123e:	f008 fb49 	bl	80098d4 <sqrt>
 8001242:	ec53 2b10 	vmov	r2, r3, d0
 8001246:	4640      	mov	r0, r8
 8001248:	4649      	mov	r1, r9
 800124a:	f7ff faab 	bl	80007a4 <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	ec43 2b17 	vmov	d7, r2, r3
 8001256:	eeb0 0a47 	vmov.f32	s0, s14
 800125a:	eef0 0a67 	vmov.f32	s1, s15
 800125e:	f008 f81f 	bl	80092a0 <atan>
 8001262:	ec51 0b10 	vmov	r0, r1, d0
 8001266:	a3a6      	add	r3, pc, #664	; (adr r3, 8001500 <main+0x3b8>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7ff f970 	bl	8000550 <__aeabi_dmul>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fc42 	bl	8000b00 <__aeabi_d2f>
 800127c:	4602      	mov	r2, r0
 800127e:	4bad      	ldr	r3, [pc, #692]	; (8001534 <main+0x3ec>)
 8001280:	601a      	str	r2, [r3, #0]
accel_y=atan(-Ax/sqrt(pow(Ay,2) + pow(Az,2)))*(180.0/3.14);
 8001282:	4baa      	ldr	r3, [pc, #680]	; (800152c <main+0x3e4>)
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	eef1 7a67 	vneg.f32	s15, s15
 800128c:	ee17 3a90 	vmov	r3, s15
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f905 	bl	80004a0 <__aeabi_f2d>
 8001296:	4680      	mov	r8, r0
 8001298:	4689      	mov	r9, r1
 800129a:	4ba3      	ldr	r3, [pc, #652]	; (8001528 <main+0x3e0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f8fe 	bl	80004a0 <__aeabi_f2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	ed9f 1b93 	vldr	d1, [pc, #588]	; 80014f8 <main+0x3b0>
 80012ac:	ec43 2b10 	vmov	d0, r2, r3
 80012b0:	f008 f9a0 	bl	80095f4 <pow>
 80012b4:	ec5b ab10 	vmov	sl, fp, d0
 80012b8:	4b9d      	ldr	r3, [pc, #628]	; (8001530 <main+0x3e8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f8ef 	bl	80004a0 <__aeabi_f2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	ed9f 1b8c 	vldr	d1, [pc, #560]	; 80014f8 <main+0x3b0>
 80012ca:	ec43 2b10 	vmov	d0, r2, r3
 80012ce:	f008 f991 	bl	80095f4 <pow>
 80012d2:	ec53 2b10 	vmov	r2, r3, d0
 80012d6:	4650      	mov	r0, sl
 80012d8:	4659      	mov	r1, fp
 80012da:	f7fe ff83 	bl	80001e4 <__adddf3>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	ec43 2b17 	vmov	d7, r2, r3
 80012e6:	eeb0 0a47 	vmov.f32	s0, s14
 80012ea:	eef0 0a67 	vmov.f32	s1, s15
 80012ee:	f008 faf1 	bl	80098d4 <sqrt>
 80012f2:	ec53 2b10 	vmov	r2, r3, d0
 80012f6:	4640      	mov	r0, r8
 80012f8:	4649      	mov	r1, r9
 80012fa:	f7ff fa53 	bl	80007a4 <__aeabi_ddiv>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	ec43 2b17 	vmov	d7, r2, r3
 8001306:	eeb0 0a47 	vmov.f32	s0, s14
 800130a:	eef0 0a67 	vmov.f32	s1, s15
 800130e:	f007 ffc7 	bl	80092a0 <atan>
 8001312:	ec51 0b10 	vmov	r0, r1, d0
 8001316:	a37a      	add	r3, pc, #488	; (adr r3, 8001500 <main+0x3b8>)
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	f7ff f918 	bl	8000550 <__aeabi_dmul>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff fbea 	bl	8000b00 <__aeabi_d2f>
 800132c:	4602      	mov	r2, r0
 800132e:	4b82      	ldr	r3, [pc, #520]	; (8001538 <main+0x3f0>)
 8001330:	601a      	str	r2, [r3, #0]

	  dt =  HAL_GetTick()-time;
 8001332:	f000 fec5 	bl	80020c0 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	4b80      	ldr	r3, [pc, #512]	; (800153c <main+0x3f4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	4a80      	ldr	r2, [pc, #512]	; (8001540 <main+0x3f8>)
 8001340:	6013      	str	r3, [r2, #0]
	  time = HAL_GetTick();
 8001342:	f000 febd 	bl	80020c0 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	4b7c      	ldr	r3, [pc, #496]	; (800153c <main+0x3f4>)
 800134a:	601a      	str	r2, [r3, #0]
	 	gyro_y += dt*(Gy-2.579)/1000;
 800134c:	4b7d      	ldr	r3, [pc, #500]	; (8001544 <main+0x3fc>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8a5 	bl	80004a0 <__aeabi_f2d>
 8001356:	4680      	mov	r8, r0
 8001358:	4689      	mov	r9, r1
 800135a:	4b79      	ldr	r3, [pc, #484]	; (8001540 <main+0x3f8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f87c 	bl	800045c <__aeabi_ui2d>
 8001364:	4682      	mov	sl, r0
 8001366:	468b      	mov	fp, r1
 8001368:	4b77      	ldr	r3, [pc, #476]	; (8001548 <main+0x400>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f897 	bl	80004a0 <__aeabi_f2d>
 8001372:	a365      	add	r3, pc, #404	; (adr r3, 8001508 <main+0x3c0>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7fe ff32 	bl	80001e0 <__aeabi_dsub>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4650      	mov	r0, sl
 8001382:	4659      	mov	r1, fp
 8001384:	f7ff f8e4 	bl	8000550 <__aeabi_dmul>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	4b6d      	ldr	r3, [pc, #436]	; (800154c <main+0x404>)
 8001396:	f7ff fa05 	bl	80007a4 <__aeabi_ddiv>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4640      	mov	r0, r8
 80013a0:	4649      	mov	r1, r9
 80013a2:	f7fe ff1f 	bl	80001e4 <__adddf3>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f7ff fba7 	bl	8000b00 <__aeabi_d2f>
 80013b2:	4602      	mov	r2, r0
 80013b4:	4b63      	ldr	r3, [pc, #396]	; (8001544 <main+0x3fc>)
 80013b6:	601a      	str	r2, [r3, #0]
	 	gyro_x += dt*(Gx-0.3)/1000;
 80013b8:	4b65      	ldr	r3, [pc, #404]	; (8001550 <main+0x408>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f86f 	bl	80004a0 <__aeabi_f2d>
 80013c2:	4680      	mov	r8, r0
 80013c4:	4689      	mov	r9, r1
 80013c6:	4b5e      	ldr	r3, [pc, #376]	; (8001540 <main+0x3f8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f846 	bl	800045c <__aeabi_ui2d>
 80013d0:	4682      	mov	sl, r0
 80013d2:	468b      	mov	fp, r1
 80013d4:	4b5f      	ldr	r3, [pc, #380]	; (8001554 <main+0x40c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f861 	bl	80004a0 <__aeabi_f2d>
 80013de:	a34c      	add	r3, pc, #304	; (adr r3, 8001510 <main+0x3c8>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7fe fefc 	bl	80001e0 <__aeabi_dsub>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4650      	mov	r0, sl
 80013ee:	4659      	mov	r1, fp
 80013f0:	f7ff f8ae 	bl	8000550 <__aeabi_dmul>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4b52      	ldr	r3, [pc, #328]	; (800154c <main+0x404>)
 8001402:	f7ff f9cf 	bl	80007a4 <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4640      	mov	r0, r8
 800140c:	4649      	mov	r1, r9
 800140e:	f7fe fee9 	bl	80001e4 <__adddf3>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fb71 	bl	8000b00 <__aeabi_d2f>
 800141e:	4602      	mov	r2, r0
 8001420:	4b4b      	ldr	r3, [pc, #300]	; (8001550 <main+0x408>)
 8001422:	601a      	str	r2, [r3, #0]
	 	gyro_z += dt*(Gz)/1000;
 8001424:	4b46      	ldr	r3, [pc, #280]	; (8001540 <main+0x3f8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001430:	4b49      	ldr	r3, [pc, #292]	; (8001558 <main+0x410>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800155c <main+0x414>
 800143e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001442:	4b47      	ldr	r3, [pc, #284]	; (8001560 <main+0x418>)
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	4b44      	ldr	r3, [pc, #272]	; (8001560 <main+0x418>)
 800144e:	edc3 7a00 	vstr	s15, [r3]


angulo_y = 0.01*(accel_y) + 0.9*gyro_y;
 8001452:	4b39      	ldr	r3, [pc, #228]	; (8001538 <main+0x3f0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f822 	bl	80004a0 <__aeabi_f2d>
 800145c:	a32e      	add	r3, pc, #184	; (adr r3, 8001518 <main+0x3d0>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7ff f875 	bl	8000550 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4690      	mov	r8, r2
 800146c:	4699      	mov	r9, r3
 800146e:	4b35      	ldr	r3, [pc, #212]	; (8001544 <main+0x3fc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff f814 	bl	80004a0 <__aeabi_f2d>
 8001478:	a329      	add	r3, pc, #164	; (adr r3, 8001520 <main+0x3d8>)
 800147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147e:	f7ff f867 	bl	8000550 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4640      	mov	r0, r8
 8001488:	4649      	mov	r1, r9
 800148a:	f7fe feab 	bl	80001e4 <__adddf3>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fb33 	bl	8000b00 <__aeabi_d2f>
 800149a:	4602      	mov	r2, r0
 800149c:	4b31      	ldr	r3, [pc, #196]	; (8001564 <main+0x41c>)
 800149e:	601a      	str	r2, [r3, #0]
angulo_x = 0.01*(accel_x) + 0.9*gyro_x;
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <main+0x3ec>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe fffb 	bl	80004a0 <__aeabi_f2d>
 80014aa:	a31b      	add	r3, pc, #108	; (adr r3, 8001518 <main+0x3d0>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f84e 	bl	8000550 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4690      	mov	r8, r2
 80014ba:	4699      	mov	r9, r3
 80014bc:	4b24      	ldr	r3, [pc, #144]	; (8001550 <main+0x408>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ffed 	bl	80004a0 <__aeabi_f2d>
 80014c6:	a316      	add	r3, pc, #88	; (adr r3, 8001520 <main+0x3d8>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7ff f840 	bl	8000550 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4640      	mov	r0, r8
 80014d6:	4649      	mov	r1, r9
 80014d8:	f7fe fe84 	bl	80001e4 <__adddf3>
 80014dc:	4602      	mov	r2, r0
 80014de:	460b      	mov	r3, r1
 80014e0:	4610      	mov	r0, r2
 80014e2:	4619      	mov	r1, r3
 80014e4:	f7ff fb0c 	bl	8000b00 <__aeabi_d2f>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <main+0x420>)
 80014ec:	601a      	str	r2, [r3, #0]

//ADC read

P_previa =  P;
 80014ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014f2:	e03b      	b.n	800156c <main+0x424>
 80014f4:	f3af 8000 	nop.w
 80014f8:	00000000 	.word	0x00000000
 80014fc:	40000000 	.word	0x40000000
 8001500:	61d59ae7 	.word	0x61d59ae7
 8001504:	404ca994 	.word	0x404ca994
 8001508:	c083126f 	.word	0xc083126f
 800150c:	4004a1ca 	.word	0x4004a1ca
 8001510:	33333333 	.word	0x33333333
 8001514:	3fd33333 	.word	0x3fd33333
 8001518:	47ae147b 	.word	0x47ae147b
 800151c:	3f847ae1 	.word	0x3f847ae1
 8001520:	cccccccd 	.word	0xcccccccd
 8001524:	3feccccc 	.word	0x3feccccc
 8001528:	2000030c 	.word	0x2000030c
 800152c:	200003a8 	.word	0x200003a8
 8001530:	200003c0 	.word	0x200003c0
 8001534:	20000218 	.word	0x20000218
 8001538:	20000310 	.word	0x20000310
 800153c:	200003b8 	.word	0x200003b8
 8001540:	200003e4 	.word	0x200003e4
 8001544:	20000308 	.word	0x20000308
 8001548:	20000358 	.word	0x20000358
 800154c:	408f4000 	.word	0x408f4000
 8001550:	200003bc 	.word	0x200003bc
 8001554:	20000214 	.word	0x20000214
 8001558:	200003ec 	.word	0x200003ec
 800155c:	447a0000 	.word	0x447a0000
 8001560:	200003f0 	.word	0x200003f0
 8001564:	20000314 	.word	0x20000314
 8001568:	200003ac 	.word	0x200003ac


	 	  Kalman = P/(P+var);
 800156c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001570:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001574:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001578:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800157c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001580:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48


HAL_ADC_Start(&hadc1);
 8001584:	485a      	ldr	r0, [pc, #360]	; (80016f0 <main+0x5a8>)
 8001586:	f000 fdeb 	bl	8002160 <HAL_ADC_Start>
	 if(HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY)==HAL_OK){
 800158a:	f04f 31ff 	mov.w	r1, #4294967295
 800158e:	4858      	ldr	r0, [pc, #352]	; (80016f0 <main+0x5a8>)
 8001590:	f000 feac 	bl	80022ec <HAL_ADC_PollForConversion>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <main+0x466>
		 ADC_val=HAL_ADC_GetValue(&hadc1) ;  // entre 2500 y 1500 . quzás ajusatble tocando la resolucion
 800159a:	4855      	ldr	r0, [pc, #340]	; (80016f0 <main+0x5a8>)
 800159c:	f000 ff2a 	bl	80023f4 <HAL_ADC_GetValue>
 80015a0:	ee07 0a90 	vmov	s15, r0
 80015a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a8:	4b52      	ldr	r3, [pc, #328]	; (80016f4 <main+0x5ac>)
 80015aa:	edc3 7a00 	vstr	s15, [r3]
	 }
	 X_estimate = X + Kalman*(ADC_val-X);
 80015ae:	4b52      	ldr	r3, [pc, #328]	; (80016f8 <main+0x5b0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	ee07 3a90 	vmov	s15, r3
 80015b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ba:	4b4e      	ldr	r3, [pc, #312]	; (80016f4 <main+0x5ac>)
 80015bc:	edd3 6a00 	vldr	s13, [r3]
 80015c0:	4b4d      	ldr	r3, [pc, #308]	; (80016f8 <main+0x5b0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015d0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015e0:	ee17 2a90 	vmov	r2, s15
 80015e4:	4b45      	ldr	r3, [pc, #276]	; (80016fc <main+0x5b4>)
 80015e6:	601a      	str	r2, [r3, #0]
		 	  P = (1-Kalman)*P_previa + fabs(X - X_estimate)*0.01;
 80015e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015ec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80015f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fc:	ee17 0a90 	vmov	r0, s15
 8001600:	f7fe ff4e 	bl	80004a0 <__aeabi_f2d>
 8001604:	4680      	mov	r8, r0
 8001606:	4689      	mov	r9, r1
 8001608:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <main+0x5b0>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <main+0x5b4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff32 	bl	800047c <__aeabi_i2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4614      	mov	r4, r2
 800161e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001622:	a331      	add	r3, pc, #196	; (adr r3, 80016e8 <main+0x5a0>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	4620      	mov	r0, r4
 800162a:	4629      	mov	r1, r5
 800162c:	f7fe ff90 	bl	8000550 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4640      	mov	r0, r8
 8001636:	4649      	mov	r1, r9
 8001638:	f7fe fdd4 	bl	80001e4 <__adddf3>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff fa5c 	bl	8000b00 <__aeabi_d2f>
 8001648:	4603      	mov	r3, r0
 800164a:	663b      	str	r3, [r7, #96]	; 0x60
		 	  X = X_estimate;
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <main+0x5b4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a29      	ldr	r2, [pc, #164]	; (80016f8 <main+0x5b0>)
 8001652:	6013      	str	r3, [r2, #0]


//UART
		 	 gcvt(angulo_x,10,palabra);
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <main+0x5b8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff21 	bl	80004a0 <__aeabi_f2d>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4928      	ldr	r1, [pc, #160]	; (8001704 <main+0x5bc>)
 8001664:	200a      	movs	r0, #10
 8001666:	ec43 2b10 	vmov	d0, r2, r3
 800166a:	f005 fed9 	bl	8007420 <gcvt>
		 	  itoa(X_estimate,info_kalman,10);
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <main+0x5b4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f107 0108 	add.w	r1, r7, #8
 8001676:	220a      	movs	r2, #10
 8001678:	4618      	mov	r0, r3
 800167a:	f005 ff3f 	bl	80074fc <itoa>
		 	  itoa(ADC_val,info_real,10);
 800167e:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <main+0x5ac>)
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800168c:	220a      	movs	r2, #10
 800168e:	4619      	mov	r1, r3
 8001690:	ee17 0a90 	vmov	r0, s15
 8001694:	f005 ff32 	bl	80074fc <itoa>
		 	 HAL_UART_Transmit(&huart5, (uint8_t*)info_real, sizeof(int), 100);
 8001698:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800169c:	2364      	movs	r3, #100	; 0x64
 800169e:	2204      	movs	r2, #4
 80016a0:	4819      	ldr	r0, [pc, #100]	; (8001708 <main+0x5c0>)
 80016a2:	f005 f81e 	bl	80066e2 <HAL_UART_Transmit>
		 	 HAL_UART_Transmit(&huart5, (uint8_t*)comma, sizeof(comma), 100);
 80016a6:	4639      	mov	r1, r7
 80016a8:	2364      	movs	r3, #100	; 0x64
 80016aa:	2202      	movs	r2, #2
 80016ac:	4816      	ldr	r0, [pc, #88]	; (8001708 <main+0x5c0>)
 80016ae:	f005 f818 	bl	80066e2 <HAL_UART_Transmit>
		 	 HAL_UART_Transmit(&huart5, (uint8_t*)info_kalman, sizeof(int), 100);
 80016b2:	f107 0108 	add.w	r1, r7, #8
 80016b6:	2364      	movs	r3, #100	; 0x64
 80016b8:	2204      	movs	r2, #4
 80016ba:	4813      	ldr	r0, [pc, #76]	; (8001708 <main+0x5c0>)
 80016bc:	f005 f811 	bl	80066e2 <HAL_UART_Transmit>
		 	HAL_UART_Transmit(&huart5, (uint8_t*)comma, sizeof(comma), 100);
 80016c0:	4639      	mov	r1, r7
 80016c2:	2364      	movs	r3, #100	; 0x64
 80016c4:	2202      	movs	r2, #2
 80016c6:	4810      	ldr	r0, [pc, #64]	; (8001708 <main+0x5c0>)
 80016c8:	f005 f80b 	bl	80066e2 <HAL_UART_Transmit>
		 	HAL_UART_Transmit(&huart5,(uint8_t*)palabra,sizeof(float ), 100);//palabra
 80016cc:	2364      	movs	r3, #100	; 0x64
 80016ce:	2204      	movs	r2, #4
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <main+0x5bc>)
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <main+0x5c0>)
 80016d4:	f005 f805 	bl	80066e2 <HAL_UART_Transmit>
		 	 HAL_UART_Transmit(&huart5, (uint8_t*)ln, sizeof(comma), 100);
 80016d8:	1d39      	adds	r1, r7, #4
 80016da:	2364      	movs	r3, #100	; 0x64
 80016dc:	2202      	movs	r2, #2
 80016de:	480a      	ldr	r0, [pc, #40]	; (8001708 <main+0x5c0>)
 80016e0:	f004 ffff 	bl	80066e2 <HAL_UART_Transmit>
  {
 80016e4:	e569      	b.n	80011ba <main+0x72>
 80016e6:	bf00      	nop
 80016e8:	47ae147b 	.word	0x47ae147b
 80016ec:	3f847ae1 	.word	0x3f847ae1
 80016f0:	2000035c 	.word	0x2000035c
 80016f4:	200003b4 	.word	0x200003b4
 80016f8:	200003f4 	.word	0x200003f4
 80016fc:	200003a4 	.word	0x200003a4
 8001700:	200003ac 	.word	0x200003ac
 8001704:	200003c4 	.word	0x200003c4
 8001708:	20000318 	.word	0x20000318

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b094      	sub	sp, #80	; 0x50
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f107 0320 	add.w	r3, r7, #32
 8001716:	2230      	movs	r2, #48	; 0x30
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f005 fef0 	bl	8007500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <SystemClock_Config+0xcc>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	4a27      	ldr	r2, [pc, #156]	; (80017d8 <SystemClock_Config+0xcc>)
 800173a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173e:	6413      	str	r3, [r2, #64]	; 0x40
 8001740:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <SystemClock_Config+0xcc>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	4b22      	ldr	r3, [pc, #136]	; (80017dc <SystemClock_Config+0xd0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a21      	ldr	r2, [pc, #132]	; (80017dc <SystemClock_Config+0xd0>)
 8001756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <SystemClock_Config+0xd0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001768:	2301      	movs	r3, #1
 800176a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800176c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001772:	2302      	movs	r3, #2
 8001774:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800177a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800177c:	2308      	movs	r3, #8
 800177e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001780:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001784:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001786:	2302      	movs	r3, #2
 8001788:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800178a:	2307      	movs	r3, #7
 800178c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	4618      	mov	r0, r3
 8001794:	f003 ff9e 	bl	80056d4 <HAL_RCC_OscConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800179e:	f000 f9a3 	bl	8001ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a2:	230f      	movs	r3, #15
 80017a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a6:	2302      	movs	r3, #2
 80017a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80017b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	2105      	movs	r1, #5
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 f9f7 	bl	8005bb4 <HAL_RCC_ClockConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017cc:	f000 f98c 	bl	8001ae8 <Error_Handler>
  }
}
 80017d0:	bf00      	nop
 80017d2:	3750      	adds	r7, #80	; 0x50
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40007000 	.word	0x40007000

080017e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017e6:	463b      	mov	r3, r7
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <MX_ADC1_Init+0x98>)
 80017f4:	4a21      	ldr	r2, [pc, #132]	; (800187c <MX_ADC1_Init+0x9c>)
 80017f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <MX_ADC1_Init+0x98>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <MX_ADC1_Init+0x98>)
 8001800:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001804:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <MX_ADC1_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_ADC1_Init+0x98>)
 800180e:	2200      	movs	r2, #0
 8001810:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <MX_ADC1_Init+0x98>)
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <MX_ADC1_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <MX_ADC1_Init+0x98>)
 8001822:	4a17      	ldr	r2, [pc, #92]	; (8001880 <MX_ADC1_Init+0xa0>)
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_ADC1_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <MX_ADC1_Init+0x98>)
 800182e:	2201      	movs	r2, #1
 8001830:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_ADC1_Init+0x98>)
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_ADC1_Init+0x98>)
 800183c:	2201      	movs	r2, #1
 800183e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001840:	480d      	ldr	r0, [pc, #52]	; (8001878 <MX_ADC1_Init+0x98>)
 8001842:	f000 fc49 	bl	80020d8 <HAL_ADC_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800184c:	f000 f94c 	bl	8001ae8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001850:	2300      	movs	r3, #0
 8001852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001854:	2301      	movs	r3, #1
 8001856:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800185c:	463b      	mov	r3, r7
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_ADC1_Init+0x98>)
 8001862:	f000 fdd5 	bl	8002410 <HAL_ADC_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800186c:	f000 f93c 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000035c 	.word	0x2000035c
 800187c:	40012000 	.word	0x40012000
 8001880:	0f000001 	.word	0x0f000001

08001884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_I2C1_Init+0x50>)
 800188a:	4a13      	ldr	r2, [pc, #76]	; (80018d8 <MX_I2C1_Init+0x54>)
 800188c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_I2C1_Init+0x50>)
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <MX_I2C1_Init+0x58>)
 8001892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_I2C1_Init+0x50>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_I2C1_Init+0x50>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c0:	4804      	ldr	r0, [pc, #16]	; (80018d4 <MX_I2C1_Init+0x50>)
 80018c2:	f001 fa9f 	bl	8002e04 <HAL_I2C_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018cc:	f000 f90c 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000260 	.word	0x20000260
 80018d8:	40005400 	.word	0x40005400
 80018dc:	000186a0 	.word	0x000186a0

080018e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <MX_I2C2_Init+0x50>)
 80018e6:	4a13      	ldr	r2, [pc, #76]	; (8001934 <MX_I2C2_Init+0x54>)
 80018e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_I2C2_Init+0x50>)
 80018ec:	4a12      	ldr	r2, [pc, #72]	; (8001938 <MX_I2C2_Init+0x58>)
 80018ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_I2C2_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_I2C2_Init+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_I2C2_Init+0x50>)
 80018fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001902:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <MX_I2C2_Init+0x50>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_I2C2_Init+0x50>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <MX_I2C2_Init+0x50>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_I2C2_Init+0x50>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <MX_I2C2_Init+0x50>)
 800191e:	f001 fa71 	bl	8002e04 <HAL_I2C_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001928:	f000 f8de 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200002b4 	.word	0x200002b4
 8001934:	40005800 	.word	0x40005800
 8001938:	000186a0 	.word	0x000186a0

0800193c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001942:	f107 0320 	add.w	r3, r7, #32
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]
 800195a:	615a      	str	r2, [r3, #20]
 800195c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800195e:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <MX_TIM4_Init+0xac>)
 8001960:	4a22      	ldr	r2, [pc, #136]	; (80019ec <MX_TIM4_Init+0xb0>)
 8001962:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 839;
 8001964:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <MX_TIM4_Init+0xac>)
 8001966:	f240 3247 	movw	r2, #839	; 0x347
 800196a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196c:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <MX_TIM4_Init+0xac>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <MX_TIM4_Init+0xac>)
 8001974:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001978:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197a:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <MX_TIM4_Init+0xac>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <MX_TIM4_Init+0xac>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001986:	4818      	ldr	r0, [pc, #96]	; (80019e8 <MX_TIM4_Init+0xac>)
 8001988:	f004 fb06 	bl	8005f98 <HAL_TIM_OC_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001992:	f000 f8a9 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800199e:	f107 0320 	add.w	r3, r7, #32
 80019a2:	4619      	mov	r1, r3
 80019a4:	4810      	ldr	r0, [pc, #64]	; (80019e8 <MX_TIM4_Init+0xac>)
 80019a6:	f004 fdd3 	bl	8006550 <HAL_TIMEx_MasterConfigSynchronization>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80019b0:	f000 f89a 	bl	8001ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2200      	movs	r2, #0
 80019c8:	4619      	mov	r1, r3
 80019ca:	4807      	ldr	r0, [pc, #28]	; (80019e8 <MX_TIM4_Init+0xac>)
 80019cc:	f004 fb10 	bl	8005ff0 <HAL_TIM_OC_ConfigChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80019d6:	f000 f887 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019da:	4803      	ldr	r0, [pc, #12]	; (80019e8 <MX_TIM4_Init+0xac>)
 80019dc:	f000 f9a2 	bl	8001d24 <HAL_TIM_MspPostInit>

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000220 	.word	0x20000220
 80019ec:	40000800 	.word	0x40000800

080019f0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <MX_UART5_Init+0x4c>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <MX_UART5_Init+0x50>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <MX_UART5_Init+0x4c>)
 80019fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a00:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_UART5_Init+0x4c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_UART5_Init+0x4c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <MX_UART5_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_UART5_Init+0x4c>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <MX_UART5_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_UART5_Init+0x4c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <MX_UART5_Init+0x4c>)
 8001a28:	f004 fe0e 	bl	8006648 <HAL_UART_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001a32:	f000 f859 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000318 	.word	0x20000318
 8001a40:	40005000 	.word	0x40005000

08001a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <MX_GPIO_Init+0xa0>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a24      	ldr	r2, [pc, #144]	; (8001ae4 <MX_GPIO_Init+0xa0>)
 8001a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <MX_GPIO_Init+0xa0>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <MX_GPIO_Init+0xa0>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <MX_GPIO_Init+0xa0>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <MX_GPIO_Init+0xa0>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_GPIO_Init+0xa0>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <MX_GPIO_Init+0xa0>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_GPIO_Init+0xa0>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <MX_GPIO_Init+0xa0>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <MX_GPIO_Init+0xa0>)
 8001aa8:	f043 0308 	orr.w	r3, r3, #8
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <MX_GPIO_Init+0xa0>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <MX_GPIO_Init+0xa0>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <MX_GPIO_Init+0xa0>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_GPIO_Init+0xa0>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]

}
 8001ad6:	bf00      	nop
 8001ad8:	371c      	adds	r7, #28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aee:	e7fe      	b.n	8001aee <Error_Handler+0x6>

08001af0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_MspInit+0x4c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b04:	6453      	str	r3, [r2, #68]	; 0x44
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b2e:	2007      	movs	r0, #7
 8001b30:	f000 ff5c 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800

08001b40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a17      	ldr	r2, [pc, #92]	; (8001bbc <HAL_ADC_MspInit+0x7c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d127      	bne.n	8001bb2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <HAL_ADC_MspInit+0x80>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a15      	ldr	r2, [pc, #84]	; (8001bc0 <HAL_ADC_MspInit+0x80>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <HAL_ADC_MspInit+0x80>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_ADC_MspInit+0x80>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_ADC_MspInit+0x80>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_ADC_MspInit+0x80>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <HAL_ADC_MspInit+0x84>)
 8001bae:	f000 ff8f 	bl	8002ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	; 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40012000 	.word	0x40012000
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08c      	sub	sp, #48	; 0x30
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a3a      	ldr	r2, [pc, #232]	; (8001cd0 <HAL_I2C_MspInit+0x108>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d13c      	bne.n	8001c64 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	4b39      	ldr	r3, [pc, #228]	; (8001cd4 <HAL_I2C_MspInit+0x10c>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a38      	ldr	r2, [pc, #224]	; (8001cd4 <HAL_I2C_MspInit+0x10c>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_I2C_MspInit+0x10c>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c06:	23c0      	movs	r3, #192	; 0xc0
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0a:	2312      	movs	r3, #18
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c16:	2304      	movs	r3, #4
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	482d      	ldr	r0, [pc, #180]	; (8001cd8 <HAL_I2C_MspInit+0x110>)
 8001c22:	f000 ff55 	bl	8002ad0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_I2C_MspInit+0x10c>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a29      	ldr	r2, [pc, #164]	; (8001cd4 <HAL_I2C_MspInit+0x10c>)
 8001c30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <HAL_I2C_MspInit+0x10c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	201f      	movs	r0, #31
 8001c48:	f000 fedb 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c4c:	201f      	movs	r0, #31
 8001c4e:	f000 fef4 	bl	8002a3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2100      	movs	r1, #0
 8001c56:	2020      	movs	r0, #32
 8001c58:	f000 fed3 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c5c:	2020      	movs	r0, #32
 8001c5e:	f000 feec 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c62:	e031      	b.n	8001cc8 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a1c      	ldr	r2, [pc, #112]	; (8001cdc <HAL_I2C_MspInit+0x114>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d12c      	bne.n	8001cc8 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_I2C_MspInit+0x10c>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_I2C_MspInit+0x10c>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_I2C_MspInit+0x10c>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c90:	2312      	movs	r3, #18
 8001c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <HAL_I2C_MspInit+0x110>)
 8001ca8:	f000 ff12 	bl	8002ad0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_I2C_MspInit+0x10c>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_I2C_MspInit+0x10c>)
 8001cb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cba:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_I2C_MspInit+0x10c>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	bf00      	nop
 8001cca:	3730      	adds	r7, #48	; 0x30
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40005400 	.word	0x40005400
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	40005800 	.word	0x40005800

08001ce0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <HAL_TIM_OC_MspInit+0x3c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d10d      	bne.n	8001d0e <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_TIM_OC_MspInit+0x40>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <HAL_TIM_OC_MspInit+0x40>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <HAL_TIM_OC_MspInit+0x40>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40000800 	.word	0x40000800
 8001d20:	40023800 	.word	0x40023800

08001d24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <HAL_TIM_MspPostInit+0x68>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d11e      	bne.n	8001d84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <HAL_TIM_MspPostInit+0x6c>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a10      	ldr	r2, [pc, #64]	; (8001d90 <HAL_TIM_MspPostInit+0x6c>)
 8001d50:	f043 0308 	orr.w	r3, r3, #8
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <HAL_TIM_MspPostInit+0x6c>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d74:	2302      	movs	r3, #2
 8001d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <HAL_TIM_MspPostInit+0x70>)
 8001d80:	f000 fea6 	bl	8002ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d84:	bf00      	nop
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40000800 	.word	0x40000800
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020c00 	.word	0x40020c00

08001d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a2c      	ldr	r2, [pc, #176]	; (8001e68 <HAL_UART_MspInit+0xd0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d152      	bne.n	8001e60 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_UART_MspInit+0xd4>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a2a      	ldr	r2, [pc, #168]	; (8001e6c <HAL_UART_MspInit+0xd4>)
 8001dc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_UART_MspInit+0xd4>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_UART_MspInit+0xd4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <HAL_UART_MspInit+0xd4>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <HAL_UART_MspInit+0xd4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_UART_MspInit+0xd4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <HAL_UART_MspInit+0xd4>)
 8001dfc:	f043 0308 	orr.w	r3, r3, #8
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <HAL_UART_MspInit+0xd4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e20:	2308      	movs	r3, #8
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4811      	ldr	r0, [pc, #68]	; (8001e70 <HAL_UART_MspInit+0xd8>)
 8001e2c:	f000 fe50 	bl	8002ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e30:	2304      	movs	r3, #4
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e40:	2308      	movs	r3, #8
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	480a      	ldr	r0, [pc, #40]	; (8001e74 <HAL_UART_MspInit+0xdc>)
 8001e4c:	f000 fe40 	bl	8002ad0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2100      	movs	r1, #0
 8001e54:	2035      	movs	r0, #53	; 0x35
 8001e56:	f000 fdd4 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001e5a:	2035      	movs	r0, #53	; 0x35
 8001e5c:	f000 fded 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001e60:	bf00      	nop
 8001e62:	3728      	adds	r7, #40	; 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40005000 	.word	0x40005000
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40020800 	.word	0x40020800
 8001e74:	40020c00 	.word	0x40020c00

08001e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <NMI_Handler+0x4>

08001e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec4:	f000 f8e8 	bl	8002098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <I2C1_EV_IRQHandler+0x10>)
 8001ed2:	f001 fbef 	bl	80036b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000260 	.word	0x20000260

08001ee0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <I2C1_ER_IRQHandler+0x10>)
 8001ee6:	f001 fd52 	bl	800398e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000260 	.word	0x20000260

08001ef4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <UART5_IRQHandler+0x10>)
 8001efa:	f004 fc8b 	bl	8006814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000318 	.word	0x20000318

08001f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f10:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <_sbrk+0x5c>)
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <_sbrk+0x60>)
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <_sbrk+0x64>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <_sbrk+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d207      	bcs.n	8001f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f38:	f005 fa9e 	bl	8007478 <__errno>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	230c      	movs	r3, #12
 8001f40:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	e009      	b.n	8001f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4e:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <_sbrk+0x64>)
 8001f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20020000 	.word	0x20020000
 8001f68:	00000400 	.word	0x00000400
 8001f6c:	20000208 	.word	0x20000208
 8001f70:	20000400 	.word	0x20000400

08001f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <SystemInit+0x28>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7e:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <SystemInit+0x28>)
 8001f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <SystemInit+0x28>)
 8001f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f8e:	609a      	str	r2, [r3, #8]
#endif
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fa6:	e003      	b.n	8001fb0 <LoopCopyDataInit>

08001fa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001faa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fae:	3104      	adds	r1, #4

08001fb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fb0:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fb8:	d3f6      	bcc.n	8001fa8 <CopyDataInit>
  ldr  r2, =_sbss
 8001fba:	4a0b      	ldr	r2, [pc, #44]	; (8001fe8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fbc:	e002      	b.n	8001fc4 <LoopFillZerobss>

08001fbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fc0:	f842 3b04 	str.w	r3, [r2], #4

08001fc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fc8:	d3f9      	bcc.n	8001fbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fca:	f7ff ffd3 	bl	8001f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fce:	f005 fa59 	bl	8007484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd2:	f7ff f8b9 	bl	8001148 <main>
  bx  lr    
 8001fd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fdc:	0800aa60 	.word	0x0800aa60
  ldr  r0, =_sdata
 8001fe0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fe4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001fe8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001fec:	20000400 	.word	0x20000400

08001ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <ADC_IRQHandler>
	...

08001ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_Init+0x40>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <HAL_Init+0x40>)
 8001ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_Init+0x40>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_Init+0x40>)
 800200a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800200e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_Init+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a07      	ldr	r2, [pc, #28]	; (8002034 <HAL_Init+0x40>)
 8002016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201c:	2003      	movs	r0, #3
 800201e:	f000 fce5 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002022:	2000      	movs	r0, #0
 8002024:	f000 f808 	bl	8002038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002028:	f7ff fd62 	bl	8001af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023c00 	.word	0x40023c00

08002038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_InitTick+0x54>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_InitTick+0x58>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
 800204a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fcfd 	bl	8002a56 <HAL_SYSTICK_Config>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e00e      	b.n	8002084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b0f      	cmp	r3, #15
 800206a:	d80a      	bhi.n	8002082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800206c:	2200      	movs	r2, #0
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f000 fcc5 	bl	8002a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002078:	4a06      	ldr	r2, [pc, #24]	; (8002094 <HAL_InitTick+0x5c>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	e000      	b.n	8002084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000000 	.word	0x20000000
 8002090:	20000008 	.word	0x20000008
 8002094:	20000004 	.word	0x20000004

08002098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_IncTick+0x20>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_IncTick+0x24>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <HAL_IncTick+0x24>)
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000008 	.word	0x20000008
 80020bc:	200003f8 	.word	0x200003f8

080020c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return uwTick;
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_GetTick+0x14>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	200003f8 	.word	0x200003f8

080020d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e033      	b.n	8002156 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d109      	bne.n	800210a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff fd22 	bl	8001b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b00      	cmp	r3, #0
 8002114:	d118      	bne.n	8002148 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800211e:	f023 0302 	bic.w	r3, r3, #2
 8002122:	f043 0202 	orr.w	r2, r3, #2
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fa92 	bl	8002654 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	f043 0201 	orr.w	r2, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
 8002146:	e001      	b.n	800214c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002154:	7bfb      	ldrb	r3, [r7, #15]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_ADC_Start+0x1a>
 8002176:	2302      	movs	r3, #2
 8002178:	e0a5      	b.n	80022c6 <HAL_ADC_Start+0x166>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d018      	beq.n	80021c2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021a0:	4b4c      	ldr	r3, [pc, #304]	; (80022d4 <HAL_ADC_Start+0x174>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a4c      	ldr	r2, [pc, #304]	; (80022d8 <HAL_ADC_Start+0x178>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0c9a      	lsrs	r2, r3, #18
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021b4:	e002      	b.n	80021bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f9      	bne.n	80021b6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d179      	bne.n	80022c4 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800220a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220e:	d106      	bne.n	800221e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002214:	f023 0206 	bic.w	r2, r3, #6
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	645a      	str	r2, [r3, #68]	; 0x44
 800221c:	e002      	b.n	8002224 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800222c:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <HAL_ADC_Start+0x17c>)
 800222e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002238:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	2b00      	cmp	r3, #0
 8002244:	d12a      	bne.n	800229c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a25      	ldr	r2, [pc, #148]	; (80022e0 <HAL_ADC_Start+0x180>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d015      	beq.n	800227c <HAL_ADC_Start+0x11c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a23      	ldr	r2, [pc, #140]	; (80022e4 <HAL_ADC_Start+0x184>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d105      	bne.n	8002266 <HAL_ADC_Start+0x106>
 800225a:	4b20      	ldr	r3, [pc, #128]	; (80022dc <HAL_ADC_Start+0x17c>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <HAL_ADC_Start+0x188>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d129      	bne.n	80022c4 <HAL_ADC_Start+0x164>
 8002270:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <HAL_ADC_Start+0x17c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2b0f      	cmp	r3, #15
 800227a:	d823      	bhi.n	80022c4 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d11c      	bne.n	80022c4 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	e013      	b.n	80022c4 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0f      	ldr	r2, [pc, #60]	; (80022e0 <HAL_ADC_Start+0x180>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d10e      	bne.n	80022c4 <HAL_ADC_Start+0x164>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d107      	bne.n	80022c4 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022c2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000000 	.word	0x20000000
 80022d8:	431bde83 	.word	0x431bde83
 80022dc:	40012300 	.word	0x40012300
 80022e0:	40012000 	.word	0x40012000
 80022e4:	40012100 	.word	0x40012100
 80022e8:	40012200 	.word	0x40012200

080022ec <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002308:	d113      	bne.n	8002332 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002318:	d10b      	bne.n	8002332 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f043 0220 	orr.w	r2, r3, #32
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e05c      	b.n	80023ec <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002332:	f7ff fec5 	bl	80020c0 <HAL_GetTick>
 8002336:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002338:	e01a      	b.n	8002370 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d016      	beq.n	8002370 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <HAL_ADC_PollForConversion+0x6c>
 8002348:	f7ff feba 	bl	80020c0 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d20b      	bcs.n	8002370 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	f043 0204 	orr.w	r2, r3, #4
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e03d      	b.n	80023ec <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b02      	cmp	r3, #2
 800237c:	d1dd      	bne.n	800233a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f06f 0212 	mvn.w	r2, #18
 8002386:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d123      	bne.n	80023ea <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11f      	bne.n	80023ea <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d006      	beq.n	80023c6 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d111      	bne.n	80023ea <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f043 0201 	orr.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1c>
 8002428:	2302      	movs	r3, #2
 800242a:	e105      	b.n	8002638 <HAL_ADC_ConfigChannel+0x228>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b09      	cmp	r3, #9
 800243a:	d925      	bls.n	8002488 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68d9      	ldr	r1, [r3, #12]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	3b1e      	subs	r3, #30
 8002452:	2207      	movs	r2, #7
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43da      	mvns	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	400a      	ands	r2, r1
 8002460:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68d9      	ldr	r1, [r3, #12]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	4618      	mov	r0, r3
 8002474:	4603      	mov	r3, r0
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4403      	add	r3, r0
 800247a:	3b1e      	subs	r3, #30
 800247c:	409a      	lsls	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	e022      	b.n	80024ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6919      	ldr	r1, [r3, #16]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	2207      	movs	r2, #7
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	400a      	ands	r2, r1
 80024aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6919      	ldr	r1, [r3, #16]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	4618      	mov	r0, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4403      	add	r3, r0
 80024c4:	409a      	lsls	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d824      	bhi.n	8002520 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3b05      	subs	r3, #5
 80024e8:	221f      	movs	r2, #31
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	400a      	ands	r2, r1
 80024f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	4618      	mov	r0, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	3b05      	subs	r3, #5
 8002512:	fa00 f203 	lsl.w	r2, r0, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	635a      	str	r2, [r3, #52]	; 0x34
 800251e:	e04c      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b0c      	cmp	r3, #12
 8002526:	d824      	bhi.n	8002572 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	3b23      	subs	r3, #35	; 0x23
 800253a:	221f      	movs	r2, #31
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43da      	mvns	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	400a      	ands	r2, r1
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	4618      	mov	r0, r3
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	3b23      	subs	r3, #35	; 0x23
 8002564:	fa00 f203 	lsl.w	r2, r0, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
 8002570:	e023      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	3b41      	subs	r3, #65	; 0x41
 8002584:	221f      	movs	r2, #31
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	400a      	ands	r2, r1
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	3b41      	subs	r3, #65	; 0x41
 80025ae:	fa00 f203 	lsl.w	r2, r0, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <HAL_ADC_ConfigChannel+0x234>)
 80025bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a21      	ldr	r2, [pc, #132]	; (8002648 <HAL_ADC_ConfigChannel+0x238>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d109      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x1cc>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b12      	cmp	r3, #18
 80025ce:	d105      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a19      	ldr	r2, [pc, #100]	; (8002648 <HAL_ADC_ConfigChannel+0x238>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d123      	bne.n	800262e <HAL_ADC_ConfigChannel+0x21e>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b10      	cmp	r3, #16
 80025ec:	d003      	beq.n	80025f6 <HAL_ADC_ConfigChannel+0x1e6>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b11      	cmp	r3, #17
 80025f4:	d11b      	bne.n	800262e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b10      	cmp	r3, #16
 8002608:	d111      	bne.n	800262e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_ADC_ConfigChannel+0x23c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a10      	ldr	r2, [pc, #64]	; (8002650 <HAL_ADC_ConfigChannel+0x240>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	0c9a      	lsrs	r2, r3, #18
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002620:	e002      	b.n	8002628 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	3b01      	subs	r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f9      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	40012300 	.word	0x40012300
 8002648:	40012000 	.word	0x40012000
 800264c:	20000000 	.word	0x20000000
 8002650:	431bde83 	.word	0x431bde83

08002654 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800265c:	4b79      	ldr	r3, [pc, #484]	; (8002844 <ADC_Init+0x1f0>)
 800265e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	021a      	lsls	r2, r3, #8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6899      	ldr	r1, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	4a58      	ldr	r2, [pc, #352]	; (8002848 <ADC_Init+0x1f4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d022      	beq.n	8002732 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800271c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6899      	ldr	r1, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	e00f      	b.n	8002752 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002750:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0202 	bic.w	r2, r2, #2
 8002760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	7e1b      	ldrb	r3, [r3, #24]
 800276c:	005a      	lsls	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01b      	beq.n	80027b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800278e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800279e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6859      	ldr	r1, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	3b01      	subs	r3, #1
 80027ac:	035a      	lsls	r2, r3, #13
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	e007      	b.n	80027c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	051a      	lsls	r2, r3, #20
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6899      	ldr	r1, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800280a:	025a      	lsls	r2, r3, #9
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	029a      	lsls	r2, r3, #10
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	609a      	str	r2, [r3, #8]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	40012300 	.word	0x40012300
 8002848:	0f000001 	.word	0x0f000001

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287e:	4a04      	ldr	r2, [pc, #16]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	60d3      	str	r3, [r2, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f7ff ff8e 	bl	80028ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff29 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a14:	f7ff ff3e 	bl	8002894 <__NVIC_GetPriorityGrouping>
 8002a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff8e 	bl	8002940 <NVIC_EncodePriority>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5d 	bl	80028ec <__NVIC_SetPriority>
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff31 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffa2 	bl	80029a8 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d004      	beq.n	8002a8c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2280      	movs	r2, #128	; 0x80
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e00c      	b.n	8002aa6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2205      	movs	r2, #5
 8002a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac0:	b2db      	uxtb	r3, r3
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	e16b      	b.n	8002dc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aec:	2201      	movs	r2, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f040 815a 	bne.w	8002dbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d00b      	beq.n	8002b2a <HAL_GPIO_Init+0x5a>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d007      	beq.n	8002b2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b1e:	2b11      	cmp	r3, #17
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b12      	cmp	r3, #18
 8002b28:	d130      	bne.n	8002b8c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 0201 	and.w	r2, r3, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	2203      	movs	r2, #3
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0xfc>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b12      	cmp	r3, #18
 8002bca:	d123      	bne.n	8002c14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	69b9      	ldr	r1, [r7, #24]
 8002c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80b4 	beq.w	8002dbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	4b5f      	ldr	r3, [pc, #380]	; (8002dd8 <HAL_GPIO_Init+0x308>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	4a5e      	ldr	r2, [pc, #376]	; (8002dd8 <HAL_GPIO_Init+0x308>)
 8002c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c64:	6453      	str	r3, [r2, #68]	; 0x44
 8002c66:	4b5c      	ldr	r3, [pc, #368]	; (8002dd8 <HAL_GPIO_Init+0x308>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c72:	4a5a      	ldr	r2, [pc, #360]	; (8002ddc <HAL_GPIO_Init+0x30c>)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	3302      	adds	r3, #2
 8002c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	220f      	movs	r2, #15
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4013      	ands	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a51      	ldr	r2, [pc, #324]	; (8002de0 <HAL_GPIO_Init+0x310>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d02b      	beq.n	8002cf6 <HAL_GPIO_Init+0x226>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a50      	ldr	r2, [pc, #320]	; (8002de4 <HAL_GPIO_Init+0x314>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d025      	beq.n	8002cf2 <HAL_GPIO_Init+0x222>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4f      	ldr	r2, [pc, #316]	; (8002de8 <HAL_GPIO_Init+0x318>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01f      	beq.n	8002cee <HAL_GPIO_Init+0x21e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4e      	ldr	r2, [pc, #312]	; (8002dec <HAL_GPIO_Init+0x31c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d019      	beq.n	8002cea <HAL_GPIO_Init+0x21a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4d      	ldr	r2, [pc, #308]	; (8002df0 <HAL_GPIO_Init+0x320>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_Init+0x216>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4c      	ldr	r2, [pc, #304]	; (8002df4 <HAL_GPIO_Init+0x324>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_GPIO_Init+0x212>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4b      	ldr	r2, [pc, #300]	; (8002df8 <HAL_GPIO_Init+0x328>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <HAL_GPIO_Init+0x20e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4a      	ldr	r2, [pc, #296]	; (8002dfc <HAL_GPIO_Init+0x32c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_GPIO_Init+0x20a>
 8002cd6:	2307      	movs	r3, #7
 8002cd8:	e00e      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cda:	2308      	movs	r3, #8
 8002cdc:	e00c      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cde:	2306      	movs	r3, #6
 8002ce0:	e00a      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002ce2:	2305      	movs	r3, #5
 8002ce4:	e008      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cea:	2303      	movs	r3, #3
 8002cec:	e004      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_GPIO_Init+0x228>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	f002 0203 	and.w	r2, r2, #3
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	4093      	lsls	r3, r2
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d08:	4934      	ldr	r1, [pc, #208]	; (8002ddc <HAL_GPIO_Init+0x30c>)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d16:	4b3a      	ldr	r3, [pc, #232]	; (8002e00 <HAL_GPIO_Init+0x330>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d3a:	4a31      	ldr	r2, [pc, #196]	; (8002e00 <HAL_GPIO_Init+0x330>)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d40:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <HAL_GPIO_Init+0x330>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <HAL_GPIO_Init+0x330>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d6a:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <HAL_GPIO_Init+0x330>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <HAL_GPIO_Init+0x330>)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d94:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <HAL_GPIO_Init+0x330>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db8:	4a11      	ldr	r2, [pc, #68]	; (8002e00 <HAL_GPIO_Init+0x330>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	2b0f      	cmp	r3, #15
 8002dc8:	f67f ae90 	bls.w	8002aec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dcc:	bf00      	nop
 8002dce:	3724      	adds	r7, #36	; 0x24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40013800 	.word	0x40013800
 8002de0:	40020000 	.word	0x40020000
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40020800 	.word	0x40020800
 8002dec:	40020c00 	.word	0x40020c00
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40021400 	.word	0x40021400
 8002df8:	40021800 	.word	0x40021800
 8002dfc:	40021c00 	.word	0x40021c00
 8002e00:	40013c00 	.word	0x40013c00

08002e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e11f      	b.n	8003056 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fe fecc 	bl	8001bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2224      	movs	r2, #36	; 0x24
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e68:	f003 f86e 	bl	8005f48 <HAL_RCC_GetPCLK1Freq>
 8002e6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4a7b      	ldr	r2, [pc, #492]	; (8003060 <HAL_I2C_Init+0x25c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d807      	bhi.n	8002e88 <HAL_I2C_Init+0x84>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4a7a      	ldr	r2, [pc, #488]	; (8003064 <HAL_I2C_Init+0x260>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	bf94      	ite	ls
 8002e80:	2301      	movls	r3, #1
 8002e82:	2300      	movhi	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	e006      	b.n	8002e96 <HAL_I2C_Init+0x92>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a77      	ldr	r2, [pc, #476]	; (8003068 <HAL_I2C_Init+0x264>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	bf94      	ite	ls
 8002e90:	2301      	movls	r3, #1
 8002e92:	2300      	movhi	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e0db      	b.n	8003056 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4a72      	ldr	r2, [pc, #456]	; (800306c <HAL_I2C_Init+0x268>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	0c9b      	lsrs	r3, r3, #18
 8002ea8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a64      	ldr	r2, [pc, #400]	; (8003060 <HAL_I2C_Init+0x25c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d802      	bhi.n	8002ed8 <HAL_I2C_Init+0xd4>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	e009      	b.n	8002eec <HAL_I2C_Init+0xe8>
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	4a63      	ldr	r2, [pc, #396]	; (8003070 <HAL_I2C_Init+0x26c>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	3301      	adds	r3, #1
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002efe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4956      	ldr	r1, [pc, #344]	; (8003060 <HAL_I2C_Init+0x25c>)
 8002f08:	428b      	cmp	r3, r1
 8002f0a:	d80d      	bhi.n	8002f28 <HAL_I2C_Init+0x124>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1e59      	subs	r1, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	bf38      	it	cc
 8002f24:	2304      	movcc	r3, #4
 8002f26:	e04f      	b.n	8002fc8 <HAL_I2C_Init+0x1c4>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d111      	bne.n	8002f54 <HAL_I2C_Init+0x150>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1e58      	subs	r0, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	440b      	add	r3, r1
 8002f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f42:	3301      	adds	r3, #1
 8002f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	2300      	movne	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	e012      	b.n	8002f7a <HAL_I2C_Init+0x176>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1e58      	subs	r0, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	0099      	lsls	r1, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_I2C_Init+0x17e>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e022      	b.n	8002fc8 <HAL_I2C_Init+0x1c4>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10e      	bne.n	8002fa8 <HAL_I2C_Init+0x1a4>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1e58      	subs	r0, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6859      	ldr	r1, [r3, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	440b      	add	r3, r1
 8002f98:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa6:	e00f      	b.n	8002fc8 <HAL_I2C_Init+0x1c4>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e58      	subs	r0, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	0099      	lsls	r1, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	6809      	ldr	r1, [r1, #0]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ff6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6911      	ldr	r1, [r2, #16]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68d2      	ldr	r2, [r2, #12]
 8003002:	4311      	orrs	r1, r2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	430b      	orrs	r3, r1
 800300a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	000186a0 	.word	0x000186a0
 8003064:	001e847f 	.word	0x001e847f
 8003068:	003d08ff 	.word	0x003d08ff
 800306c:	431bde83 	.word	0x431bde83
 8003070:	10624dd3 	.word	0x10624dd3

08003074 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	4608      	mov	r0, r1
 800307e:	4611      	mov	r1, r2
 8003080:	461a      	mov	r2, r3
 8003082:	4603      	mov	r3, r0
 8003084:	817b      	strh	r3, [r7, #10]
 8003086:	460b      	mov	r3, r1
 8003088:	813b      	strh	r3, [r7, #8]
 800308a:	4613      	mov	r3, r2
 800308c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800308e:	f7ff f817 	bl	80020c0 <HAL_GetTick>
 8003092:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b20      	cmp	r3, #32
 800309e:	f040 80d9 	bne.w	8003254 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	2319      	movs	r3, #25
 80030a8:	2201      	movs	r2, #1
 80030aa:	496d      	ldr	r1, [pc, #436]	; (8003260 <HAL_I2C_Mem_Write+0x1ec>)
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f002 f8e7 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030b8:	2302      	movs	r3, #2
 80030ba:	e0cc      	b.n	8003256 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_I2C_Mem_Write+0x56>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e0c5      	b.n	8003256 <HAL_I2C_Mem_Write+0x1e2>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d007      	beq.n	80030f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2221      	movs	r2, #33	; 0x21
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2240      	movs	r2, #64	; 0x40
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a3a      	ldr	r2, [r7, #32]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003120:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4a4d      	ldr	r2, [pc, #308]	; (8003264 <HAL_I2C_Mem_Write+0x1f0>)
 8003130:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003132:	88f8      	ldrh	r0, [r7, #6]
 8003134:	893a      	ldrh	r2, [r7, #8]
 8003136:	8979      	ldrh	r1, [r7, #10]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	4603      	mov	r3, r0
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f001 fe76 	bl	8004e34 <I2C_RequestMemoryWrite>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d052      	beq.n	80031f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e081      	b.n	8003256 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f002 f968 	bl	800542c <I2C_WaitOnTXEFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00d      	beq.n	800317e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	2b04      	cmp	r3, #4
 8003168:	d107      	bne.n	800317a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003178:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e06b      	b.n	8003256 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d11b      	bne.n	80031f4 <HAL_I2C_Mem_Write+0x180>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d017      	beq.n	80031f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	781a      	ldrb	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1aa      	bne.n	8003152 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f002 f954 	bl	80054ae <I2C_WaitOnBTFFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00d      	beq.n	8003228 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	2b04      	cmp	r3, #4
 8003212:	d107      	bne.n	8003224 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003222:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e016      	b.n	8003256 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e000      	b.n	8003256 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	00100002 	.word	0x00100002
 8003264:	ffff0000 	.word	0xffff0000

08003268 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08c      	sub	sp, #48	; 0x30
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	4608      	mov	r0, r1
 8003272:	4611      	mov	r1, r2
 8003274:	461a      	mov	r2, r3
 8003276:	4603      	mov	r3, r0
 8003278:	817b      	strh	r3, [r7, #10]
 800327a:	460b      	mov	r3, r1
 800327c:	813b      	strh	r3, [r7, #8]
 800327e:	4613      	mov	r3, r2
 8003280:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003282:	f7fe ff1d 	bl	80020c0 <HAL_GetTick>
 8003286:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b20      	cmp	r3, #32
 8003292:	f040 8208 	bne.w	80036a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	2319      	movs	r3, #25
 800329c:	2201      	movs	r2, #1
 800329e:	497b      	ldr	r1, [pc, #492]	; (800348c <HAL_I2C_Mem_Read+0x224>)
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f001 ffed 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
 80032ae:	e1fb      	b.n	80036a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_I2C_Mem_Read+0x56>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e1f4      	b.n	80036a8 <HAL_I2C_Mem_Read+0x440>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d007      	beq.n	80032e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2222      	movs	r2, #34	; 0x22
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2240      	movs	r2, #64	; 0x40
 8003300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800330e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003314:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4a5b      	ldr	r2, [pc, #364]	; (8003490 <HAL_I2C_Mem_Read+0x228>)
 8003324:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003326:	88f8      	ldrh	r0, [r7, #6]
 8003328:	893a      	ldrh	r2, [r7, #8]
 800332a:	8979      	ldrh	r1, [r7, #10]
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	4603      	mov	r3, r0
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f001 fe12 	bl	8004f60 <I2C_RequestMemoryRead>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e1b0      	b.n	80036a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334a:	2b00      	cmp	r3, #0
 800334c:	d113      	bne.n	8003376 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334e:	2300      	movs	r3, #0
 8003350:	623b      	str	r3, [r7, #32]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	623b      	str	r3, [r7, #32]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	623b      	str	r3, [r7, #32]
 8003362:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e184      	b.n	8003680 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337a:	2b01      	cmp	r3, #1
 800337c:	d11b      	bne.n	80033b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e164      	b.n	8003680 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d11b      	bne.n	80033f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	61bb      	str	r3, [r7, #24]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	61bb      	str	r3, [r7, #24]
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	e144      	b.n	8003680 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800340c:	e138      	b.n	8003680 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	2b03      	cmp	r3, #3
 8003414:	f200 80f1 	bhi.w	80035fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341c:	2b01      	cmp	r3, #1
 800341e:	d123      	bne.n	8003468 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003422:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f002 f8b5 	bl	8005594 <I2C_WaitOnRXNEFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e139      	b.n	80036a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003466:	e10b      	b.n	8003680 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	2b02      	cmp	r3, #2
 800346e:	d14e      	bne.n	800350e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003476:	2200      	movs	r2, #0
 8003478:	4906      	ldr	r1, [pc, #24]	; (8003494 <HAL_I2C_Mem_Read+0x22c>)
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f001 ff00 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e10e      	b.n	80036a8 <HAL_I2C_Mem_Read+0x440>
 800348a:	bf00      	nop
 800348c:	00100002 	.word	0x00100002
 8003490:	ffff0000 	.word	0xffff0000
 8003494:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	b2d2      	uxtb	r2, r2
 80034e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800350c:	e0b8      	b.n	8003680 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003514:	2200      	movs	r2, #0
 8003516:	4966      	ldr	r1, [pc, #408]	; (80036b0 <HAL_I2C_Mem_Read+0x448>)
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f001 feb1 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0bf      	b.n	80036a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003536:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	2200      	movs	r2, #0
 8003572:	494f      	ldr	r1, [pc, #316]	; (80036b0 <HAL_I2C_Mem_Read+0x448>)
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f001 fe83 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e091      	b.n	80036a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003592:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035f8:	e042      	b.n	8003680 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f001 ffc8 	bl	8005594 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e04c      	b.n	80036a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b04      	cmp	r3, #4
 800364c:	d118      	bne.n	8003680 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366a:	3b01      	subs	r3, #1
 800366c:	b29a      	uxth	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003684:	2b00      	cmp	r3, #0
 8003686:	f47f aec2 	bne.w	800340e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3728      	adds	r7, #40	; 0x28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	00010004 	.word	0x00010004

080036b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d003      	beq.n	80036ec <HAL_I2C_EV_IRQHandler+0x38>
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b40      	cmp	r3, #64	; 0x40
 80036e8:	f040 80bd 	bne.w	8003866 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10d      	bne.n	8003722 <HAL_I2C_EV_IRQHandler+0x6e>
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800370c:	d003      	beq.n	8003716 <HAL_I2C_EV_IRQHandler+0x62>
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003714:	d101      	bne.n	800371a <HAL_I2C_EV_IRQHandler+0x66>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_I2C_EV_IRQHandler+0x68>
 800371a:	2300      	movs	r3, #0
 800371c:	2b01      	cmp	r3, #1
 800371e:	f000 812e 	beq.w	800397e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00c      	beq.n	8003746 <HAL_I2C_EV_IRQHandler+0x92>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	0a5b      	lsrs	r3, r3, #9
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d006      	beq.n	8003746 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f001 ffb0 	bl	800569e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 fd62 	bl	8004208 <I2C_Master_SB>
 8003744:	e08e      	b.n	8003864 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	08db      	lsrs	r3, r3, #3
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <HAL_I2C_EV_IRQHandler+0xb2>
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	0a5b      	lsrs	r3, r3, #9
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fdd8 	bl	8004314 <I2C_Master_ADD10>
 8003764:	e07e      	b.n	8003864 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	085b      	lsrs	r3, r3, #1
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <HAL_I2C_EV_IRQHandler+0xd2>
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	0a5b      	lsrs	r3, r3, #9
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fdf2 	bl	8004368 <I2C_Master_ADDR>
 8003784:	e06e      	b.n	8003864 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	089b      	lsrs	r3, r3, #2
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d037      	beq.n	8003802 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a0:	f000 80ef 	beq.w	8003982 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	09db      	lsrs	r3, r3, #7
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00f      	beq.n	80037d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	0a9b      	lsrs	r3, r3, #10
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d009      	beq.n	80037d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d103      	bne.n	80037d0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f9ef 	bl	8003bac <I2C_MasterTransmit_TXE>
 80037ce:	e049      	b.n	8003864 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	089b      	lsrs	r3, r3, #2
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80d2 	beq.w	8003982 <HAL_I2C_EV_IRQHandler+0x2ce>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	0a5b      	lsrs	r3, r3, #9
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80cb 	beq.w	8003982 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b10      	cmp	r3, #16
 80037f0:	d103      	bne.n	80037fa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fa76 	bl	8003ce4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037f8:	e0c3      	b.n	8003982 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fada 	bl	8003db4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003800:	e0bf      	b.n	8003982 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003810:	f000 80b7 	beq.w	8003982 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	099b      	lsrs	r3, r3, #6
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00f      	beq.n	8003840 <HAL_I2C_EV_IRQHandler+0x18c>
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	0a9b      	lsrs	r3, r3, #10
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d009      	beq.n	8003840 <HAL_I2C_EV_IRQHandler+0x18c>
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	089b      	lsrs	r3, r3, #2
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d103      	bne.n	8003840 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fb4a 	bl	8003ed2 <I2C_MasterReceive_RXNE>
 800383e:	e011      	b.n	8003864 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	089b      	lsrs	r3, r3, #2
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 809a 	beq.w	8003982 <HAL_I2C_EV_IRQHandler+0x2ce>
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	0a5b      	lsrs	r3, r3, #9
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8093 	beq.w	8003982 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fbe9 	bl	8004034 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003862:	e08e      	b.n	8003982 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003864:	e08d      	b.n	8003982 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d004      	beq.n	8003878 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	e007      	b.n	8003888 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	085b      	lsrs	r3, r3, #1
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d012      	beq.n	80038ba <HAL_I2C_EV_IRQHandler+0x206>
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	0a5b      	lsrs	r3, r3, #9
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00c      	beq.n	80038ba <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80038b0:	69b9      	ldr	r1, [r7, #24]
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 ffa7 	bl	8004806 <I2C_Slave_ADDR>
 80038b8:	e066      	b.n	8003988 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_I2C_EV_IRQHandler+0x226>
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	0a5b      	lsrs	r3, r3, #9
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 ffdc 	bl	8004890 <I2C_Slave_STOPF>
 80038d8:	e056      	b.n	8003988 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038da:	7bbb      	ldrb	r3, [r7, #14]
 80038dc:	2b21      	cmp	r3, #33	; 0x21
 80038de:	d002      	beq.n	80038e6 <HAL_I2C_EV_IRQHandler+0x232>
 80038e0:	7bbb      	ldrb	r3, [r7, #14]
 80038e2:	2b29      	cmp	r3, #41	; 0x29
 80038e4:	d125      	bne.n	8003932 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	09db      	lsrs	r3, r3, #7
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00f      	beq.n	8003912 <HAL_I2C_EV_IRQHandler+0x25e>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	0a9b      	lsrs	r3, r3, #10
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <HAL_I2C_EV_IRQHandler+0x25e>
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d103      	bne.n	8003912 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 febd 	bl	800468a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003910:	e039      	b.n	8003986 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d033      	beq.n	8003986 <HAL_I2C_EV_IRQHandler+0x2d2>
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	0a5b      	lsrs	r3, r3, #9
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d02d      	beq.n	8003986 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 feea 	bl	8004704 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003930:	e029      	b.n	8003986 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	099b      	lsrs	r3, r3, #6
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00f      	beq.n	800395e <HAL_I2C_EV_IRQHandler+0x2aa>
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	0a9b      	lsrs	r3, r3, #10
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <HAL_I2C_EV_IRQHandler+0x2aa>
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	089b      	lsrs	r3, r3, #2
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 fef5 	bl	8004746 <I2C_SlaveReceive_RXNE>
 800395c:	e014      	b.n	8003988 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	089b      	lsrs	r3, r3, #2
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00e      	beq.n	8003988 <HAL_I2C_EV_IRQHandler+0x2d4>
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	0a5b      	lsrs	r3, r3, #9
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d008      	beq.n	8003988 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 ff23 	bl	80047c2 <I2C_SlaveReceive_BTF>
 800397c:	e004      	b.n	8003988 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800397e:	bf00      	nop
 8003980:	e002      	b.n	8003988 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003982:	bf00      	nop
 8003984:	e000      	b.n	8003988 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003986:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003988:	3720      	adds	r7, #32
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b08a      	sub	sp, #40	; 0x28
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80039a6:	2300      	movs	r3, #0
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00e      	beq.n	80039dc <HAL_I2C_ER_IRQHandler+0x4e>
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039da:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	0a5b      	lsrs	r3, r3, #9
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00e      	beq.n	8003a06 <HAL_I2C_ER_IRQHandler+0x78>
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	0a1b      	lsrs	r3, r3, #8
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	f043 0302 	orr.w	r3, r3, #2
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003a04:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	0a9b      	lsrs	r3, r3, #10
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d03f      	beq.n	8003a92 <HAL_I2C_ER_IRQHandler+0x104>
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	0a1b      	lsrs	r3, r3, #8
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d039      	beq.n	8003a92 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003a1e:	7efb      	ldrb	r3, [r7, #27]
 8003a20:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a30:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003a38:	7ebb      	ldrb	r3, [r7, #26]
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d112      	bne.n	8003a64 <HAL_I2C_ER_IRQHandler+0xd6>
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10f      	bne.n	8003a64 <HAL_I2C_ER_IRQHandler+0xd6>
 8003a44:	7cfb      	ldrb	r3, [r7, #19]
 8003a46:	2b21      	cmp	r3, #33	; 0x21
 8003a48:	d008      	beq.n	8003a5c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003a4a:	7cfb      	ldrb	r3, [r7, #19]
 8003a4c:	2b29      	cmp	r3, #41	; 0x29
 8003a4e:	d005      	beq.n	8003a5c <HAL_I2C_ER_IRQHandler+0xce>
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	2b28      	cmp	r3, #40	; 0x28
 8003a54:	d106      	bne.n	8003a64 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b21      	cmp	r3, #33	; 0x21
 8003a5a:	d103      	bne.n	8003a64 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f001 f847 	bl	8004af0 <I2C_Slave_AF>
 8003a62:	e016      	b.n	8003a92 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a6c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	f043 0304 	orr.w	r3, r3, #4
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a76:	7efb      	ldrb	r3, [r7, #27]
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d002      	beq.n	8003a82 <HAL_I2C_ER_IRQHandler+0xf4>
 8003a7c:	7efb      	ldrb	r3, [r7, #27]
 8003a7e:	2b40      	cmp	r3, #64	; 0x40
 8003a80:	d107      	bne.n	8003a92 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a90:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	0adb      	lsrs	r3, r3, #11
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00e      	beq.n	8003abc <HAL_I2C_ER_IRQHandler+0x12e>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	0a1b      	lsrs	r3, r3, #8
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	f043 0308 	orr.w	r3, r3, #8
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003aba:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d008      	beq.n	8003ad4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f001 f87e 	bl	8004bd0 <I2C_ITError>
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	3728      	adds	r7, #40	; 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	460b      	mov	r3, r1
 8003b36:	70fb      	strb	r3, [r7, #3]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d150      	bne.n	8003c74 <I2C_MasterTransmit_TXE+0xc8>
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b21      	cmp	r3, #33	; 0x21
 8003bd6:	d14d      	bne.n	8003c74 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d01d      	beq.n	8003c1a <I2C_MasterTransmit_TXE+0x6e>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d01a      	beq.n	8003c1a <I2C_MasterTransmit_TXE+0x6e>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bea:	d016      	beq.n	8003c1a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bfa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2211      	movs	r2, #17
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff ff62 	bl	8003adc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c18:	e060      	b.n	8003cdc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c28:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c38:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b40      	cmp	r3, #64	; 0x40
 8003c52:	d107      	bne.n	8003c64 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff ff7d 	bl	8003b5c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c62:	e03b      	b.n	8003cdc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff ff35 	bl	8003adc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c72:	e033      	b.n	8003cdc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b21      	cmp	r3, #33	; 0x21
 8003c78:	d005      	beq.n	8003c86 <I2C_MasterTransmit_TXE+0xda>
 8003c7a:	7bbb      	ldrb	r3, [r7, #14]
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d12d      	bne.n	8003cdc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	2b22      	cmp	r3, #34	; 0x22
 8003c84:	d12a      	bne.n	8003cdc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d108      	bne.n	8003ca2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ca0:	e01c      	b.n	8003cdc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b40      	cmp	r3, #64	; 0x40
 8003cac:	d103      	bne.n	8003cb6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f880 	bl	8003db4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003cb4:	e012      	b.n	8003cdc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	781a      	ldrb	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cda:	e7ff      	b.n	8003cdc <I2C_MasterTransmit_TXE+0x130>
 8003cdc:	bf00      	nop
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b21      	cmp	r3, #33	; 0x21
 8003cfc:	d156      	bne.n	8003dac <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d012      	beq.n	8003d2e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003d2c:	e03e      	b.n	8003dac <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d01d      	beq.n	8003d70 <I2C_MasterTransmit_BTF+0x8c>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d01a      	beq.n	8003d70 <I2C_MasterTransmit_BTF+0x8c>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d40:	d016      	beq.n	8003d70 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d50:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2211      	movs	r2, #17
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff feb7 	bl	8003adc <HAL_I2C_MasterTxCpltCallback>
}
 8003d6e:	e01d      	b.n	8003dac <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d7e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fe98 	bl	8003adc <HAL_I2C_MasterTxCpltCallback>
}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d11d      	bne.n	8003e08 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d10b      	bne.n	8003dec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de4:	1c9a      	adds	r2, r3, #2
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003dea:	e06e      	b.n	8003eca <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	121b      	asrs	r3, r3, #8
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e06:	e060      	b.n	8003eca <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d10b      	bne.n	8003e28 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e26:	e050      	b.n	8003eca <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d14c      	bne.n	8003eca <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b22      	cmp	r3, #34	; 0x22
 8003e34:	d108      	bne.n	8003e48 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e44:	601a      	str	r2, [r3, #0]
}
 8003e46:	e040      	b.n	8003eca <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d015      	beq.n	8003e7e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	2b21      	cmp	r3, #33	; 0x21
 8003e56:	d112      	bne.n	8003e7e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	781a      	ldrb	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e7c:	e025      	b.n	8003eca <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d120      	bne.n	8003eca <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b21      	cmp	r3, #33	; 0x21
 8003e8c:	d11d      	bne.n	8003eca <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e9c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eac:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff fe49 	bl	8003b5c <HAL_I2C_MemTxCpltCallback>
}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b22      	cmp	r3, #34	; 0x22
 8003ee4:	f040 80a2 	bne.w	800402c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d921      	bls.n	8003f3a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	f040 8082 	bne.w	800402c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f36:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003f38:	e078      	b.n	800402c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d074      	beq.n	800402c <I2C_MasterReceive_RXNE+0x15a>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d002      	beq.n	8003f4e <I2C_MasterReceive_RXNE+0x7c>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d16e      	bne.n	800402c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f001 faee 	bl	8005530 <I2C_WaitOnSTOPRequestThroughIT>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d142      	bne.n	8003fe0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f68:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f78:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b40      	cmp	r3, #64	; 0x40
 8003fb2:	d10a      	bne.n	8003fca <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff fdd4 	bl	8003b70 <HAL_I2C_MemRxCpltCallback>
}
 8003fc8:	e030      	b.n	800402c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2212      	movs	r2, #18
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff fd89 	bl	8003af0 <HAL_I2C_MasterRxCpltCallback>
}
 8003fde:	e025      	b.n	800402c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691a      	ldr	r2, [r3, #16]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29a      	uxth	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fdac 	bl	8003b84 <HAL_I2C_ErrorCallback>
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b04      	cmp	r3, #4
 800404a:	d11b      	bne.n	8004084 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004082:	e0bd      	b.n	8004200 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b03      	cmp	r3, #3
 800408c:	d129      	bne.n	80040e2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800409c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d00a      	beq.n	80040ba <I2C_MasterReceive_BTF+0x86>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d007      	beq.n	80040ba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040e0:	e08e      	b.n	8004200 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d176      	bne.n	80041da <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d002      	beq.n	80040f8 <I2C_MasterReceive_BTF+0xc4>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d108      	bne.n	800410a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e019      	b.n	800413e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b04      	cmp	r3, #4
 800410e:	d002      	beq.n	8004116 <I2C_MasterReceive_BTF+0xe2>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b02      	cmp	r3, #2
 8004114:	d108      	bne.n	8004128 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	e00a      	b.n	800413e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b10      	cmp	r3, #16
 800412c:	d007      	beq.n	800413e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800413c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004198:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b40      	cmp	r3, #64	; 0x40
 80041ac:	d10a      	bne.n	80041c4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff fcd7 	bl	8003b70 <HAL_I2C_MemRxCpltCallback>
}
 80041c2:	e01d      	b.n	8004200 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2212      	movs	r2, #18
 80041d0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff fc8c 	bl	8003af0 <HAL_I2C_MasterRxCpltCallback>
}
 80041d8:	e012      	b.n	8004200 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691a      	ldr	r2, [r3, #16]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004200:	bf00      	nop
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b40      	cmp	r3, #64	; 0x40
 800421a:	d117      	bne.n	800424c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004220:	2b00      	cmp	r3, #0
 8004222:	d109      	bne.n	8004238 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	b2db      	uxtb	r3, r3
 800422a:	461a      	mov	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004234:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004236:	e067      	b.n	8004308 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	b2db      	uxtb	r3, r3
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	611a      	str	r2, [r3, #16]
}
 800424a:	e05d      	b.n	8004308 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004254:	d133      	bne.n	80042be <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b21      	cmp	r3, #33	; 0x21
 8004260:	d109      	bne.n	8004276 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	b2db      	uxtb	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004272:	611a      	str	r2, [r3, #16]
 8004274:	e008      	b.n	8004288 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427a:	b2db      	uxtb	r3, r3
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	b2da      	uxtb	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	2b00      	cmp	r3, #0
 800428e:	d004      	beq.n	800429a <I2C_Master_SB+0x92>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d108      	bne.n	80042ac <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d032      	beq.n	8004308 <I2C_Master_SB+0x100>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d02d      	beq.n	8004308 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ba:	605a      	str	r2, [r3, #4]
}
 80042bc:	e024      	b.n	8004308 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10e      	bne.n	80042e4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	11db      	asrs	r3, r3, #7
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f003 0306 	and.w	r3, r3, #6
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f063 030f 	orn	r3, r3, #15
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	611a      	str	r2, [r3, #16]
}
 80042e2:	e011      	b.n	8004308 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d10d      	bne.n	8004308 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	11db      	asrs	r3, r3, #7
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f003 0306 	and.w	r3, r3, #6
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f063 030e 	orn	r3, r3, #14
 8004300:	b2da      	uxtb	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	611a      	str	r2, [r3, #16]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004320:	b2da      	uxtb	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432c:	2b00      	cmp	r3, #0
 800432e:	d103      	bne.n	8004338 <I2C_Master_ADD10+0x24>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	2b00      	cmp	r3, #0
 8004336:	d011      	beq.n	800435c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <I2C_Master_ADD10+0x38>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004348:	2b00      	cmp	r3, #0
 800434a:	d007      	beq.n	800435c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800435a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004368:	b480      	push	{r7}
 800436a:	b091      	sub	sp, #68	; 0x44
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004376:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b22      	cmp	r3, #34	; 0x22
 8004390:	f040 8169 	bne.w	8004666 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10f      	bne.n	80043bc <I2C_Master_ADDR+0x54>
 800439c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d10b      	bne.n	80043bc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a4:	2300      	movs	r3, #0
 80043a6:	633b      	str	r3, [r7, #48]	; 0x30
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	633b      	str	r3, [r7, #48]	; 0x30
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	e160      	b.n	800467e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d11d      	bne.n	8004400 <I2C_Master_ADDR+0x98>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043cc:	d118      	bne.n	8004400 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ce:	2300      	movs	r3, #0
 80043d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043f2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	651a      	str	r2, [r3, #80]	; 0x50
 80043fe:	e13e      	b.n	800467e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d113      	bne.n	8004432 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440a:	2300      	movs	r3, #0
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	e115      	b.n	800465e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	f040 808a 	bne.w	8004552 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004440:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004444:	d137      	bne.n	80044b6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004454:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004464:	d113      	bne.n	800448e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004474:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004476:	2300      	movs	r3, #0
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	e0e7      	b.n	800465e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448e:	2300      	movs	r3, #0
 8004490:	623b      	str	r3, [r7, #32]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	623b      	str	r3, [r7, #32]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	623b      	str	r3, [r7, #32]
 80044a2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	e0d3      	b.n	800465e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80044b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d02e      	beq.n	800451a <I2C_Master_ADDR+0x1b2>
 80044bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d02b      	beq.n	800451a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80044c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c4:	2b12      	cmp	r3, #18
 80044c6:	d102      	bne.n	80044ce <I2C_Master_ADDR+0x166>
 80044c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d125      	bne.n	800451a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d00e      	beq.n	80044f2 <I2C_Master_ADDR+0x18a>
 80044d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d00b      	beq.n	80044f2 <I2C_Master_ADDR+0x18a>
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d008      	beq.n	80044f2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e007      	b.n	8004502 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004500:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	e0a1      	b.n	800465e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004528:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452a:	2300      	movs	r3, #0
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	e085      	b.n	800465e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d14d      	bne.n	80045f8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800455c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455e:	2b04      	cmp	r3, #4
 8004560:	d016      	beq.n	8004590 <I2C_Master_ADDR+0x228>
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	2b02      	cmp	r3, #2
 8004566:	d013      	beq.n	8004590 <I2C_Master_ADDR+0x228>
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	2b10      	cmp	r3, #16
 800456c:	d010      	beq.n	8004590 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800457c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	e007      	b.n	80045a0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800459e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ae:	d117      	bne.n	80045e0 <I2C_Master_ADDR+0x278>
 80045b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045b6:	d00b      	beq.n	80045d0 <I2C_Master_ADDR+0x268>
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d008      	beq.n	80045d0 <I2C_Master_ADDR+0x268>
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d005      	beq.n	80045d0 <I2C_Master_ADDR+0x268>
 80045c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d002      	beq.n	80045d0 <I2C_Master_ADDR+0x268>
 80045ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d107      	bne.n	80045e0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045de:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	e032      	b.n	800465e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004606:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004616:	d117      	bne.n	8004648 <I2C_Master_ADDR+0x2e0>
 8004618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800461e:	d00b      	beq.n	8004638 <I2C_Master_ADDR+0x2d0>
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	2b01      	cmp	r3, #1
 8004624:	d008      	beq.n	8004638 <I2C_Master_ADDR+0x2d0>
 8004626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004628:	2b08      	cmp	r3, #8
 800462a:	d005      	beq.n	8004638 <I2C_Master_ADDR+0x2d0>
 800462c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462e:	2b10      	cmp	r3, #16
 8004630:	d002      	beq.n	8004638 <I2C_Master_ADDR+0x2d0>
 8004632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004634:	2b20      	cmp	r3, #32
 8004636:	d107      	bne.n	8004648 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004646:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004664:	e00b      	b.n	800467e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
}
 800467c:	e7ff      	b.n	800467e <I2C_Master_ADDR+0x316>
 800467e:	bf00      	nop
 8004680:	3744      	adds	r7, #68	; 0x44
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004698:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d02b      	beq.n	80046fc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	781a      	ldrb	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d114      	bne.n	80046fc <I2C_SlaveTransmit_TXE+0x72>
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b29      	cmp	r3, #41	; 0x29
 80046d6:	d111      	bne.n	80046fc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2221      	movs	r2, #33	; 0x21
 80046ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2228      	movs	r2, #40	; 0x28
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff fa04 	bl	8003b04 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80046fc:	bf00      	nop
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d011      	beq.n	800473a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	781a      	ldrb	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004754:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475a:	b29b      	uxth	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d02c      	beq.n	80047ba <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d114      	bne.n	80047ba <I2C_SlaveReceive_RXNE+0x74>
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b2a      	cmp	r3, #42	; 0x2a
 8004794:	d111      	bne.n	80047ba <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2222      	movs	r2, #34	; 0x22
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2228      	movs	r2, #40	; 0x28
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff f9af 	bl	8003b18 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d012      	beq.n	80047fa <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004810:	2300      	movs	r3, #0
 8004812:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004820:	2b28      	cmp	r3, #40	; 0x28
 8004822:	d127      	bne.n	8004874 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004832:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	089b      	lsrs	r3, r3, #2
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	09db      	lsrs	r3, r3, #7
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	81bb      	strh	r3, [r7, #12]
 8004856:	e002      	b.n	800485e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004866:	89ba      	ldrh	r2, [r7, #12]
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff f95d 	bl	8003b2c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004872:	e008      	b.n	8004886 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0202 	mvn.w	r2, #2
 800487c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80048b0:	2300      	movs	r3, #0
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	60bb      	str	r3, [r7, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ec:	d172      	bne.n	80049d4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	2b22      	cmp	r3, #34	; 0x22
 80048f2:	d002      	beq.n	80048fa <I2C_Slave_STOPF+0x6a>
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b2a      	cmp	r3, #42	; 0x2a
 80048f8:	d135      	bne.n	8004966 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	b29a      	uxth	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f043 0204 	orr.w	r2, r3, #4
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800492c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	4618      	mov	r0, r3
 8004934:	f7fe f8bd 	bl	8002ab2 <HAL_DMA_GetState>
 8004938:	4603      	mov	r3, r0
 800493a:	2b01      	cmp	r3, #1
 800493c:	d049      	beq.n	80049d2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	4a69      	ldr	r2, [pc, #420]	; (8004ae8 <I2C_Slave_STOPF+0x258>)
 8004944:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe f88f 	bl	8002a6e <HAL_DMA_Abort_IT>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d03d      	beq.n	80049d2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004960:	4610      	mov	r0, r2
 8004962:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004964:	e035      	b.n	80049d2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	b29a      	uxth	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f043 0204 	orr.w	r2, r3, #4
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004998:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fe f887 	bl	8002ab2 <HAL_DMA_GetState>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d014      	beq.n	80049d4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ae:	4a4e      	ldr	r2, [pc, #312]	; (8004ae8 <I2C_Slave_STOPF+0x258>)
 80049b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fe f859 	bl	8002a6e <HAL_DMA_Abort_IT>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049cc:	4610      	mov	r0, r2
 80049ce:	4798      	blx	r3
 80049d0:	e000      	b.n	80049d4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049d2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d03e      	beq.n	8004a5c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d112      	bne.n	8004a12 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d112      	bne.n	8004a46 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	f043 0204 	orr.w	r2, r3, #4
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f8b3 	bl	8004bd0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004a6a:	e039      	b.n	8004ae0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a70:	d109      	bne.n	8004a86 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2228      	movs	r2, #40	; 0x28
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff f849 	bl	8003b18 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b28      	cmp	r3, #40	; 0x28
 8004a90:	d111      	bne.n	8004ab6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a15      	ldr	r2, [pc, #84]	; (8004aec <I2C_Slave_STOPF+0x25c>)
 8004a96:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff f84a 	bl	8003b48 <HAL_I2C_ListenCpltCallback>
}
 8004ab4:	e014      	b.n	8004ae0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	2b22      	cmp	r3, #34	; 0x22
 8004abc:	d002      	beq.n	8004ac4 <I2C_Slave_STOPF+0x234>
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	2b22      	cmp	r3, #34	; 0x22
 8004ac2:	d10d      	bne.n	8004ae0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff f81c 	bl	8003b18 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	08005131 	.word	0x08005131
 8004aec:	ffff0000 	.word	0xffff0000

08004af0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d002      	beq.n	8004b12 <I2C_Slave_AF+0x22>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d129      	bne.n	8004b66 <I2C_Slave_AF+0x76>
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	2b28      	cmp	r3, #40	; 0x28
 8004b16:	d126      	bne.n	8004b66 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a2c      	ldr	r2, [pc, #176]	; (8004bcc <I2C_Slave_AF+0xdc>)
 8004b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b2c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b36:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b46:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fe fff2 	bl	8003b48 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004b64:	e02e      	b.n	8004bc4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	2b21      	cmp	r3, #33	; 0x21
 8004b6a:	d126      	bne.n	8004bba <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a17      	ldr	r2, [pc, #92]	; (8004bcc <I2C_Slave_AF+0xdc>)
 8004b70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2221      	movs	r2, #33	; 0x21
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b96:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ba0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fe ffa6 	bl	8003b04 <HAL_I2C_SlaveTxCpltCallback>
}
 8004bb8:	e004      	b.n	8004bc4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bc2:	615a      	str	r2, [r3, #20]
}
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	ffff0000 	.word	0xffff0000

08004bd0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004be6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004be8:	7bbb      	ldrb	r3, [r7, #14]
 8004bea:	2b10      	cmp	r3, #16
 8004bec:	d002      	beq.n	8004bf4 <I2C_ITError+0x24>
 8004bee:	7bbb      	ldrb	r3, [r7, #14]
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d10a      	bne.n	8004c0a <I2C_ITError+0x3a>
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	2b22      	cmp	r3, #34	; 0x22
 8004bf8:	d107      	bne.n	8004c0a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c10:	2b28      	cmp	r3, #40	; 0x28
 8004c12:	d107      	bne.n	8004c24 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2228      	movs	r2, #40	; 0x28
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c22:	e015      	b.n	8004c50 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c32:	d00a      	beq.n	8004c4a <I2C_ITError+0x7a>
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	2b60      	cmp	r3, #96	; 0x60
 8004c38:	d007      	beq.n	8004c4a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c5e:	d162      	bne.n	8004d26 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d020      	beq.n	8004cc0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c82:	4a6a      	ldr	r2, [pc, #424]	; (8004e2c <I2C_ITError+0x25c>)
 8004c84:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fd feef 	bl	8002a6e <HAL_DMA_Abort_IT>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8089 	beq.w	8004daa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0201 	bic.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cba:	4610      	mov	r0, r2
 8004cbc:	4798      	blx	r3
 8004cbe:	e074      	b.n	8004daa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	4a59      	ldr	r2, [pc, #356]	; (8004e2c <I2C_ITError+0x25c>)
 8004cc6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fd fece 	bl	8002a6e <HAL_DMA_Abort_IT>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d068      	beq.n	8004daa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b40      	cmp	r3, #64	; 0x40
 8004ce4:	d10b      	bne.n	8004cfe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	691a      	ldr	r2, [r3, #16]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0201 	bic.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d20:	4610      	mov	r0, r2
 8004d22:	4798      	blx	r3
 8004d24:	e041      	b.n	8004daa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b60      	cmp	r3, #96	; 0x60
 8004d30:	d125      	bne.n	8004d7e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d10b      	bne.n	8004d66 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fe ff0e 	bl	8003b98 <HAL_I2C_AbortCpltCallback>
 8004d7c:	e015      	b.n	8004daa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d88:	2b40      	cmp	r3, #64	; 0x40
 8004d8a:	d10b      	bne.n	8004da4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fe feed 	bl	8003b84 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10e      	bne.n	8004dd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d109      	bne.n	8004dd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d104      	bne.n	8004dd8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d007      	beq.n	8004de8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004de6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d113      	bne.n	8004e24 <I2C_ITError+0x254>
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b28      	cmp	r3, #40	; 0x28
 8004e00:	d110      	bne.n	8004e24 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a0a      	ldr	r2, [pc, #40]	; (8004e30 <I2C_ITError+0x260>)
 8004e06:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fe fe92 	bl	8003b48 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e24:	bf00      	nop
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	08005131 	.word	0x08005131
 8004e30:	ffff0000 	.word	0xffff0000

08004e34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	4611      	mov	r1, r2
 8004e40:	461a      	mov	r2, r3
 8004e42:	4603      	mov	r3, r0
 8004e44:	817b      	strh	r3, [r7, #10]
 8004e46:	460b      	mov	r3, r1
 8004e48:	813b      	strh	r3, [r7, #8]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 fa08 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00d      	beq.n	8004e92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e84:	d103      	bne.n	8004e8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e05f      	b.n	8004f52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e92:	897b      	ldrh	r3, [r7, #10]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ea0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	6a3a      	ldr	r2, [r7, #32]
 8004ea6:	492d      	ldr	r1, [pc, #180]	; (8004f5c <I2C_RequestMemoryWrite+0x128>)
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 fa40 	bl	800532e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e04c      	b.n	8004f52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed0:	6a39      	ldr	r1, [r7, #32]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 faaa 	bl	800542c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00d      	beq.n	8004efa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d107      	bne.n	8004ef6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e02b      	b.n	8004f52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d105      	bne.n	8004f0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f00:	893b      	ldrh	r3, [r7, #8]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	611a      	str	r2, [r3, #16]
 8004f0a:	e021      	b.n	8004f50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f0c:	893b      	ldrh	r3, [r7, #8]
 8004f0e:	0a1b      	lsrs	r3, r3, #8
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1c:	6a39      	ldr	r1, [r7, #32]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 fa84 	bl	800542c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00d      	beq.n	8004f46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d107      	bne.n	8004f42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e005      	b.n	8004f52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f46:	893b      	ldrh	r3, [r7, #8]
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	00010002 	.word	0x00010002

08004f60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af02      	add	r7, sp, #8
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	4608      	mov	r0, r1
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4603      	mov	r3, r0
 8004f70:	817b      	strh	r3, [r7, #10]
 8004f72:	460b      	mov	r3, r1
 8004f74:	813b      	strh	r3, [r7, #8]
 8004f76:	4613      	mov	r3, r2
 8004f78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f96a 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00d      	beq.n	8004fce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc0:	d103      	bne.n	8004fca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e0aa      	b.n	8005124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fce:	897b      	ldrh	r3, [r7, #10]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	6a3a      	ldr	r2, [r7, #32]
 8004fe2:	4952      	ldr	r1, [pc, #328]	; (800512c <I2C_RequestMemoryRead+0x1cc>)
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f9a2 	bl	800532e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e097      	b.n	8005124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800500a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500c:	6a39      	ldr	r1, [r7, #32]
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fa0c 	bl	800542c <I2C_WaitOnTXEFlagUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00d      	beq.n	8005036 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	2b04      	cmp	r3, #4
 8005020:	d107      	bne.n	8005032 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005030:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e076      	b.n	8005124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d105      	bne.n	8005048 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800503c:	893b      	ldrh	r3, [r7, #8]
 800503e:	b2da      	uxtb	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	611a      	str	r2, [r3, #16]
 8005046:	e021      	b.n	800508c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005048:	893b      	ldrh	r3, [r7, #8]
 800504a:	0a1b      	lsrs	r3, r3, #8
 800504c:	b29b      	uxth	r3, r3
 800504e:	b2da      	uxtb	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005058:	6a39      	ldr	r1, [r7, #32]
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f9e6 	bl	800542c <I2C_WaitOnTXEFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00d      	beq.n	8005082 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	2b04      	cmp	r3, #4
 800506c:	d107      	bne.n	800507e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800507c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e050      	b.n	8005124 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005082:	893b      	ldrh	r3, [r7, #8]
 8005084:	b2da      	uxtb	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800508c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508e:	6a39      	ldr	r1, [r7, #32]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f9cb 	bl	800542c <I2C_WaitOnTXEFlagUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00d      	beq.n	80050b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d107      	bne.n	80050b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e035      	b.n	8005124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 f8d3 	bl	8005280 <I2C_WaitOnFlagUntilTimeout>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00d      	beq.n	80050fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ee:	d103      	bne.n	80050f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e013      	b.n	8005124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050fc:	897b      	ldrh	r3, [r7, #10]
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	b2da      	uxtb	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	6a3a      	ldr	r2, [r7, #32]
 8005110:	4906      	ldr	r1, [pc, #24]	; (800512c <I2C_RequestMemoryRead+0x1cc>)
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 f90b 	bl	800532e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	00010002 	.word	0x00010002

08005130 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005148:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800514a:	4b4b      	ldr	r3, [pc, #300]	; (8005278 <I2C_DMAAbort+0x148>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	08db      	lsrs	r3, r3, #3
 8005150:	4a4a      	ldr	r2, [pc, #296]	; (800527c <I2C_DMAAbort+0x14c>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	0a1a      	lsrs	r2, r3, #8
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	00da      	lsls	r2, r3, #3
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f043 0220 	orr.w	r2, r3, #32
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005176:	e00a      	b.n	800518e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3b01      	subs	r3, #1
 800517c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800518c:	d0ea      	beq.n	8005164 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519a:	2200      	movs	r2, #0
 800519c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	2200      	movs	r2, #0
 80051ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2200      	movs	r2, #0
 80051c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d0:	2200      	movs	r2, #0
 80051d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	2200      	movs	r2, #0
 80051e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0201 	bic.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b60      	cmp	r3, #96	; 0x60
 80051fe:	d10e      	bne.n	800521e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2200      	movs	r2, #0
 8005214:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005216:	6978      	ldr	r0, [r7, #20]
 8005218:	f7fe fcbe 	bl	8003b98 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800521c:	e027      	b.n	800526e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800521e:	7cfb      	ldrb	r3, [r7, #19]
 8005220:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005224:	2b28      	cmp	r3, #40	; 0x28
 8005226:	d117      	bne.n	8005258 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0201 	orr.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005246:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2200      	movs	r2, #0
 800524c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2228      	movs	r2, #40	; 0x28
 8005252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005256:	e007      	b.n	8005268 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005268:	6978      	ldr	r0, [r7, #20]
 800526a:	f7fe fc8b 	bl	8003b84 <HAL_I2C_ErrorCallback>
}
 800526e:	bf00      	nop
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20000000 	.word	0x20000000
 800527c:	14f8b589 	.word	0x14f8b589

08005280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	4613      	mov	r3, r2
 800528e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005290:	e025      	b.n	80052de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005298:	d021      	beq.n	80052de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529a:	f7fc ff11 	bl	80020c0 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d302      	bcc.n	80052b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d116      	bne.n	80052de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	f043 0220 	orr.w	r2, r3, #32
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e023      	b.n	8005326 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	0c1b      	lsrs	r3, r3, #16
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d10d      	bne.n	8005304 <I2C_WaitOnFlagUntilTimeout+0x84>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	43da      	mvns	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4013      	ands	r3, r2
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bf0c      	ite	eq
 80052fa:	2301      	moveq	r3, #1
 80052fc:	2300      	movne	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	461a      	mov	r2, r3
 8005302:	e00c      	b.n	800531e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	43da      	mvns	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4013      	ands	r3, r2
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	bf0c      	ite	eq
 8005316:	2301      	moveq	r3, #1
 8005318:	2300      	movne	r3, #0
 800531a:	b2db      	uxtb	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	429a      	cmp	r2, r3
 8005322:	d0b6      	beq.n	8005292 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800533c:	e051      	b.n	80053e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534c:	d123      	bne.n	8005396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800535c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005366:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f043 0204 	orr.w	r2, r3, #4
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e046      	b.n	8005424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539c:	d021      	beq.n	80053e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800539e:	f7fc fe8f 	bl	80020c0 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d302      	bcc.n	80053b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d116      	bne.n	80053e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f043 0220 	orr.w	r2, r3, #32
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e020      	b.n	8005424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	0c1b      	lsrs	r3, r3, #16
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d10c      	bne.n	8005406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	43da      	mvns	r2, r3
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4013      	ands	r3, r2
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bf14      	ite	ne
 80053fe:	2301      	movne	r3, #1
 8005400:	2300      	moveq	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	e00b      	b.n	800541e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	43da      	mvns	r2, r3
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4013      	ands	r3, r2
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	bf14      	ite	ne
 8005418:	2301      	movne	r3, #1
 800541a:	2300      	moveq	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d18d      	bne.n	800533e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005438:	e02d      	b.n	8005496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 f900 	bl	8005640 <I2C_IsAcknowledgeFailed>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e02d      	b.n	80054a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005450:	d021      	beq.n	8005496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005452:	f7fc fe35 	bl	80020c0 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	429a      	cmp	r2, r3
 8005460:	d302      	bcc.n	8005468 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d116      	bne.n	8005496 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f043 0220 	orr.w	r2, r3, #32
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e007      	b.n	80054a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a0:	2b80      	cmp	r3, #128	; 0x80
 80054a2:	d1ca      	bne.n	800543a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054ba:	e02d      	b.n	8005518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f8bf 	bl	8005640 <I2C_IsAcknowledgeFailed>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e02d      	b.n	8005528 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d021      	beq.n	8005518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d4:	f7fc fdf4 	bl	80020c0 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d302      	bcc.n	80054ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d116      	bne.n	8005518 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	f043 0220 	orr.w	r2, r3, #32
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e007      	b.n	8005528 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f003 0304 	and.w	r3, r3, #4
 8005522:	2b04      	cmp	r3, #4
 8005524:	d1ca      	bne.n	80054bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3710      	adds	r7, #16
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800553c:	4b13      	ldr	r3, [pc, #76]	; (800558c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	08db      	lsrs	r3, r3, #3
 8005542:	4a13      	ldr	r2, [pc, #76]	; (8005590 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005544:	fba2 2303 	umull	r2, r3, r2, r3
 8005548:	0a1a      	lsrs	r2, r3, #8
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3b01      	subs	r3, #1
 8005556:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d107      	bne.n	800556e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f043 0220 	orr.w	r2, r3, #32
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e008      	b.n	8005580 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800557c:	d0e9      	beq.n	8005552 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	20000000 	.word	0x20000000
 8005590:	14f8b589 	.word	0x14f8b589

08005594 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a0:	e042      	b.n	8005628 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d119      	bne.n	80055e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0210 	mvn.w	r2, #16
 80055b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e029      	b.n	8005638 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e4:	f7fc fd6c 	bl	80020c0 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d302      	bcc.n	80055fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d116      	bne.n	8005628 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e007      	b.n	8005638 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005632:	2b40      	cmp	r3, #64	; 0x40
 8005634:	d1b5      	bne.n	80055a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005656:	d11b      	bne.n	8005690 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005660:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	f043 0204 	orr.w	r2, r3, #4
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e000      	b.n	8005692 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056aa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80056ae:	d103      	bne.n	80056b8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80056b6:	e007      	b.n	80056c8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80056c0:	d102      	bne.n	80056c8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2208      	movs	r2, #8
 80056c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e25b      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d075      	beq.n	80057de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056f2:	4ba3      	ldr	r3, [pc, #652]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 030c 	and.w	r3, r3, #12
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d00c      	beq.n	8005718 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056fe:	4ba0      	ldr	r3, [pc, #640]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005706:	2b08      	cmp	r3, #8
 8005708:	d112      	bne.n	8005730 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800570a:	4b9d      	ldr	r3, [pc, #628]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005716:	d10b      	bne.n	8005730 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005718:	4b99      	ldr	r3, [pc, #612]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d05b      	beq.n	80057dc <HAL_RCC_OscConfig+0x108>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d157      	bne.n	80057dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e236      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005738:	d106      	bne.n	8005748 <HAL_RCC_OscConfig+0x74>
 800573a:	4b91      	ldr	r3, [pc, #580]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a90      	ldr	r2, [pc, #576]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	e01d      	b.n	8005784 <HAL_RCC_OscConfig+0xb0>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005750:	d10c      	bne.n	800576c <HAL_RCC_OscConfig+0x98>
 8005752:	4b8b      	ldr	r3, [pc, #556]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a8a      	ldr	r2, [pc, #552]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	4b88      	ldr	r3, [pc, #544]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a87      	ldr	r2, [pc, #540]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	e00b      	b.n	8005784 <HAL_RCC_OscConfig+0xb0>
 800576c:	4b84      	ldr	r3, [pc, #528]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a83      	ldr	r2, [pc, #524]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	4b81      	ldr	r3, [pc, #516]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a80      	ldr	r2, [pc, #512]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 800577e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d013      	beq.n	80057b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578c:	f7fc fc98 	bl	80020c0 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005792:	e008      	b.n	80057a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005794:	f7fc fc94 	bl	80020c0 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b64      	cmp	r3, #100	; 0x64
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e1fb      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a6:	4b76      	ldr	r3, [pc, #472]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0f0      	beq.n	8005794 <HAL_RCC_OscConfig+0xc0>
 80057b2:	e014      	b.n	80057de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b4:	f7fc fc84 	bl	80020c0 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057bc:	f7fc fc80 	bl	80020c0 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b64      	cmp	r3, #100	; 0x64
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e1e7      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ce:	4b6c      	ldr	r3, [pc, #432]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1f0      	bne.n	80057bc <HAL_RCC_OscConfig+0xe8>
 80057da:	e000      	b.n	80057de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d063      	beq.n	80058b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057ea:	4b65      	ldr	r3, [pc, #404]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 030c 	and.w	r3, r3, #12
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057f6:	4b62      	ldr	r3, [pc, #392]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d11c      	bne.n	800583c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005802:	4b5f      	ldr	r3, [pc, #380]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d116      	bne.n	800583c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800580e:	4b5c      	ldr	r3, [pc, #368]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <HAL_RCC_OscConfig+0x152>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d001      	beq.n	8005826 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e1bb      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005826:	4b56      	ldr	r3, [pc, #344]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	4952      	ldr	r1, [pc, #328]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005836:	4313      	orrs	r3, r2
 8005838:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800583a:	e03a      	b.n	80058b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d020      	beq.n	8005886 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005844:	4b4f      	ldr	r3, [pc, #316]	; (8005984 <HAL_RCC_OscConfig+0x2b0>)
 8005846:	2201      	movs	r2, #1
 8005848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584a:	f7fc fc39 	bl	80020c0 <HAL_GetTick>
 800584e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005850:	e008      	b.n	8005864 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005852:	f7fc fc35 	bl	80020c0 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d901      	bls.n	8005864 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e19c      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005864:	4b46      	ldr	r3, [pc, #280]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0f0      	beq.n	8005852 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005870:	4b43      	ldr	r3, [pc, #268]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	4940      	ldr	r1, [pc, #256]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005880:	4313      	orrs	r3, r2
 8005882:	600b      	str	r3, [r1, #0]
 8005884:	e015      	b.n	80058b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005886:	4b3f      	ldr	r3, [pc, #252]	; (8005984 <HAL_RCC_OscConfig+0x2b0>)
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588c:	f7fc fc18 	bl	80020c0 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005894:	f7fc fc14 	bl	80020c0 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e17b      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058a6:	4b36      	ldr	r3, [pc, #216]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1f0      	bne.n	8005894 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d030      	beq.n	8005920 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d016      	beq.n	80058f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058c6:	4b30      	ldr	r3, [pc, #192]	; (8005988 <HAL_RCC_OscConfig+0x2b4>)
 80058c8:	2201      	movs	r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058cc:	f7fc fbf8 	bl	80020c0 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058d4:	f7fc fbf4 	bl	80020c0 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e15b      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058e6:	4b26      	ldr	r3, [pc, #152]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 80058e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0f0      	beq.n	80058d4 <HAL_RCC_OscConfig+0x200>
 80058f2:	e015      	b.n	8005920 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058f4:	4b24      	ldr	r3, [pc, #144]	; (8005988 <HAL_RCC_OscConfig+0x2b4>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058fa:	f7fc fbe1 	bl	80020c0 <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005902:	f7fc fbdd 	bl	80020c0 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e144      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005914:	4b1a      	ldr	r3, [pc, #104]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f0      	bne.n	8005902 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80a0 	beq.w	8005a6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800592e:	2300      	movs	r3, #0
 8005930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005932:	4b13      	ldr	r3, [pc, #76]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10f      	bne.n	800595e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800593e:	2300      	movs	r3, #0
 8005940:	60bb      	str	r3, [r7, #8]
 8005942:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	4a0e      	ldr	r2, [pc, #56]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800594c:	6413      	str	r3, [r2, #64]	; 0x40
 800594e:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <HAL_RCC_OscConfig+0x2ac>)
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005956:	60bb      	str	r3, [r7, #8]
 8005958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800595a:	2301      	movs	r3, #1
 800595c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800595e:	4b0b      	ldr	r3, [pc, #44]	; (800598c <HAL_RCC_OscConfig+0x2b8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005966:	2b00      	cmp	r3, #0
 8005968:	d121      	bne.n	80059ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800596a:	4b08      	ldr	r3, [pc, #32]	; (800598c <HAL_RCC_OscConfig+0x2b8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a07      	ldr	r2, [pc, #28]	; (800598c <HAL_RCC_OscConfig+0x2b8>)
 8005970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005976:	f7fc fba3 	bl	80020c0 <HAL_GetTick>
 800597a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597c:	e011      	b.n	80059a2 <HAL_RCC_OscConfig+0x2ce>
 800597e:	bf00      	nop
 8005980:	40023800 	.word	0x40023800
 8005984:	42470000 	.word	0x42470000
 8005988:	42470e80 	.word	0x42470e80
 800598c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005990:	f7fc fb96 	bl	80020c0 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e0fd      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a2:	4b81      	ldr	r3, [pc, #516]	; (8005ba8 <HAL_RCC_OscConfig+0x4d4>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0f0      	beq.n	8005990 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d106      	bne.n	80059c4 <HAL_RCC_OscConfig+0x2f0>
 80059b6:	4b7d      	ldr	r3, [pc, #500]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	4a7c      	ldr	r2, [pc, #496]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	6713      	str	r3, [r2, #112]	; 0x70
 80059c2:	e01c      	b.n	80059fe <HAL_RCC_OscConfig+0x32a>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	2b05      	cmp	r3, #5
 80059ca:	d10c      	bne.n	80059e6 <HAL_RCC_OscConfig+0x312>
 80059cc:	4b77      	ldr	r3, [pc, #476]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 80059ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d0:	4a76      	ldr	r2, [pc, #472]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 80059d2:	f043 0304 	orr.w	r3, r3, #4
 80059d6:	6713      	str	r3, [r2, #112]	; 0x70
 80059d8:	4b74      	ldr	r3, [pc, #464]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 80059da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059dc:	4a73      	ldr	r2, [pc, #460]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 80059de:	f043 0301 	orr.w	r3, r3, #1
 80059e2:	6713      	str	r3, [r2, #112]	; 0x70
 80059e4:	e00b      	b.n	80059fe <HAL_RCC_OscConfig+0x32a>
 80059e6:	4b71      	ldr	r3, [pc, #452]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 80059e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ea:	4a70      	ldr	r2, [pc, #448]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 80059ec:	f023 0301 	bic.w	r3, r3, #1
 80059f0:	6713      	str	r3, [r2, #112]	; 0x70
 80059f2:	4b6e      	ldr	r3, [pc, #440]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 80059f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f6:	4a6d      	ldr	r2, [pc, #436]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 80059f8:	f023 0304 	bic.w	r3, r3, #4
 80059fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d015      	beq.n	8005a32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a06:	f7fc fb5b 	bl	80020c0 <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a0c:	e00a      	b.n	8005a24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a0e:	f7fc fb57 	bl	80020c0 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e0bc      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a24:	4b61      	ldr	r3, [pc, #388]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 8005a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0ee      	beq.n	8005a0e <HAL_RCC_OscConfig+0x33a>
 8005a30:	e014      	b.n	8005a5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a32:	f7fc fb45 	bl	80020c0 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a38:	e00a      	b.n	8005a50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a3a:	f7fc fb41 	bl	80020c0 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e0a6      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a50:	4b56      	ldr	r3, [pc, #344]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 8005a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1ee      	bne.n	8005a3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a5c:	7dfb      	ldrb	r3, [r7, #23]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d105      	bne.n	8005a6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a62:	4b52      	ldr	r3, [pc, #328]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	4a51      	ldr	r2, [pc, #324]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 8005a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 8092 	beq.w	8005b9c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a78:	4b4c      	ldr	r3, [pc, #304]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 030c 	and.w	r3, r3, #12
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d05c      	beq.n	8005b3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d141      	bne.n	8005b10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a8c:	4b48      	ldr	r3, [pc, #288]	; (8005bb0 <HAL_RCC_OscConfig+0x4dc>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a92:	f7fc fb15 	bl	80020c0 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a98:	e008      	b.n	8005aac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a9a:	f7fc fb11 	bl	80020c0 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e078      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aac:	4b3f      	ldr	r3, [pc, #252]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d1f0      	bne.n	8005a9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac6:	019b      	lsls	r3, r3, #6
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	085b      	lsrs	r3, r3, #1
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	041b      	lsls	r3, r3, #16
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ada:	061b      	lsls	r3, r3, #24
 8005adc:	4933      	ldr	r1, [pc, #204]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ae2:	4b33      	ldr	r3, [pc, #204]	; (8005bb0 <HAL_RCC_OscConfig+0x4dc>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae8:	f7fc faea 	bl	80020c0 <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005af0:	f7fc fae6 	bl	80020c0 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e04d      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b02:	4b2a      	ldr	r3, [pc, #168]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0f0      	beq.n	8005af0 <HAL_RCC_OscConfig+0x41c>
 8005b0e:	e045      	b.n	8005b9c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b10:	4b27      	ldr	r3, [pc, #156]	; (8005bb0 <HAL_RCC_OscConfig+0x4dc>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b16:	f7fc fad3 	bl	80020c0 <HAL_GetTick>
 8005b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b1c:	e008      	b.n	8005b30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b1e:	f7fc facf 	bl	80020c0 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e036      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b30:	4b1e      	ldr	r3, [pc, #120]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1f0      	bne.n	8005b1e <HAL_RCC_OscConfig+0x44a>
 8005b3c:	e02e      	b.n	8005b9c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d101      	bne.n	8005b4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e029      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b4a:	4b18      	ldr	r3, [pc, #96]	; (8005bac <HAL_RCC_OscConfig+0x4d8>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d11c      	bne.n	8005b98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d115      	bne.n	8005b98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b72:	4013      	ands	r3, r2
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d10d      	bne.n	8005b98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d106      	bne.n	8005b98 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d001      	beq.n	8005b9c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40007000 	.word	0x40007000
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	42470060 	.word	0x42470060

08005bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0cc      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc8:	4b68      	ldr	r3, [pc, #416]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 030f 	and.w	r3, r3, #15
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d90c      	bls.n	8005bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd6:	4b65      	ldr	r3, [pc, #404]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bde:	4b63      	ldr	r3, [pc, #396]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d001      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0b8      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d020      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c08:	4b59      	ldr	r3, [pc, #356]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	4a58      	ldr	r2, [pc, #352]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0308 	and.w	r3, r3, #8
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c20:	4b53      	ldr	r3, [pc, #332]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	4a52      	ldr	r2, [pc, #328]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c2c:	4b50      	ldr	r3, [pc, #320]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	494d      	ldr	r1, [pc, #308]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d044      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d107      	bne.n	8005c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c52:	4b47      	ldr	r3, [pc, #284]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d119      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e07f      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d003      	beq.n	8005c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d107      	bne.n	8005c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c72:	4b3f      	ldr	r3, [pc, #252]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e06f      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c82:	4b3b      	ldr	r3, [pc, #236]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e067      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c92:	4b37      	ldr	r3, [pc, #220]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f023 0203 	bic.w	r2, r3, #3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	4934      	ldr	r1, [pc, #208]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ca4:	f7fc fa0c 	bl	80020c0 <HAL_GetTick>
 8005ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005caa:	e00a      	b.n	8005cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cac:	f7fc fa08 	bl	80020c0 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e04f      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cc2:	4b2b      	ldr	r3, [pc, #172]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 020c 	and.w	r2, r3, #12
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d1eb      	bne.n	8005cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cd4:	4b25      	ldr	r3, [pc, #148]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 030f 	and.w	r3, r3, #15
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d20c      	bcs.n	8005cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce2:	4b22      	ldr	r3, [pc, #136]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cea:	4b20      	ldr	r3, [pc, #128]	; (8005d6c <HAL_RCC_ClockConfig+0x1b8>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d001      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e032      	b.n	8005d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d08:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	4916      	ldr	r1, [pc, #88]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d009      	beq.n	8005d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d26:	4b12      	ldr	r3, [pc, #72]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	490e      	ldr	r1, [pc, #56]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d3a:	f000 f821 	bl	8005d80 <HAL_RCC_GetSysClockFreq>
 8005d3e:	4601      	mov	r1, r0
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <HAL_RCC_ClockConfig+0x1bc>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	091b      	lsrs	r3, r3, #4
 8005d46:	f003 030f 	and.w	r3, r3, #15
 8005d4a:	4a0a      	ldr	r2, [pc, #40]	; (8005d74 <HAL_RCC_ClockConfig+0x1c0>)
 8005d4c:	5cd3      	ldrb	r3, [r2, r3]
 8005d4e:	fa21 f303 	lsr.w	r3, r1, r3
 8005d52:	4a09      	ldr	r2, [pc, #36]	; (8005d78 <HAL_RCC_ClockConfig+0x1c4>)
 8005d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d56:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <HAL_RCC_ClockConfig+0x1c8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fc f96c 	bl	8002038 <HAL_InitTick>

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40023c00 	.word	0x40023c00
 8005d70:	40023800 	.word	0x40023800
 8005d74:	0800a75c 	.word	0x0800a75c
 8005d78:	20000000 	.word	0x20000000
 8005d7c:	20000004 	.word	0x20000004

08005d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	607b      	str	r3, [r7, #4]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d96:	4b63      	ldr	r3, [pc, #396]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 030c 	and.w	r3, r3, #12
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d007      	beq.n	8005db2 <HAL_RCC_GetSysClockFreq+0x32>
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d008      	beq.n	8005db8 <HAL_RCC_GetSysClockFreq+0x38>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f040 80b4 	bne.w	8005f14 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005dac:	4b5e      	ldr	r3, [pc, #376]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005dae:	60bb      	str	r3, [r7, #8]
       break;
 8005db0:	e0b3      	b.n	8005f1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005db2:	4b5e      	ldr	r3, [pc, #376]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005db4:	60bb      	str	r3, [r7, #8]
      break;
 8005db6:	e0b0      	b.n	8005f1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005db8:	4b5a      	ldr	r3, [pc, #360]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dc0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dc2:	4b58      	ldr	r3, [pc, #352]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d04a      	beq.n	8005e64 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dce:	4b55      	ldr	r3, [pc, #340]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	099b      	lsrs	r3, r3, #6
 8005dd4:	f04f 0400 	mov.w	r4, #0
 8005dd8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	ea03 0501 	and.w	r5, r3, r1
 8005de4:	ea04 0602 	and.w	r6, r4, r2
 8005de8:	4629      	mov	r1, r5
 8005dea:	4632      	mov	r2, r6
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	f04f 0400 	mov.w	r4, #0
 8005df4:	0154      	lsls	r4, r2, #5
 8005df6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005dfa:	014b      	lsls	r3, r1, #5
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4622      	mov	r2, r4
 8005e00:	1b49      	subs	r1, r1, r5
 8005e02:	eb62 0206 	sbc.w	r2, r2, r6
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	f04f 0400 	mov.w	r4, #0
 8005e0e:	0194      	lsls	r4, r2, #6
 8005e10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005e14:	018b      	lsls	r3, r1, #6
 8005e16:	1a5b      	subs	r3, r3, r1
 8005e18:	eb64 0402 	sbc.w	r4, r4, r2
 8005e1c:	f04f 0100 	mov.w	r1, #0
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	00e2      	lsls	r2, r4, #3
 8005e26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005e2a:	00d9      	lsls	r1, r3, #3
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4614      	mov	r4, r2
 8005e30:	195b      	adds	r3, r3, r5
 8005e32:	eb44 0406 	adc.w	r4, r4, r6
 8005e36:	f04f 0100 	mov.w	r1, #0
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	0262      	lsls	r2, r4, #9
 8005e40:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005e44:	0259      	lsls	r1, r3, #9
 8005e46:	460b      	mov	r3, r1
 8005e48:	4614      	mov	r4, r2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f04f 0400 	mov.w	r4, #0
 8005e54:	461a      	mov	r2, r3
 8005e56:	4623      	mov	r3, r4
 8005e58:	f7fa fea2 	bl	8000ba0 <__aeabi_uldivmod>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	460c      	mov	r4, r1
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	e049      	b.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e64:	4b2f      	ldr	r3, [pc, #188]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	099b      	lsrs	r3, r3, #6
 8005e6a:	f04f 0400 	mov.w	r4, #0
 8005e6e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	ea03 0501 	and.w	r5, r3, r1
 8005e7a:	ea04 0602 	and.w	r6, r4, r2
 8005e7e:	4629      	mov	r1, r5
 8005e80:	4632      	mov	r2, r6
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	f04f 0400 	mov.w	r4, #0
 8005e8a:	0154      	lsls	r4, r2, #5
 8005e8c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e90:	014b      	lsls	r3, r1, #5
 8005e92:	4619      	mov	r1, r3
 8005e94:	4622      	mov	r2, r4
 8005e96:	1b49      	subs	r1, r1, r5
 8005e98:	eb62 0206 	sbc.w	r2, r2, r6
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	f04f 0400 	mov.w	r4, #0
 8005ea4:	0194      	lsls	r4, r2, #6
 8005ea6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005eaa:	018b      	lsls	r3, r1, #6
 8005eac:	1a5b      	subs	r3, r3, r1
 8005eae:	eb64 0402 	sbc.w	r4, r4, r2
 8005eb2:	f04f 0100 	mov.w	r1, #0
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	00e2      	lsls	r2, r4, #3
 8005ebc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005ec0:	00d9      	lsls	r1, r3, #3
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4614      	mov	r4, r2
 8005ec6:	195b      	adds	r3, r3, r5
 8005ec8:	eb44 0406 	adc.w	r4, r4, r6
 8005ecc:	f04f 0100 	mov.w	r1, #0
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	02a2      	lsls	r2, r4, #10
 8005ed6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005eda:	0299      	lsls	r1, r3, #10
 8005edc:	460b      	mov	r3, r1
 8005ede:	4614      	mov	r4, r2
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	4621      	mov	r1, r4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f04f 0400 	mov.w	r4, #0
 8005eea:	461a      	mov	r2, r3
 8005eec:	4623      	mov	r3, r4
 8005eee:	f7fa fe57 	bl	8000ba0 <__aeabi_uldivmod>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ef8:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	0c1b      	lsrs	r3, r3, #16
 8005efe:	f003 0303 	and.w	r3, r3, #3
 8005f02:	3301      	adds	r3, #1
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	60bb      	str	r3, [r7, #8]
      break;
 8005f12:	e002      	b.n	8005f1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f14:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005f16:	60bb      	str	r3, [r7, #8]
      break;
 8005f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f24:	40023800 	.word	0x40023800
 8005f28:	00f42400 	.word	0x00f42400
 8005f2c:	007a1200 	.word	0x007a1200

08005f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f34:	4b03      	ldr	r3, [pc, #12]	; (8005f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f36:	681b      	ldr	r3, [r3, #0]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	20000000 	.word	0x20000000

08005f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f4c:	f7ff fff0 	bl	8005f30 <HAL_RCC_GetHCLKFreq>
 8005f50:	4601      	mov	r1, r0
 8005f52:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	0a9b      	lsrs	r3, r3, #10
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	4a03      	ldr	r2, [pc, #12]	; (8005f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f5e:	5cd3      	ldrb	r3, [r2, r3]
 8005f60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	0800a76c 	.word	0x0800a76c

08005f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f74:	f7ff ffdc 	bl	8005f30 <HAL_RCC_GetHCLKFreq>
 8005f78:	4601      	mov	r1, r0
 8005f7a:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	0b5b      	lsrs	r3, r3, #13
 8005f80:	f003 0307 	and.w	r3, r3, #7
 8005f84:	4a03      	ldr	r2, [pc, #12]	; (8005f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f86:	5cd3      	ldrb	r3, [r2, r3]
 8005f88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40023800 	.word	0x40023800
 8005f94:	0800a76c 	.word	0x0800a76c

08005f98 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e01d      	b.n	8005fe6 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d106      	bne.n	8005fc4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fb fe8e 	bl	8001ce0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	f000 f86a 	bl	80060b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006002:	2b01      	cmp	r3, #1
 8006004:	d101      	bne.n	800600a <HAL_TIM_OC_ConfigChannel+0x1a>
 8006006:	2302      	movs	r3, #2
 8006008:	e04e      	b.n	80060a8 <HAL_TIM_OC_ConfigChannel+0xb8>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2202      	movs	r2, #2
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b0c      	cmp	r3, #12
 800601e:	d839      	bhi.n	8006094 <HAL_TIM_OC_ConfigChannel+0xa4>
 8006020:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <HAL_TIM_OC_ConfigChannel+0x38>)
 8006022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006026:	bf00      	nop
 8006028:	0800605d 	.word	0x0800605d
 800602c:	08006095 	.word	0x08006095
 8006030:	08006095 	.word	0x08006095
 8006034:	08006095 	.word	0x08006095
 8006038:	0800606b 	.word	0x0800606b
 800603c:	08006095 	.word	0x08006095
 8006040:	08006095 	.word	0x08006095
 8006044:	08006095 	.word	0x08006095
 8006048:	08006079 	.word	0x08006079
 800604c:	08006095 	.word	0x08006095
 8006050:	08006095 	.word	0x08006095
 8006054:	08006095 	.word	0x08006095
 8006058:	08006087 	.word	0x08006087
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68b9      	ldr	r1, [r7, #8]
 8006062:	4618      	mov	r0, r3
 8006064:	f000 f8c4 	bl	80061f0 <TIM_OC1_SetConfig>
      break;
 8006068:	e015      	b.n	8006096 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68b9      	ldr	r1, [r7, #8]
 8006070:	4618      	mov	r0, r3
 8006072:	f000 f92d 	bl	80062d0 <TIM_OC2_SetConfig>
      break;
 8006076:	e00e      	b.n	8006096 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	4618      	mov	r0, r3
 8006080:	f000 f99c 	bl	80063bc <TIM_OC3_SetConfig>
      break;
 8006084:	e007      	b.n	8006096 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fa09 	bl	80064a4 <TIM_OC4_SetConfig>
      break;
 8006092:	e000      	b.n	8006096 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006094:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a40      	ldr	r2, [pc, #256]	; (80061c4 <TIM_Base_SetConfig+0x114>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d013      	beq.n	80060f0 <TIM_Base_SetConfig+0x40>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ce:	d00f      	beq.n	80060f0 <TIM_Base_SetConfig+0x40>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a3d      	ldr	r2, [pc, #244]	; (80061c8 <TIM_Base_SetConfig+0x118>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00b      	beq.n	80060f0 <TIM_Base_SetConfig+0x40>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a3c      	ldr	r2, [pc, #240]	; (80061cc <TIM_Base_SetConfig+0x11c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d007      	beq.n	80060f0 <TIM_Base_SetConfig+0x40>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a3b      	ldr	r2, [pc, #236]	; (80061d0 <TIM_Base_SetConfig+0x120>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d003      	beq.n	80060f0 <TIM_Base_SetConfig+0x40>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a3a      	ldr	r2, [pc, #232]	; (80061d4 <TIM_Base_SetConfig+0x124>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d108      	bne.n	8006102 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a2f      	ldr	r2, [pc, #188]	; (80061c4 <TIM_Base_SetConfig+0x114>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d02b      	beq.n	8006162 <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006110:	d027      	beq.n	8006162 <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a2c      	ldr	r2, [pc, #176]	; (80061c8 <TIM_Base_SetConfig+0x118>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d023      	beq.n	8006162 <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a2b      	ldr	r2, [pc, #172]	; (80061cc <TIM_Base_SetConfig+0x11c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01f      	beq.n	8006162 <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a2a      	ldr	r2, [pc, #168]	; (80061d0 <TIM_Base_SetConfig+0x120>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d01b      	beq.n	8006162 <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a29      	ldr	r2, [pc, #164]	; (80061d4 <TIM_Base_SetConfig+0x124>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d017      	beq.n	8006162 <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a28      	ldr	r2, [pc, #160]	; (80061d8 <TIM_Base_SetConfig+0x128>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d013      	beq.n	8006162 <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a27      	ldr	r2, [pc, #156]	; (80061dc <TIM_Base_SetConfig+0x12c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00f      	beq.n	8006162 <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a26      	ldr	r2, [pc, #152]	; (80061e0 <TIM_Base_SetConfig+0x130>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d00b      	beq.n	8006162 <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a25      	ldr	r2, [pc, #148]	; (80061e4 <TIM_Base_SetConfig+0x134>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d007      	beq.n	8006162 <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a24      	ldr	r2, [pc, #144]	; (80061e8 <TIM_Base_SetConfig+0x138>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d003      	beq.n	8006162 <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a23      	ldr	r2, [pc, #140]	; (80061ec <TIM_Base_SetConfig+0x13c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d108      	bne.n	8006174 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	4313      	orrs	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a0a      	ldr	r2, [pc, #40]	; (80061c4 <TIM_Base_SetConfig+0x114>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d003      	beq.n	80061a8 <TIM_Base_SetConfig+0xf8>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a0c      	ldr	r2, [pc, #48]	; (80061d4 <TIM_Base_SetConfig+0x124>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d103      	bne.n	80061b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	615a      	str	r2, [r3, #20]
}
 80061b6:	bf00      	nop
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40010000 	.word	0x40010000
 80061c8:	40000400 	.word	0x40000400
 80061cc:	40000800 	.word	0x40000800
 80061d0:	40000c00 	.word	0x40000c00
 80061d4:	40010400 	.word	0x40010400
 80061d8:	40014000 	.word	0x40014000
 80061dc:	40014400 	.word	0x40014400
 80061e0:	40014800 	.word	0x40014800
 80061e4:	40001800 	.word	0x40001800
 80061e8:	40001c00 	.word	0x40001c00
 80061ec:	40002000 	.word	0x40002000

080061f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	f023 0201 	bic.w	r2, r3, #1
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0303 	bic.w	r3, r3, #3
 8006226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f023 0302 	bic.w	r3, r3, #2
 8006238:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a20      	ldr	r2, [pc, #128]	; (80062c8 <TIM_OC1_SetConfig+0xd8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d003      	beq.n	8006254 <TIM_OC1_SetConfig+0x64>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a1f      	ldr	r2, [pc, #124]	; (80062cc <TIM_OC1_SetConfig+0xdc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d10c      	bne.n	800626e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f023 0308 	bic.w	r3, r3, #8
 800625a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f023 0304 	bic.w	r3, r3, #4
 800626c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a15      	ldr	r2, [pc, #84]	; (80062c8 <TIM_OC1_SetConfig+0xd8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d003      	beq.n	800627e <TIM_OC1_SetConfig+0x8e>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a14      	ldr	r2, [pc, #80]	; (80062cc <TIM_OC1_SetConfig+0xdc>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d111      	bne.n	80062a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800628c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	621a      	str	r2, [r3, #32]
}
 80062bc:	bf00      	nop
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	40010000 	.word	0x40010000
 80062cc:	40010400 	.word	0x40010400

080062d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	f023 0210 	bic.w	r2, r3, #16
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f023 0320 	bic.w	r3, r3, #32
 800631a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	011b      	lsls	r3, r3, #4
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a22      	ldr	r2, [pc, #136]	; (80063b4 <TIM_OC2_SetConfig+0xe4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d003      	beq.n	8006338 <TIM_OC2_SetConfig+0x68>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a21      	ldr	r2, [pc, #132]	; (80063b8 <TIM_OC2_SetConfig+0xe8>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d10d      	bne.n	8006354 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800633e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4313      	orrs	r3, r2
 800634a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006352:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a17      	ldr	r2, [pc, #92]	; (80063b4 <TIM_OC2_SetConfig+0xe4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <TIM_OC2_SetConfig+0x94>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a16      	ldr	r2, [pc, #88]	; (80063b8 <TIM_OC2_SetConfig+0xe8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d113      	bne.n	800638c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800636a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	4313      	orrs	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	693a      	ldr	r2, [r7, #16]
 8006390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	621a      	str	r2, [r3, #32]
}
 80063a6:	bf00      	nop
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40010000 	.word	0x40010000
 80063b8:	40010400 	.word	0x40010400

080063bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0303 	bic.w	r3, r3, #3
 80063f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a21      	ldr	r2, [pc, #132]	; (800649c <TIM_OC3_SetConfig+0xe0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_OC3_SetConfig+0x66>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a20      	ldr	r2, [pc, #128]	; (80064a0 <TIM_OC3_SetConfig+0xe4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d10d      	bne.n	800643e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	4313      	orrs	r3, r2
 8006434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800643c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a16      	ldr	r2, [pc, #88]	; (800649c <TIM_OC3_SetConfig+0xe0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d003      	beq.n	800644e <TIM_OC3_SetConfig+0x92>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a15      	ldr	r2, [pc, #84]	; (80064a0 <TIM_OC3_SetConfig+0xe4>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d113      	bne.n	8006476 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800645c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	621a      	str	r2, [r3, #32]
}
 8006490:	bf00      	nop
 8006492:	371c      	adds	r7, #28
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	40010000 	.word	0x40010000
 80064a0:	40010400 	.word	0x40010400

080064a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	031b      	lsls	r3, r3, #12
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a12      	ldr	r2, [pc, #72]	; (8006548 <TIM_OC4_SetConfig+0xa4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <TIM_OC4_SetConfig+0x68>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a11      	ldr	r2, [pc, #68]	; (800654c <TIM_OC4_SetConfig+0xa8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d109      	bne.n	8006520 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006512:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	019b      	lsls	r3, r3, #6
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	621a      	str	r2, [r3, #32]
}
 800653a:	bf00      	nop
 800653c:	371c      	adds	r7, #28
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40010000 	.word	0x40010000
 800654c:	40010400 	.word	0x40010400

08006550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006564:	2302      	movs	r3, #2
 8006566:	e05a      	b.n	800661e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a21      	ldr	r2, [pc, #132]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d022      	beq.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b4:	d01d      	beq.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a1d      	ldr	r2, [pc, #116]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d018      	beq.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a1b      	ldr	r2, [pc, #108]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d013      	beq.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1a      	ldr	r2, [pc, #104]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00e      	beq.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a18      	ldr	r2, [pc, #96]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d009      	beq.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a17      	ldr	r2, [pc, #92]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d004      	beq.n	80065f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a15      	ldr	r2, [pc, #84]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d10c      	bne.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	4313      	orrs	r3, r2
 8006602:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	40010000 	.word	0x40010000
 8006630:	40000400 	.word	0x40000400
 8006634:	40000800 	.word	0x40000800
 8006638:	40000c00 	.word	0x40000c00
 800663c:	40010400 	.word	0x40010400
 8006640:	40014000 	.word	0x40014000
 8006644:	40001800 	.word	0x40001800

08006648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e03f      	b.n	80066da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fb fb92 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2224      	movs	r2, #36	; 0x24
 8006678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800668a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fb4b 	bl	8006d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695a      	ldr	r2, [r3, #20]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b088      	sub	sp, #32
 80066e6:	af02      	add	r7, sp, #8
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	603b      	str	r3, [r7, #0]
 80066ee:	4613      	mov	r3, r2
 80066f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b20      	cmp	r3, #32
 8006700:	f040 8083 	bne.w	800680a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <HAL_UART_Transmit+0x2e>
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e07b      	b.n	800680c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800671a:	2b01      	cmp	r3, #1
 800671c:	d101      	bne.n	8006722 <HAL_UART_Transmit+0x40>
 800671e:	2302      	movs	r3, #2
 8006720:	e074      	b.n	800680c <HAL_UART_Transmit+0x12a>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2221      	movs	r2, #33	; 0x21
 8006734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006738:	f7fb fcc2 	bl	80020c0 <HAL_GetTick>
 800673c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	88fa      	ldrh	r2, [r7, #6]
 8006742:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	88fa      	ldrh	r2, [r7, #6]
 8006748:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006752:	e042      	b.n	80067da <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006758:	b29b      	uxth	r3, r3
 800675a:	3b01      	subs	r3, #1
 800675c:	b29a      	uxth	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800676a:	d122      	bne.n	80067b2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	2200      	movs	r2, #0
 8006774:	2180      	movs	r1, #128	; 0x80
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f96a 	bl	8006a50 <UART_WaitOnFlagUntilTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e042      	b.n	800680c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006798:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d103      	bne.n	80067aa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	3302      	adds	r3, #2
 80067a6:	60bb      	str	r3, [r7, #8]
 80067a8:	e017      	b.n	80067da <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60bb      	str	r3, [r7, #8]
 80067b0:	e013      	b.n	80067da <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2200      	movs	r2, #0
 80067ba:	2180      	movs	r1, #128	; 0x80
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 f947 	bl	8006a50 <UART_WaitOnFlagUntilTimeout>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e01f      	b.n	800680c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	60ba      	str	r2, [r7, #8]
 80067d2:	781a      	ldrb	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067de:	b29b      	uxth	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1b7      	bne.n	8006754 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2200      	movs	r2, #0
 80067ec:	2140      	movs	r1, #64	; 0x40
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 f92e 	bl	8006a50 <UART_WaitOnFlagUntilTimeout>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e006      	b.n	800680c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	e000      	b.n	800680c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800680a:	2302      	movs	r3, #2
  }
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006834:	2300      	movs	r3, #0
 8006836:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10d      	bne.n	8006866 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b00      	cmp	r3, #0
 8006852:	d008      	beq.n	8006866 <HAL_UART_IRQHandler+0x52>
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f9e0 	bl	8006c24 <UART_Receive_IT>
      return;
 8006864:	e0d1      	b.n	8006a0a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 80b0 	beq.w	80069ce <HAL_UART_IRQHandler+0x1ba>
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d105      	bne.n	8006884 <HAL_UART_IRQHandler+0x70>
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 80a5 	beq.w	80069ce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <HAL_UART_IRQHandler+0x90>
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800689c:	f043 0201 	orr.w	r2, r3, #1
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00a      	beq.n	80068c4 <HAL_UART_IRQHandler+0xb0>
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068bc:	f043 0202 	orr.w	r2, r3, #2
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00a      	beq.n	80068e4 <HAL_UART_IRQHandler+0xd0>
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d005      	beq.n	80068e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068dc:	f043 0204 	orr.w	r2, r3, #4
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00f      	beq.n	800690e <HAL_UART_IRQHandler+0xfa>
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d104      	bne.n	8006902 <HAL_UART_IRQHandler+0xee>
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006906:	f043 0208 	orr.w	r2, r3, #8
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d078      	beq.n	8006a08 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	f003 0320 	and.w	r3, r3, #32
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <HAL_UART_IRQHandler+0x11c>
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f97a 	bl	8006c24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693a:	2b40      	cmp	r3, #64	; 0x40
 800693c:	bf0c      	ite	eq
 800693e:	2301      	moveq	r3, #1
 8006940:	2300      	movne	r3, #0
 8006942:	b2db      	uxtb	r3, r3
 8006944:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694a:	f003 0308 	and.w	r3, r3, #8
 800694e:	2b00      	cmp	r3, #0
 8006950:	d102      	bne.n	8006958 <HAL_UART_IRQHandler+0x144>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d031      	beq.n	80069bc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f8c3 	bl	8006ae4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006968:	2b40      	cmp	r3, #64	; 0x40
 800696a:	d123      	bne.n	80069b4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	695a      	ldr	r2, [r3, #20]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800697a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006980:	2b00      	cmp	r3, #0
 8006982:	d013      	beq.n	80069ac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006988:	4a21      	ldr	r2, [pc, #132]	; (8006a10 <HAL_UART_IRQHandler+0x1fc>)
 800698a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006990:	4618      	mov	r0, r3
 8006992:	f7fc f86c 	bl	8002a6e <HAL_DMA_Abort_IT>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d016      	beq.n	80069ca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069a6:	4610      	mov	r0, r2
 80069a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069aa:	e00e      	b.n	80069ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f845 	bl	8006a3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b2:	e00a      	b.n	80069ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f841 	bl	8006a3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ba:	e006      	b.n	80069ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f000 f83d 	bl	8006a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80069c8:	e01e      	b.n	8006a08 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ca:	bf00      	nop
    return;
 80069cc:	e01c      	b.n	8006a08 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d008      	beq.n	80069ea <HAL_UART_IRQHandler+0x1d6>
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f8b0 	bl	8006b48 <UART_Transmit_IT>
    return;
 80069e8:	e00f      	b.n	8006a0a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <HAL_UART_IRQHandler+0x1f6>
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f8f8 	bl	8006bf4 <UART_EndTransmit_IT>
    return;
 8006a04:	bf00      	nop
 8006a06:	e000      	b.n	8006a0a <HAL_UART_IRQHandler+0x1f6>
    return;
 8006a08:	bf00      	nop
  }
}
 8006a0a:	3720      	adds	r7, #32
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	08006b21 	.word	0x08006b21

08006a14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a60:	e02c      	b.n	8006abc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d028      	beq.n	8006abc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d007      	beq.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a70:	f7fb fb26 	bl	80020c0 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	69ba      	ldr	r2, [r7, #24]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d21d      	bcs.n	8006abc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68da      	ldr	r2, [r3, #12]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a8e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695a      	ldr	r2, [r3, #20]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0201 	bic.w	r2, r2, #1
 8006a9e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e00f      	b.n	8006adc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	bf0c      	ite	eq
 8006acc:	2301      	moveq	r3, #1
 8006ace:	2300      	movne	r3, #0
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d0c3      	beq.n	8006a62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006afa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	695a      	ldr	r2, [r3, #20]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0201 	bic.w	r2, r2, #1
 8006b0a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f7ff ff7e 	bl	8006a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b40:	bf00      	nop
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b21      	cmp	r3, #33	; 0x21
 8006b5a:	d144      	bne.n	8006be6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b64:	d11a      	bne.n	8006b9c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b7a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d105      	bne.n	8006b90 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	1c9a      	adds	r2, r3, #2
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	621a      	str	r2, [r3, #32]
 8006b8e:	e00e      	b.n	8006bae <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	621a      	str	r2, [r3, #32]
 8006b9a:	e008      	b.n	8006bae <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	1c59      	adds	r1, r3, #1
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6211      	str	r1, [r2, #32]
 8006ba6:	781a      	ldrb	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10f      	bne.n	8006be2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006be0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e000      	b.n	8006be8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006be6:	2302      	movs	r3, #2
  }
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff fefd 	bl	8006a14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b22      	cmp	r3, #34	; 0x22
 8006c36:	d171      	bne.n	8006d1c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c40:	d123      	bne.n	8006c8a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10e      	bne.n	8006c6e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c66:	1c9a      	adds	r2, r3, #2
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c6c:	e029      	b.n	8006cc2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	629a      	str	r2, [r3, #40]	; 0x28
 8006c88:	e01b      	b.n	8006cc2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10a      	bne.n	8006ca8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6858      	ldr	r0, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9c:	1c59      	adds	r1, r3, #1
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	6291      	str	r1, [r2, #40]	; 0x28
 8006ca2:	b2c2      	uxtb	r2, r0
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	e00c      	b.n	8006cc2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb4:	1c58      	adds	r0, r3, #1
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	6288      	str	r0, [r1, #40]	; 0x28
 8006cba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d120      	bne.n	8006d18 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0220 	bic.w	r2, r2, #32
 8006ce4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695a      	ldr	r2, [r3, #20]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0201 	bic.w	r2, r2, #1
 8006d04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff fe8a 	bl	8006a28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	e002      	b.n	8006d1e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e000      	b.n	8006d1e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006d1c:	2302      	movs	r3, #2
  }
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	431a      	orrs	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006d6a:	f023 030c 	bic.w	r3, r3, #12
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6812      	ldr	r2, [r2, #0]
 8006d72:	68f9      	ldr	r1, [r7, #12]
 8006d74:	430b      	orrs	r3, r1
 8006d76:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	699a      	ldr	r2, [r3, #24]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d96:	f040 818b 	bne.w	80070b0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4ac1      	ldr	r2, [pc, #772]	; (80070a4 <UART_SetConfig+0x37c>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d005      	beq.n	8006db0 <UART_SetConfig+0x88>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4abf      	ldr	r2, [pc, #764]	; (80070a8 <UART_SetConfig+0x380>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	f040 80bd 	bne.w	8006f2a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006db0:	f7ff f8de 	bl	8005f70 <HAL_RCC_GetPCLK2Freq>
 8006db4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	461d      	mov	r5, r3
 8006dba:	f04f 0600 	mov.w	r6, #0
 8006dbe:	46a8      	mov	r8, r5
 8006dc0:	46b1      	mov	r9, r6
 8006dc2:	eb18 0308 	adds.w	r3, r8, r8
 8006dc6:	eb49 0409 	adc.w	r4, r9, r9
 8006dca:	4698      	mov	r8, r3
 8006dcc:	46a1      	mov	r9, r4
 8006dce:	eb18 0805 	adds.w	r8, r8, r5
 8006dd2:	eb49 0906 	adc.w	r9, r9, r6
 8006dd6:	f04f 0100 	mov.w	r1, #0
 8006dda:	f04f 0200 	mov.w	r2, #0
 8006dde:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006de2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006de6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006dea:	4688      	mov	r8, r1
 8006dec:	4691      	mov	r9, r2
 8006dee:	eb18 0005 	adds.w	r0, r8, r5
 8006df2:	eb49 0106 	adc.w	r1, r9, r6
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	461d      	mov	r5, r3
 8006dfc:	f04f 0600 	mov.w	r6, #0
 8006e00:	196b      	adds	r3, r5, r5
 8006e02:	eb46 0406 	adc.w	r4, r6, r6
 8006e06:	461a      	mov	r2, r3
 8006e08:	4623      	mov	r3, r4
 8006e0a:	f7f9 fec9 	bl	8000ba0 <__aeabi_uldivmod>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	460c      	mov	r4, r1
 8006e12:	461a      	mov	r2, r3
 8006e14:	4ba5      	ldr	r3, [pc, #660]	; (80070ac <UART_SetConfig+0x384>)
 8006e16:	fba3 2302 	umull	r2, r3, r3, r2
 8006e1a:	095b      	lsrs	r3, r3, #5
 8006e1c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	461d      	mov	r5, r3
 8006e24:	f04f 0600 	mov.w	r6, #0
 8006e28:	46a9      	mov	r9, r5
 8006e2a:	46b2      	mov	sl, r6
 8006e2c:	eb19 0309 	adds.w	r3, r9, r9
 8006e30:	eb4a 040a 	adc.w	r4, sl, sl
 8006e34:	4699      	mov	r9, r3
 8006e36:	46a2      	mov	sl, r4
 8006e38:	eb19 0905 	adds.w	r9, r9, r5
 8006e3c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e40:	f04f 0100 	mov.w	r1, #0
 8006e44:	f04f 0200 	mov.w	r2, #0
 8006e48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e54:	4689      	mov	r9, r1
 8006e56:	4692      	mov	sl, r2
 8006e58:	eb19 0005 	adds.w	r0, r9, r5
 8006e5c:	eb4a 0106 	adc.w	r1, sl, r6
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	461d      	mov	r5, r3
 8006e66:	f04f 0600 	mov.w	r6, #0
 8006e6a:	196b      	adds	r3, r5, r5
 8006e6c:	eb46 0406 	adc.w	r4, r6, r6
 8006e70:	461a      	mov	r2, r3
 8006e72:	4623      	mov	r3, r4
 8006e74:	f7f9 fe94 	bl	8000ba0 <__aeabi_uldivmod>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4b8b      	ldr	r3, [pc, #556]	; (80070ac <UART_SetConfig+0x384>)
 8006e80:	fba3 1302 	umull	r1, r3, r3, r2
 8006e84:	095b      	lsrs	r3, r3, #5
 8006e86:	2164      	movs	r1, #100	; 0x64
 8006e88:	fb01 f303 	mul.w	r3, r1, r3
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	3332      	adds	r3, #50	; 0x32
 8006e92:	4a86      	ldr	r2, [pc, #536]	; (80070ac <UART_SetConfig+0x384>)
 8006e94:	fba2 2303 	umull	r2, r3, r2, r3
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ea0:	4498      	add	r8, r3
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	461d      	mov	r5, r3
 8006ea6:	f04f 0600 	mov.w	r6, #0
 8006eaa:	46a9      	mov	r9, r5
 8006eac:	46b2      	mov	sl, r6
 8006eae:	eb19 0309 	adds.w	r3, r9, r9
 8006eb2:	eb4a 040a 	adc.w	r4, sl, sl
 8006eb6:	4699      	mov	r9, r3
 8006eb8:	46a2      	mov	sl, r4
 8006eba:	eb19 0905 	adds.w	r9, r9, r5
 8006ebe:	eb4a 0a06 	adc.w	sl, sl, r6
 8006ec2:	f04f 0100 	mov.w	r1, #0
 8006ec6:	f04f 0200 	mov.w	r2, #0
 8006eca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ece:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ed2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ed6:	4689      	mov	r9, r1
 8006ed8:	4692      	mov	sl, r2
 8006eda:	eb19 0005 	adds.w	r0, r9, r5
 8006ede:	eb4a 0106 	adc.w	r1, sl, r6
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	461d      	mov	r5, r3
 8006ee8:	f04f 0600 	mov.w	r6, #0
 8006eec:	196b      	adds	r3, r5, r5
 8006eee:	eb46 0406 	adc.w	r4, r6, r6
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	4623      	mov	r3, r4
 8006ef6:	f7f9 fe53 	bl	8000ba0 <__aeabi_uldivmod>
 8006efa:	4603      	mov	r3, r0
 8006efc:	460c      	mov	r4, r1
 8006efe:	461a      	mov	r2, r3
 8006f00:	4b6a      	ldr	r3, [pc, #424]	; (80070ac <UART_SetConfig+0x384>)
 8006f02:	fba3 1302 	umull	r1, r3, r3, r2
 8006f06:	095b      	lsrs	r3, r3, #5
 8006f08:	2164      	movs	r1, #100	; 0x64
 8006f0a:	fb01 f303 	mul.w	r3, r1, r3
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	00db      	lsls	r3, r3, #3
 8006f12:	3332      	adds	r3, #50	; 0x32
 8006f14:	4a65      	ldr	r2, [pc, #404]	; (80070ac <UART_SetConfig+0x384>)
 8006f16:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1a:	095b      	lsrs	r3, r3, #5
 8006f1c:	f003 0207 	and.w	r2, r3, #7
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4442      	add	r2, r8
 8006f26:	609a      	str	r2, [r3, #8]
 8006f28:	e26f      	b.n	800740a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f2a:	f7ff f80d 	bl	8005f48 <HAL_RCC_GetPCLK1Freq>
 8006f2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	461d      	mov	r5, r3
 8006f34:	f04f 0600 	mov.w	r6, #0
 8006f38:	46a8      	mov	r8, r5
 8006f3a:	46b1      	mov	r9, r6
 8006f3c:	eb18 0308 	adds.w	r3, r8, r8
 8006f40:	eb49 0409 	adc.w	r4, r9, r9
 8006f44:	4698      	mov	r8, r3
 8006f46:	46a1      	mov	r9, r4
 8006f48:	eb18 0805 	adds.w	r8, r8, r5
 8006f4c:	eb49 0906 	adc.w	r9, r9, r6
 8006f50:	f04f 0100 	mov.w	r1, #0
 8006f54:	f04f 0200 	mov.w	r2, #0
 8006f58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f64:	4688      	mov	r8, r1
 8006f66:	4691      	mov	r9, r2
 8006f68:	eb18 0005 	adds.w	r0, r8, r5
 8006f6c:	eb49 0106 	adc.w	r1, r9, r6
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	461d      	mov	r5, r3
 8006f76:	f04f 0600 	mov.w	r6, #0
 8006f7a:	196b      	adds	r3, r5, r5
 8006f7c:	eb46 0406 	adc.w	r4, r6, r6
 8006f80:	461a      	mov	r2, r3
 8006f82:	4623      	mov	r3, r4
 8006f84:	f7f9 fe0c 	bl	8000ba0 <__aeabi_uldivmod>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	4b47      	ldr	r3, [pc, #284]	; (80070ac <UART_SetConfig+0x384>)
 8006f90:	fba3 2302 	umull	r2, r3, r3, r2
 8006f94:	095b      	lsrs	r3, r3, #5
 8006f96:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	461d      	mov	r5, r3
 8006f9e:	f04f 0600 	mov.w	r6, #0
 8006fa2:	46a9      	mov	r9, r5
 8006fa4:	46b2      	mov	sl, r6
 8006fa6:	eb19 0309 	adds.w	r3, r9, r9
 8006faa:	eb4a 040a 	adc.w	r4, sl, sl
 8006fae:	4699      	mov	r9, r3
 8006fb0:	46a2      	mov	sl, r4
 8006fb2:	eb19 0905 	adds.w	r9, r9, r5
 8006fb6:	eb4a 0a06 	adc.w	sl, sl, r6
 8006fba:	f04f 0100 	mov.w	r1, #0
 8006fbe:	f04f 0200 	mov.w	r2, #0
 8006fc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fce:	4689      	mov	r9, r1
 8006fd0:	4692      	mov	sl, r2
 8006fd2:	eb19 0005 	adds.w	r0, r9, r5
 8006fd6:	eb4a 0106 	adc.w	r1, sl, r6
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	461d      	mov	r5, r3
 8006fe0:	f04f 0600 	mov.w	r6, #0
 8006fe4:	196b      	adds	r3, r5, r5
 8006fe6:	eb46 0406 	adc.w	r4, r6, r6
 8006fea:	461a      	mov	r2, r3
 8006fec:	4623      	mov	r3, r4
 8006fee:	f7f9 fdd7 	bl	8000ba0 <__aeabi_uldivmod>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	4b2c      	ldr	r3, [pc, #176]	; (80070ac <UART_SetConfig+0x384>)
 8006ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8006ffe:	095b      	lsrs	r3, r3, #5
 8007000:	2164      	movs	r1, #100	; 0x64
 8007002:	fb01 f303 	mul.w	r3, r1, r3
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	3332      	adds	r3, #50	; 0x32
 800700c:	4a27      	ldr	r2, [pc, #156]	; (80070ac <UART_SetConfig+0x384>)
 800700e:	fba2 2303 	umull	r2, r3, r2, r3
 8007012:	095b      	lsrs	r3, r3, #5
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800701a:	4498      	add	r8, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	461d      	mov	r5, r3
 8007020:	f04f 0600 	mov.w	r6, #0
 8007024:	46a9      	mov	r9, r5
 8007026:	46b2      	mov	sl, r6
 8007028:	eb19 0309 	adds.w	r3, r9, r9
 800702c:	eb4a 040a 	adc.w	r4, sl, sl
 8007030:	4699      	mov	r9, r3
 8007032:	46a2      	mov	sl, r4
 8007034:	eb19 0905 	adds.w	r9, r9, r5
 8007038:	eb4a 0a06 	adc.w	sl, sl, r6
 800703c:	f04f 0100 	mov.w	r1, #0
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007048:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800704c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007050:	4689      	mov	r9, r1
 8007052:	4692      	mov	sl, r2
 8007054:	eb19 0005 	adds.w	r0, r9, r5
 8007058:	eb4a 0106 	adc.w	r1, sl, r6
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	461d      	mov	r5, r3
 8007062:	f04f 0600 	mov.w	r6, #0
 8007066:	196b      	adds	r3, r5, r5
 8007068:	eb46 0406 	adc.w	r4, r6, r6
 800706c:	461a      	mov	r2, r3
 800706e:	4623      	mov	r3, r4
 8007070:	f7f9 fd96 	bl	8000ba0 <__aeabi_uldivmod>
 8007074:	4603      	mov	r3, r0
 8007076:	460c      	mov	r4, r1
 8007078:	461a      	mov	r2, r3
 800707a:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <UART_SetConfig+0x384>)
 800707c:	fba3 1302 	umull	r1, r3, r3, r2
 8007080:	095b      	lsrs	r3, r3, #5
 8007082:	2164      	movs	r1, #100	; 0x64
 8007084:	fb01 f303 	mul.w	r3, r1, r3
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	00db      	lsls	r3, r3, #3
 800708c:	3332      	adds	r3, #50	; 0x32
 800708e:	4a07      	ldr	r2, [pc, #28]	; (80070ac <UART_SetConfig+0x384>)
 8007090:	fba2 2303 	umull	r2, r3, r2, r3
 8007094:	095b      	lsrs	r3, r3, #5
 8007096:	f003 0207 	and.w	r2, r3, #7
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4442      	add	r2, r8
 80070a0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80070a2:	e1b2      	b.n	800740a <UART_SetConfig+0x6e2>
 80070a4:	40011000 	.word	0x40011000
 80070a8:	40011400 	.word	0x40011400
 80070ac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4ad7      	ldr	r2, [pc, #860]	; (8007414 <UART_SetConfig+0x6ec>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d005      	beq.n	80070c6 <UART_SetConfig+0x39e>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4ad6      	ldr	r2, [pc, #856]	; (8007418 <UART_SetConfig+0x6f0>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	f040 80d1 	bne.w	8007268 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80070c6:	f7fe ff53 	bl	8005f70 <HAL_RCC_GetPCLK2Freq>
 80070ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	469a      	mov	sl, r3
 80070d0:	f04f 0b00 	mov.w	fp, #0
 80070d4:	46d0      	mov	r8, sl
 80070d6:	46d9      	mov	r9, fp
 80070d8:	eb18 0308 	adds.w	r3, r8, r8
 80070dc:	eb49 0409 	adc.w	r4, r9, r9
 80070e0:	4698      	mov	r8, r3
 80070e2:	46a1      	mov	r9, r4
 80070e4:	eb18 080a 	adds.w	r8, r8, sl
 80070e8:	eb49 090b 	adc.w	r9, r9, fp
 80070ec:	f04f 0100 	mov.w	r1, #0
 80070f0:	f04f 0200 	mov.w	r2, #0
 80070f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80070f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80070fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007100:	4688      	mov	r8, r1
 8007102:	4691      	mov	r9, r2
 8007104:	eb1a 0508 	adds.w	r5, sl, r8
 8007108:	eb4b 0609 	adc.w	r6, fp, r9
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	4619      	mov	r1, r3
 8007112:	f04f 0200 	mov.w	r2, #0
 8007116:	f04f 0300 	mov.w	r3, #0
 800711a:	f04f 0400 	mov.w	r4, #0
 800711e:	0094      	lsls	r4, r2, #2
 8007120:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007124:	008b      	lsls	r3, r1, #2
 8007126:	461a      	mov	r2, r3
 8007128:	4623      	mov	r3, r4
 800712a:	4628      	mov	r0, r5
 800712c:	4631      	mov	r1, r6
 800712e:	f7f9 fd37 	bl	8000ba0 <__aeabi_uldivmod>
 8007132:	4603      	mov	r3, r0
 8007134:	460c      	mov	r4, r1
 8007136:	461a      	mov	r2, r3
 8007138:	4bb8      	ldr	r3, [pc, #736]	; (800741c <UART_SetConfig+0x6f4>)
 800713a:	fba3 2302 	umull	r2, r3, r3, r2
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	469b      	mov	fp, r3
 8007148:	f04f 0c00 	mov.w	ip, #0
 800714c:	46d9      	mov	r9, fp
 800714e:	46e2      	mov	sl, ip
 8007150:	eb19 0309 	adds.w	r3, r9, r9
 8007154:	eb4a 040a 	adc.w	r4, sl, sl
 8007158:	4699      	mov	r9, r3
 800715a:	46a2      	mov	sl, r4
 800715c:	eb19 090b 	adds.w	r9, r9, fp
 8007160:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007164:	f04f 0100 	mov.w	r1, #0
 8007168:	f04f 0200 	mov.w	r2, #0
 800716c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007170:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007174:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007178:	4689      	mov	r9, r1
 800717a:	4692      	mov	sl, r2
 800717c:	eb1b 0509 	adds.w	r5, fp, r9
 8007180:	eb4c 060a 	adc.w	r6, ip, sl
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	4619      	mov	r1, r3
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	f04f 0400 	mov.w	r4, #0
 8007196:	0094      	lsls	r4, r2, #2
 8007198:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800719c:	008b      	lsls	r3, r1, #2
 800719e:	461a      	mov	r2, r3
 80071a0:	4623      	mov	r3, r4
 80071a2:	4628      	mov	r0, r5
 80071a4:	4631      	mov	r1, r6
 80071a6:	f7f9 fcfb 	bl	8000ba0 <__aeabi_uldivmod>
 80071aa:	4603      	mov	r3, r0
 80071ac:	460c      	mov	r4, r1
 80071ae:	461a      	mov	r2, r3
 80071b0:	4b9a      	ldr	r3, [pc, #616]	; (800741c <UART_SetConfig+0x6f4>)
 80071b2:	fba3 1302 	umull	r1, r3, r3, r2
 80071b6:	095b      	lsrs	r3, r3, #5
 80071b8:	2164      	movs	r1, #100	; 0x64
 80071ba:	fb01 f303 	mul.w	r3, r1, r3
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	3332      	adds	r3, #50	; 0x32
 80071c4:	4a95      	ldr	r2, [pc, #596]	; (800741c <UART_SetConfig+0x6f4>)
 80071c6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ca:	095b      	lsrs	r3, r3, #5
 80071cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071d0:	4498      	add	r8, r3
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	469b      	mov	fp, r3
 80071d6:	f04f 0c00 	mov.w	ip, #0
 80071da:	46d9      	mov	r9, fp
 80071dc:	46e2      	mov	sl, ip
 80071de:	eb19 0309 	adds.w	r3, r9, r9
 80071e2:	eb4a 040a 	adc.w	r4, sl, sl
 80071e6:	4699      	mov	r9, r3
 80071e8:	46a2      	mov	sl, r4
 80071ea:	eb19 090b 	adds.w	r9, r9, fp
 80071ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80071f2:	f04f 0100 	mov.w	r1, #0
 80071f6:	f04f 0200 	mov.w	r2, #0
 80071fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007202:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007206:	4689      	mov	r9, r1
 8007208:	4692      	mov	sl, r2
 800720a:	eb1b 0509 	adds.w	r5, fp, r9
 800720e:	eb4c 060a 	adc.w	r6, ip, sl
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	4619      	mov	r1, r3
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	f04f 0300 	mov.w	r3, #0
 8007220:	f04f 0400 	mov.w	r4, #0
 8007224:	0094      	lsls	r4, r2, #2
 8007226:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800722a:	008b      	lsls	r3, r1, #2
 800722c:	461a      	mov	r2, r3
 800722e:	4623      	mov	r3, r4
 8007230:	4628      	mov	r0, r5
 8007232:	4631      	mov	r1, r6
 8007234:	f7f9 fcb4 	bl	8000ba0 <__aeabi_uldivmod>
 8007238:	4603      	mov	r3, r0
 800723a:	460c      	mov	r4, r1
 800723c:	461a      	mov	r2, r3
 800723e:	4b77      	ldr	r3, [pc, #476]	; (800741c <UART_SetConfig+0x6f4>)
 8007240:	fba3 1302 	umull	r1, r3, r3, r2
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	2164      	movs	r1, #100	; 0x64
 8007248:	fb01 f303 	mul.w	r3, r1, r3
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	3332      	adds	r3, #50	; 0x32
 8007252:	4a72      	ldr	r2, [pc, #456]	; (800741c <UART_SetConfig+0x6f4>)
 8007254:	fba2 2303 	umull	r2, r3, r2, r3
 8007258:	095b      	lsrs	r3, r3, #5
 800725a:	f003 020f 	and.w	r2, r3, #15
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4442      	add	r2, r8
 8007264:	609a      	str	r2, [r3, #8]
 8007266:	e0d0      	b.n	800740a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007268:	f7fe fe6e 	bl	8005f48 <HAL_RCC_GetPCLK1Freq>
 800726c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	469a      	mov	sl, r3
 8007272:	f04f 0b00 	mov.w	fp, #0
 8007276:	46d0      	mov	r8, sl
 8007278:	46d9      	mov	r9, fp
 800727a:	eb18 0308 	adds.w	r3, r8, r8
 800727e:	eb49 0409 	adc.w	r4, r9, r9
 8007282:	4698      	mov	r8, r3
 8007284:	46a1      	mov	r9, r4
 8007286:	eb18 080a 	adds.w	r8, r8, sl
 800728a:	eb49 090b 	adc.w	r9, r9, fp
 800728e:	f04f 0100 	mov.w	r1, #0
 8007292:	f04f 0200 	mov.w	r2, #0
 8007296:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800729a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800729e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80072a2:	4688      	mov	r8, r1
 80072a4:	4691      	mov	r9, r2
 80072a6:	eb1a 0508 	adds.w	r5, sl, r8
 80072aa:	eb4b 0609 	adc.w	r6, fp, r9
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	4619      	mov	r1, r3
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	f04f 0400 	mov.w	r4, #0
 80072c0:	0094      	lsls	r4, r2, #2
 80072c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80072c6:	008b      	lsls	r3, r1, #2
 80072c8:	461a      	mov	r2, r3
 80072ca:	4623      	mov	r3, r4
 80072cc:	4628      	mov	r0, r5
 80072ce:	4631      	mov	r1, r6
 80072d0:	f7f9 fc66 	bl	8000ba0 <__aeabi_uldivmod>
 80072d4:	4603      	mov	r3, r0
 80072d6:	460c      	mov	r4, r1
 80072d8:	461a      	mov	r2, r3
 80072da:	4b50      	ldr	r3, [pc, #320]	; (800741c <UART_SetConfig+0x6f4>)
 80072dc:	fba3 2302 	umull	r2, r3, r3, r2
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	469b      	mov	fp, r3
 80072ea:	f04f 0c00 	mov.w	ip, #0
 80072ee:	46d9      	mov	r9, fp
 80072f0:	46e2      	mov	sl, ip
 80072f2:	eb19 0309 	adds.w	r3, r9, r9
 80072f6:	eb4a 040a 	adc.w	r4, sl, sl
 80072fa:	4699      	mov	r9, r3
 80072fc:	46a2      	mov	sl, r4
 80072fe:	eb19 090b 	adds.w	r9, r9, fp
 8007302:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007306:	f04f 0100 	mov.w	r1, #0
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007312:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007316:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800731a:	4689      	mov	r9, r1
 800731c:	4692      	mov	sl, r2
 800731e:	eb1b 0509 	adds.w	r5, fp, r9
 8007322:	eb4c 060a 	adc.w	r6, ip, sl
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	4619      	mov	r1, r3
 800732c:	f04f 0200 	mov.w	r2, #0
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	f04f 0400 	mov.w	r4, #0
 8007338:	0094      	lsls	r4, r2, #2
 800733a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800733e:	008b      	lsls	r3, r1, #2
 8007340:	461a      	mov	r2, r3
 8007342:	4623      	mov	r3, r4
 8007344:	4628      	mov	r0, r5
 8007346:	4631      	mov	r1, r6
 8007348:	f7f9 fc2a 	bl	8000ba0 <__aeabi_uldivmod>
 800734c:	4603      	mov	r3, r0
 800734e:	460c      	mov	r4, r1
 8007350:	461a      	mov	r2, r3
 8007352:	4b32      	ldr	r3, [pc, #200]	; (800741c <UART_SetConfig+0x6f4>)
 8007354:	fba3 1302 	umull	r1, r3, r3, r2
 8007358:	095b      	lsrs	r3, r3, #5
 800735a:	2164      	movs	r1, #100	; 0x64
 800735c:	fb01 f303 	mul.w	r3, r1, r3
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	3332      	adds	r3, #50	; 0x32
 8007366:	4a2d      	ldr	r2, [pc, #180]	; (800741c <UART_SetConfig+0x6f4>)
 8007368:	fba2 2303 	umull	r2, r3, r2, r3
 800736c:	095b      	lsrs	r3, r3, #5
 800736e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007372:	4498      	add	r8, r3
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	469b      	mov	fp, r3
 8007378:	f04f 0c00 	mov.w	ip, #0
 800737c:	46d9      	mov	r9, fp
 800737e:	46e2      	mov	sl, ip
 8007380:	eb19 0309 	adds.w	r3, r9, r9
 8007384:	eb4a 040a 	adc.w	r4, sl, sl
 8007388:	4699      	mov	r9, r3
 800738a:	46a2      	mov	sl, r4
 800738c:	eb19 090b 	adds.w	r9, r9, fp
 8007390:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007394:	f04f 0100 	mov.w	r1, #0
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073a8:	4689      	mov	r9, r1
 80073aa:	4692      	mov	sl, r2
 80073ac:	eb1b 0509 	adds.w	r5, fp, r9
 80073b0:	eb4c 060a 	adc.w	r6, ip, sl
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	4619      	mov	r1, r3
 80073ba:	f04f 0200 	mov.w	r2, #0
 80073be:	f04f 0300 	mov.w	r3, #0
 80073c2:	f04f 0400 	mov.w	r4, #0
 80073c6:	0094      	lsls	r4, r2, #2
 80073c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80073cc:	008b      	lsls	r3, r1, #2
 80073ce:	461a      	mov	r2, r3
 80073d0:	4623      	mov	r3, r4
 80073d2:	4628      	mov	r0, r5
 80073d4:	4631      	mov	r1, r6
 80073d6:	f7f9 fbe3 	bl	8000ba0 <__aeabi_uldivmod>
 80073da:	4603      	mov	r3, r0
 80073dc:	460c      	mov	r4, r1
 80073de:	461a      	mov	r2, r3
 80073e0:	4b0e      	ldr	r3, [pc, #56]	; (800741c <UART_SetConfig+0x6f4>)
 80073e2:	fba3 1302 	umull	r1, r3, r3, r2
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	2164      	movs	r1, #100	; 0x64
 80073ea:	fb01 f303 	mul.w	r3, r1, r3
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	3332      	adds	r3, #50	; 0x32
 80073f4:	4a09      	ldr	r2, [pc, #36]	; (800741c <UART_SetConfig+0x6f4>)
 80073f6:	fba2 2303 	umull	r2, r3, r2, r3
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	f003 020f 	and.w	r2, r3, #15
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4442      	add	r2, r8
 8007406:	609a      	str	r2, [r3, #8]
}
 8007408:	e7ff      	b.n	800740a <UART_SetConfig+0x6e2>
 800740a:	bf00      	nop
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007414:	40011000 	.word	0x40011000
 8007418:	40011400 	.word	0x40011400
 800741c:	51eb851f 	.word	0x51eb851f

08007420 <gcvt>:
 8007420:	b530      	push	{r4, r5, lr}
 8007422:	ed2d 8b02 	vpush	{d8}
 8007426:	eeb0 8a40 	vmov.f32	s16, s0
 800742a:	eef0 8a60 	vmov.f32	s17, s1
 800742e:	460c      	mov	r4, r1
 8007430:	2200      	movs	r2, #0
 8007432:	b083      	sub	sp, #12
 8007434:	4605      	mov	r5, r0
 8007436:	2300      	movs	r3, #0
 8007438:	ec51 0b10 	vmov	r0, r1, d0
 800743c:	f7f9 fafa 	bl	8000a34 <__aeabi_dcmplt>
 8007440:	4622      	mov	r2, r4
 8007442:	b118      	cbz	r0, 800744c <gcvt+0x2c>
 8007444:	232d      	movs	r3, #45	; 0x2d
 8007446:	f802 3b01 	strb.w	r3, [r2], #1
 800744a:	3d01      	subs	r5, #1
 800744c:	2300      	movs	r3, #0
 800744e:	4809      	ldr	r0, [pc, #36]	; (8007474 <gcvt+0x54>)
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	4629      	mov	r1, r5
 8007454:	2367      	movs	r3, #103	; 0x67
 8007456:	eeb0 0a48 	vmov.f32	s0, s16
 800745a:	eef0 0a68 	vmov.f32	s1, s17
 800745e:	6800      	ldr	r0, [r0, #0]
 8007460:	f001 fa96 	bl	8008990 <_gcvt>
 8007464:	2800      	cmp	r0, #0
 8007466:	bf14      	ite	ne
 8007468:	4620      	movne	r0, r4
 800746a:	2000      	moveq	r0, #0
 800746c:	b003      	add	sp, #12
 800746e:	ecbd 8b02 	vpop	{d8}
 8007472:	bd30      	pop	{r4, r5, pc}
 8007474:	2000000c 	.word	0x2000000c

08007478 <__errno>:
 8007478:	4b01      	ldr	r3, [pc, #4]	; (8007480 <__errno+0x8>)
 800747a:	6818      	ldr	r0, [r3, #0]
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	2000000c 	.word	0x2000000c

08007484 <__libc_init_array>:
 8007484:	b570      	push	{r4, r5, r6, lr}
 8007486:	4e0d      	ldr	r6, [pc, #52]	; (80074bc <__libc_init_array+0x38>)
 8007488:	4c0d      	ldr	r4, [pc, #52]	; (80074c0 <__libc_init_array+0x3c>)
 800748a:	1ba4      	subs	r4, r4, r6
 800748c:	10a4      	asrs	r4, r4, #2
 800748e:	2500      	movs	r5, #0
 8007490:	42a5      	cmp	r5, r4
 8007492:	d109      	bne.n	80074a8 <__libc_init_array+0x24>
 8007494:	4e0b      	ldr	r6, [pc, #44]	; (80074c4 <__libc_init_array+0x40>)
 8007496:	4c0c      	ldr	r4, [pc, #48]	; (80074c8 <__libc_init_array+0x44>)
 8007498:	f003 f950 	bl	800a73c <_init>
 800749c:	1ba4      	subs	r4, r4, r6
 800749e:	10a4      	asrs	r4, r4, #2
 80074a0:	2500      	movs	r5, #0
 80074a2:	42a5      	cmp	r5, r4
 80074a4:	d105      	bne.n	80074b2 <__libc_init_array+0x2e>
 80074a6:	bd70      	pop	{r4, r5, r6, pc}
 80074a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074ac:	4798      	blx	r3
 80074ae:	3501      	adds	r5, #1
 80074b0:	e7ee      	b.n	8007490 <__libc_init_array+0xc>
 80074b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074b6:	4798      	blx	r3
 80074b8:	3501      	adds	r5, #1
 80074ba:	e7f2      	b.n	80074a2 <__libc_init_array+0x1e>
 80074bc:	0800aa58 	.word	0x0800aa58
 80074c0:	0800aa58 	.word	0x0800aa58
 80074c4:	0800aa58 	.word	0x0800aa58
 80074c8:	0800aa5c 	.word	0x0800aa5c

080074cc <__itoa>:
 80074cc:	1e93      	subs	r3, r2, #2
 80074ce:	2b22      	cmp	r3, #34	; 0x22
 80074d0:	b510      	push	{r4, lr}
 80074d2:	460c      	mov	r4, r1
 80074d4:	d904      	bls.n	80074e0 <__itoa+0x14>
 80074d6:	2300      	movs	r3, #0
 80074d8:	700b      	strb	r3, [r1, #0]
 80074da:	461c      	mov	r4, r3
 80074dc:	4620      	mov	r0, r4
 80074de:	bd10      	pop	{r4, pc}
 80074e0:	2a0a      	cmp	r2, #10
 80074e2:	d109      	bne.n	80074f8 <__itoa+0x2c>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	da07      	bge.n	80074f8 <__itoa+0x2c>
 80074e8:	232d      	movs	r3, #45	; 0x2d
 80074ea:	700b      	strb	r3, [r1, #0]
 80074ec:	4240      	negs	r0, r0
 80074ee:	2101      	movs	r1, #1
 80074f0:	4421      	add	r1, r4
 80074f2:	f000 fb57 	bl	8007ba4 <__utoa>
 80074f6:	e7f1      	b.n	80074dc <__itoa+0x10>
 80074f8:	2100      	movs	r1, #0
 80074fa:	e7f9      	b.n	80074f0 <__itoa+0x24>

080074fc <itoa>:
 80074fc:	f7ff bfe6 	b.w	80074cc <__itoa>

08007500 <memset>:
 8007500:	4402      	add	r2, r0
 8007502:	4603      	mov	r3, r0
 8007504:	4293      	cmp	r3, r2
 8007506:	d100      	bne.n	800750a <memset+0xa>
 8007508:	4770      	bx	lr
 800750a:	f803 1b01 	strb.w	r1, [r3], #1
 800750e:	e7f9      	b.n	8007504 <memset+0x4>

08007510 <__cvt>:
 8007510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007514:	ec55 4b10 	vmov	r4, r5, d0
 8007518:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800751a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800751e:	2d00      	cmp	r5, #0
 8007520:	460e      	mov	r6, r1
 8007522:	4691      	mov	r9, r2
 8007524:	4619      	mov	r1, r3
 8007526:	bfb8      	it	lt
 8007528:	4622      	movlt	r2, r4
 800752a:	462b      	mov	r3, r5
 800752c:	f027 0720 	bic.w	r7, r7, #32
 8007530:	bfbb      	ittet	lt
 8007532:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007536:	461d      	movlt	r5, r3
 8007538:	2300      	movge	r3, #0
 800753a:	232d      	movlt	r3, #45	; 0x2d
 800753c:	bfb8      	it	lt
 800753e:	4614      	movlt	r4, r2
 8007540:	2f46      	cmp	r7, #70	; 0x46
 8007542:	700b      	strb	r3, [r1, #0]
 8007544:	d004      	beq.n	8007550 <__cvt+0x40>
 8007546:	2f45      	cmp	r7, #69	; 0x45
 8007548:	d100      	bne.n	800754c <__cvt+0x3c>
 800754a:	3601      	adds	r6, #1
 800754c:	2102      	movs	r1, #2
 800754e:	e000      	b.n	8007552 <__cvt+0x42>
 8007550:	2103      	movs	r1, #3
 8007552:	ab03      	add	r3, sp, #12
 8007554:	9301      	str	r3, [sp, #4]
 8007556:	ab02      	add	r3, sp, #8
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	4632      	mov	r2, r6
 800755c:	4653      	mov	r3, sl
 800755e:	ec45 4b10 	vmov	d0, r4, r5
 8007562:	f000 fbe9 	bl	8007d38 <_dtoa_r>
 8007566:	2f47      	cmp	r7, #71	; 0x47
 8007568:	4680      	mov	r8, r0
 800756a:	d102      	bne.n	8007572 <__cvt+0x62>
 800756c:	f019 0f01 	tst.w	r9, #1
 8007570:	d026      	beq.n	80075c0 <__cvt+0xb0>
 8007572:	2f46      	cmp	r7, #70	; 0x46
 8007574:	eb08 0906 	add.w	r9, r8, r6
 8007578:	d111      	bne.n	800759e <__cvt+0x8e>
 800757a:	f898 3000 	ldrb.w	r3, [r8]
 800757e:	2b30      	cmp	r3, #48	; 0x30
 8007580:	d10a      	bne.n	8007598 <__cvt+0x88>
 8007582:	2200      	movs	r2, #0
 8007584:	2300      	movs	r3, #0
 8007586:	4620      	mov	r0, r4
 8007588:	4629      	mov	r1, r5
 800758a:	f7f9 fa49 	bl	8000a20 <__aeabi_dcmpeq>
 800758e:	b918      	cbnz	r0, 8007598 <__cvt+0x88>
 8007590:	f1c6 0601 	rsb	r6, r6, #1
 8007594:	f8ca 6000 	str.w	r6, [sl]
 8007598:	f8da 3000 	ldr.w	r3, [sl]
 800759c:	4499      	add	r9, r3
 800759e:	2200      	movs	r2, #0
 80075a0:	2300      	movs	r3, #0
 80075a2:	4620      	mov	r0, r4
 80075a4:	4629      	mov	r1, r5
 80075a6:	f7f9 fa3b 	bl	8000a20 <__aeabi_dcmpeq>
 80075aa:	b938      	cbnz	r0, 80075bc <__cvt+0xac>
 80075ac:	2230      	movs	r2, #48	; 0x30
 80075ae:	9b03      	ldr	r3, [sp, #12]
 80075b0:	454b      	cmp	r3, r9
 80075b2:	d205      	bcs.n	80075c0 <__cvt+0xb0>
 80075b4:	1c59      	adds	r1, r3, #1
 80075b6:	9103      	str	r1, [sp, #12]
 80075b8:	701a      	strb	r2, [r3, #0]
 80075ba:	e7f8      	b.n	80075ae <__cvt+0x9e>
 80075bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80075c0:	9b03      	ldr	r3, [sp, #12]
 80075c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075c4:	eba3 0308 	sub.w	r3, r3, r8
 80075c8:	4640      	mov	r0, r8
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	b004      	add	sp, #16
 80075ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080075d2 <__exponent>:
 80075d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075d4:	2900      	cmp	r1, #0
 80075d6:	4604      	mov	r4, r0
 80075d8:	bfba      	itte	lt
 80075da:	4249      	neglt	r1, r1
 80075dc:	232d      	movlt	r3, #45	; 0x2d
 80075de:	232b      	movge	r3, #43	; 0x2b
 80075e0:	2909      	cmp	r1, #9
 80075e2:	f804 2b02 	strb.w	r2, [r4], #2
 80075e6:	7043      	strb	r3, [r0, #1]
 80075e8:	dd20      	ble.n	800762c <__exponent+0x5a>
 80075ea:	f10d 0307 	add.w	r3, sp, #7
 80075ee:	461f      	mov	r7, r3
 80075f0:	260a      	movs	r6, #10
 80075f2:	fb91 f5f6 	sdiv	r5, r1, r6
 80075f6:	fb06 1115 	mls	r1, r6, r5, r1
 80075fa:	3130      	adds	r1, #48	; 0x30
 80075fc:	2d09      	cmp	r5, #9
 80075fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007602:	f103 32ff 	add.w	r2, r3, #4294967295
 8007606:	4629      	mov	r1, r5
 8007608:	dc09      	bgt.n	800761e <__exponent+0x4c>
 800760a:	3130      	adds	r1, #48	; 0x30
 800760c:	3b02      	subs	r3, #2
 800760e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007612:	42bb      	cmp	r3, r7
 8007614:	4622      	mov	r2, r4
 8007616:	d304      	bcc.n	8007622 <__exponent+0x50>
 8007618:	1a10      	subs	r0, r2, r0
 800761a:	b003      	add	sp, #12
 800761c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800761e:	4613      	mov	r3, r2
 8007620:	e7e7      	b.n	80075f2 <__exponent+0x20>
 8007622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007626:	f804 2b01 	strb.w	r2, [r4], #1
 800762a:	e7f2      	b.n	8007612 <__exponent+0x40>
 800762c:	2330      	movs	r3, #48	; 0x30
 800762e:	4419      	add	r1, r3
 8007630:	7083      	strb	r3, [r0, #2]
 8007632:	1d02      	adds	r2, r0, #4
 8007634:	70c1      	strb	r1, [r0, #3]
 8007636:	e7ef      	b.n	8007618 <__exponent+0x46>

08007638 <_printf_float>:
 8007638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	b08d      	sub	sp, #52	; 0x34
 800763e:	460c      	mov	r4, r1
 8007640:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007644:	4616      	mov	r6, r2
 8007646:	461f      	mov	r7, r3
 8007648:	4605      	mov	r5, r0
 800764a:	f001 fa6b 	bl	8008b24 <_localeconv_r>
 800764e:	6803      	ldr	r3, [r0, #0]
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	4618      	mov	r0, r3
 8007654:	f7f8 fdb8 	bl	80001c8 <strlen>
 8007658:	2300      	movs	r3, #0
 800765a:	930a      	str	r3, [sp, #40]	; 0x28
 800765c:	f8d8 3000 	ldr.w	r3, [r8]
 8007660:	9005      	str	r0, [sp, #20]
 8007662:	3307      	adds	r3, #7
 8007664:	f023 0307 	bic.w	r3, r3, #7
 8007668:	f103 0208 	add.w	r2, r3, #8
 800766c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007670:	f8d4 b000 	ldr.w	fp, [r4]
 8007674:	f8c8 2000 	str.w	r2, [r8]
 8007678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007680:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007684:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007688:	9307      	str	r3, [sp, #28]
 800768a:	f8cd 8018 	str.w	r8, [sp, #24]
 800768e:	f04f 32ff 	mov.w	r2, #4294967295
 8007692:	4ba7      	ldr	r3, [pc, #668]	; (8007930 <_printf_float+0x2f8>)
 8007694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007698:	f7f9 f9f4 	bl	8000a84 <__aeabi_dcmpun>
 800769c:	bb70      	cbnz	r0, 80076fc <_printf_float+0xc4>
 800769e:	f04f 32ff 	mov.w	r2, #4294967295
 80076a2:	4ba3      	ldr	r3, [pc, #652]	; (8007930 <_printf_float+0x2f8>)
 80076a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076a8:	f7f9 f9ce 	bl	8000a48 <__aeabi_dcmple>
 80076ac:	bb30      	cbnz	r0, 80076fc <_printf_float+0xc4>
 80076ae:	2200      	movs	r2, #0
 80076b0:	2300      	movs	r3, #0
 80076b2:	4640      	mov	r0, r8
 80076b4:	4649      	mov	r1, r9
 80076b6:	f7f9 f9bd 	bl	8000a34 <__aeabi_dcmplt>
 80076ba:	b110      	cbz	r0, 80076c2 <_printf_float+0x8a>
 80076bc:	232d      	movs	r3, #45	; 0x2d
 80076be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076c2:	4a9c      	ldr	r2, [pc, #624]	; (8007934 <_printf_float+0x2fc>)
 80076c4:	4b9c      	ldr	r3, [pc, #624]	; (8007938 <_printf_float+0x300>)
 80076c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80076ca:	bf8c      	ite	hi
 80076cc:	4690      	movhi	r8, r2
 80076ce:	4698      	movls	r8, r3
 80076d0:	2303      	movs	r3, #3
 80076d2:	f02b 0204 	bic.w	r2, fp, #4
 80076d6:	6123      	str	r3, [r4, #16]
 80076d8:	6022      	str	r2, [r4, #0]
 80076da:	f04f 0900 	mov.w	r9, #0
 80076de:	9700      	str	r7, [sp, #0]
 80076e0:	4633      	mov	r3, r6
 80076e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80076e4:	4621      	mov	r1, r4
 80076e6:	4628      	mov	r0, r5
 80076e8:	f000 f9e6 	bl	8007ab8 <_printf_common>
 80076ec:	3001      	adds	r0, #1
 80076ee:	f040 808d 	bne.w	800780c <_printf_float+0x1d4>
 80076f2:	f04f 30ff 	mov.w	r0, #4294967295
 80076f6:	b00d      	add	sp, #52	; 0x34
 80076f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fc:	4642      	mov	r2, r8
 80076fe:	464b      	mov	r3, r9
 8007700:	4640      	mov	r0, r8
 8007702:	4649      	mov	r1, r9
 8007704:	f7f9 f9be 	bl	8000a84 <__aeabi_dcmpun>
 8007708:	b110      	cbz	r0, 8007710 <_printf_float+0xd8>
 800770a:	4a8c      	ldr	r2, [pc, #560]	; (800793c <_printf_float+0x304>)
 800770c:	4b8c      	ldr	r3, [pc, #560]	; (8007940 <_printf_float+0x308>)
 800770e:	e7da      	b.n	80076c6 <_printf_float+0x8e>
 8007710:	6861      	ldr	r1, [r4, #4]
 8007712:	1c4b      	adds	r3, r1, #1
 8007714:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007718:	a80a      	add	r0, sp, #40	; 0x28
 800771a:	d13e      	bne.n	800779a <_printf_float+0x162>
 800771c:	2306      	movs	r3, #6
 800771e:	6063      	str	r3, [r4, #4]
 8007720:	2300      	movs	r3, #0
 8007722:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007726:	ab09      	add	r3, sp, #36	; 0x24
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	ec49 8b10 	vmov	d0, r8, r9
 800772e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007732:	6022      	str	r2, [r4, #0]
 8007734:	f8cd a004 	str.w	sl, [sp, #4]
 8007738:	6861      	ldr	r1, [r4, #4]
 800773a:	4628      	mov	r0, r5
 800773c:	f7ff fee8 	bl	8007510 <__cvt>
 8007740:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007744:	2b47      	cmp	r3, #71	; 0x47
 8007746:	4680      	mov	r8, r0
 8007748:	d109      	bne.n	800775e <_printf_float+0x126>
 800774a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800774c:	1cd8      	adds	r0, r3, #3
 800774e:	db02      	blt.n	8007756 <_printf_float+0x11e>
 8007750:	6862      	ldr	r2, [r4, #4]
 8007752:	4293      	cmp	r3, r2
 8007754:	dd47      	ble.n	80077e6 <_printf_float+0x1ae>
 8007756:	f1aa 0a02 	sub.w	sl, sl, #2
 800775a:	fa5f fa8a 	uxtb.w	sl, sl
 800775e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007762:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007764:	d824      	bhi.n	80077b0 <_printf_float+0x178>
 8007766:	3901      	subs	r1, #1
 8007768:	4652      	mov	r2, sl
 800776a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800776e:	9109      	str	r1, [sp, #36]	; 0x24
 8007770:	f7ff ff2f 	bl	80075d2 <__exponent>
 8007774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007776:	1813      	adds	r3, r2, r0
 8007778:	2a01      	cmp	r2, #1
 800777a:	4681      	mov	r9, r0
 800777c:	6123      	str	r3, [r4, #16]
 800777e:	dc02      	bgt.n	8007786 <_printf_float+0x14e>
 8007780:	6822      	ldr	r2, [r4, #0]
 8007782:	07d1      	lsls	r1, r2, #31
 8007784:	d501      	bpl.n	800778a <_printf_float+0x152>
 8007786:	3301      	adds	r3, #1
 8007788:	6123      	str	r3, [r4, #16]
 800778a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0a5      	beq.n	80076de <_printf_float+0xa6>
 8007792:	232d      	movs	r3, #45	; 0x2d
 8007794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007798:	e7a1      	b.n	80076de <_printf_float+0xa6>
 800779a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800779e:	f000 8177 	beq.w	8007a90 <_printf_float+0x458>
 80077a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80077a6:	d1bb      	bne.n	8007720 <_printf_float+0xe8>
 80077a8:	2900      	cmp	r1, #0
 80077aa:	d1b9      	bne.n	8007720 <_printf_float+0xe8>
 80077ac:	2301      	movs	r3, #1
 80077ae:	e7b6      	b.n	800771e <_printf_float+0xe6>
 80077b0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80077b4:	d119      	bne.n	80077ea <_printf_float+0x1b2>
 80077b6:	2900      	cmp	r1, #0
 80077b8:	6863      	ldr	r3, [r4, #4]
 80077ba:	dd0c      	ble.n	80077d6 <_printf_float+0x19e>
 80077bc:	6121      	str	r1, [r4, #16]
 80077be:	b913      	cbnz	r3, 80077c6 <_printf_float+0x18e>
 80077c0:	6822      	ldr	r2, [r4, #0]
 80077c2:	07d2      	lsls	r2, r2, #31
 80077c4:	d502      	bpl.n	80077cc <_printf_float+0x194>
 80077c6:	3301      	adds	r3, #1
 80077c8:	440b      	add	r3, r1
 80077ca:	6123      	str	r3, [r4, #16]
 80077cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ce:	65a3      	str	r3, [r4, #88]	; 0x58
 80077d0:	f04f 0900 	mov.w	r9, #0
 80077d4:	e7d9      	b.n	800778a <_printf_float+0x152>
 80077d6:	b913      	cbnz	r3, 80077de <_printf_float+0x1a6>
 80077d8:	6822      	ldr	r2, [r4, #0]
 80077da:	07d0      	lsls	r0, r2, #31
 80077dc:	d501      	bpl.n	80077e2 <_printf_float+0x1aa>
 80077de:	3302      	adds	r3, #2
 80077e0:	e7f3      	b.n	80077ca <_printf_float+0x192>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e7f1      	b.n	80077ca <_printf_float+0x192>
 80077e6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80077ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80077ee:	4293      	cmp	r3, r2
 80077f0:	db05      	blt.n	80077fe <_printf_float+0x1c6>
 80077f2:	6822      	ldr	r2, [r4, #0]
 80077f4:	6123      	str	r3, [r4, #16]
 80077f6:	07d1      	lsls	r1, r2, #31
 80077f8:	d5e8      	bpl.n	80077cc <_printf_float+0x194>
 80077fa:	3301      	adds	r3, #1
 80077fc:	e7e5      	b.n	80077ca <_printf_float+0x192>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	bfd4      	ite	le
 8007802:	f1c3 0302 	rsble	r3, r3, #2
 8007806:	2301      	movgt	r3, #1
 8007808:	4413      	add	r3, r2
 800780a:	e7de      	b.n	80077ca <_printf_float+0x192>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	055a      	lsls	r2, r3, #21
 8007810:	d407      	bmi.n	8007822 <_printf_float+0x1ea>
 8007812:	6923      	ldr	r3, [r4, #16]
 8007814:	4642      	mov	r2, r8
 8007816:	4631      	mov	r1, r6
 8007818:	4628      	mov	r0, r5
 800781a:	47b8      	blx	r7
 800781c:	3001      	adds	r0, #1
 800781e:	d12b      	bne.n	8007878 <_printf_float+0x240>
 8007820:	e767      	b.n	80076f2 <_printf_float+0xba>
 8007822:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007826:	f240 80dc 	bls.w	80079e2 <_printf_float+0x3aa>
 800782a:	2200      	movs	r2, #0
 800782c:	2300      	movs	r3, #0
 800782e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007832:	f7f9 f8f5 	bl	8000a20 <__aeabi_dcmpeq>
 8007836:	2800      	cmp	r0, #0
 8007838:	d033      	beq.n	80078a2 <_printf_float+0x26a>
 800783a:	2301      	movs	r3, #1
 800783c:	4a41      	ldr	r2, [pc, #260]	; (8007944 <_printf_float+0x30c>)
 800783e:	4631      	mov	r1, r6
 8007840:	4628      	mov	r0, r5
 8007842:	47b8      	blx	r7
 8007844:	3001      	adds	r0, #1
 8007846:	f43f af54 	beq.w	80076f2 <_printf_float+0xba>
 800784a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800784e:	429a      	cmp	r2, r3
 8007850:	db02      	blt.n	8007858 <_printf_float+0x220>
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	07d8      	lsls	r0, r3, #31
 8007856:	d50f      	bpl.n	8007878 <_printf_float+0x240>
 8007858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800785c:	4631      	mov	r1, r6
 800785e:	4628      	mov	r0, r5
 8007860:	47b8      	blx	r7
 8007862:	3001      	adds	r0, #1
 8007864:	f43f af45 	beq.w	80076f2 <_printf_float+0xba>
 8007868:	f04f 0800 	mov.w	r8, #0
 800786c:	f104 091a 	add.w	r9, r4, #26
 8007870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007872:	3b01      	subs	r3, #1
 8007874:	4543      	cmp	r3, r8
 8007876:	dc09      	bgt.n	800788c <_printf_float+0x254>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	079b      	lsls	r3, r3, #30
 800787c:	f100 8103 	bmi.w	8007a86 <_printf_float+0x44e>
 8007880:	68e0      	ldr	r0, [r4, #12]
 8007882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007884:	4298      	cmp	r0, r3
 8007886:	bfb8      	it	lt
 8007888:	4618      	movlt	r0, r3
 800788a:	e734      	b.n	80076f6 <_printf_float+0xbe>
 800788c:	2301      	movs	r3, #1
 800788e:	464a      	mov	r2, r9
 8007890:	4631      	mov	r1, r6
 8007892:	4628      	mov	r0, r5
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	f43f af2b 	beq.w	80076f2 <_printf_float+0xba>
 800789c:	f108 0801 	add.w	r8, r8, #1
 80078a0:	e7e6      	b.n	8007870 <_printf_float+0x238>
 80078a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	dc2b      	bgt.n	8007900 <_printf_float+0x2c8>
 80078a8:	2301      	movs	r3, #1
 80078aa:	4a26      	ldr	r2, [pc, #152]	; (8007944 <_printf_float+0x30c>)
 80078ac:	4631      	mov	r1, r6
 80078ae:	4628      	mov	r0, r5
 80078b0:	47b8      	blx	r7
 80078b2:	3001      	adds	r0, #1
 80078b4:	f43f af1d 	beq.w	80076f2 <_printf_float+0xba>
 80078b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ba:	b923      	cbnz	r3, 80078c6 <_printf_float+0x28e>
 80078bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078be:	b913      	cbnz	r3, 80078c6 <_printf_float+0x28e>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	07d9      	lsls	r1, r3, #31
 80078c4:	d5d8      	bpl.n	8007878 <_printf_float+0x240>
 80078c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078ca:	4631      	mov	r1, r6
 80078cc:	4628      	mov	r0, r5
 80078ce:	47b8      	blx	r7
 80078d0:	3001      	adds	r0, #1
 80078d2:	f43f af0e 	beq.w	80076f2 <_printf_float+0xba>
 80078d6:	f04f 0900 	mov.w	r9, #0
 80078da:	f104 0a1a 	add.w	sl, r4, #26
 80078de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e0:	425b      	negs	r3, r3
 80078e2:	454b      	cmp	r3, r9
 80078e4:	dc01      	bgt.n	80078ea <_printf_float+0x2b2>
 80078e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e8:	e794      	b.n	8007814 <_printf_float+0x1dc>
 80078ea:	2301      	movs	r3, #1
 80078ec:	4652      	mov	r2, sl
 80078ee:	4631      	mov	r1, r6
 80078f0:	4628      	mov	r0, r5
 80078f2:	47b8      	blx	r7
 80078f4:	3001      	adds	r0, #1
 80078f6:	f43f aefc 	beq.w	80076f2 <_printf_float+0xba>
 80078fa:	f109 0901 	add.w	r9, r9, #1
 80078fe:	e7ee      	b.n	80078de <_printf_float+0x2a6>
 8007900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007902:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007904:	429a      	cmp	r2, r3
 8007906:	bfa8      	it	ge
 8007908:	461a      	movge	r2, r3
 800790a:	2a00      	cmp	r2, #0
 800790c:	4691      	mov	r9, r2
 800790e:	dd07      	ble.n	8007920 <_printf_float+0x2e8>
 8007910:	4613      	mov	r3, r2
 8007912:	4631      	mov	r1, r6
 8007914:	4642      	mov	r2, r8
 8007916:	4628      	mov	r0, r5
 8007918:	47b8      	blx	r7
 800791a:	3001      	adds	r0, #1
 800791c:	f43f aee9 	beq.w	80076f2 <_printf_float+0xba>
 8007920:	f104 031a 	add.w	r3, r4, #26
 8007924:	f04f 0b00 	mov.w	fp, #0
 8007928:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800792c:	9306      	str	r3, [sp, #24]
 800792e:	e015      	b.n	800795c <_printf_float+0x324>
 8007930:	7fefffff 	.word	0x7fefffff
 8007934:	0800a778 	.word	0x0800a778
 8007938:	0800a774 	.word	0x0800a774
 800793c:	0800a780 	.word	0x0800a780
 8007940:	0800a77c 	.word	0x0800a77c
 8007944:	0800a784 	.word	0x0800a784
 8007948:	2301      	movs	r3, #1
 800794a:	9a06      	ldr	r2, [sp, #24]
 800794c:	4631      	mov	r1, r6
 800794e:	4628      	mov	r0, r5
 8007950:	47b8      	blx	r7
 8007952:	3001      	adds	r0, #1
 8007954:	f43f aecd 	beq.w	80076f2 <_printf_float+0xba>
 8007958:	f10b 0b01 	add.w	fp, fp, #1
 800795c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007960:	ebaa 0309 	sub.w	r3, sl, r9
 8007964:	455b      	cmp	r3, fp
 8007966:	dcef      	bgt.n	8007948 <_printf_float+0x310>
 8007968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800796c:	429a      	cmp	r2, r3
 800796e:	44d0      	add	r8, sl
 8007970:	db15      	blt.n	800799e <_printf_float+0x366>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	07da      	lsls	r2, r3, #31
 8007976:	d412      	bmi.n	800799e <_printf_float+0x366>
 8007978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800797a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800797c:	eba3 020a 	sub.w	r2, r3, sl
 8007980:	eba3 0a01 	sub.w	sl, r3, r1
 8007984:	4592      	cmp	sl, r2
 8007986:	bfa8      	it	ge
 8007988:	4692      	movge	sl, r2
 800798a:	f1ba 0f00 	cmp.w	sl, #0
 800798e:	dc0e      	bgt.n	80079ae <_printf_float+0x376>
 8007990:	f04f 0800 	mov.w	r8, #0
 8007994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007998:	f104 091a 	add.w	r9, r4, #26
 800799c:	e019      	b.n	80079d2 <_printf_float+0x39a>
 800799e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079a2:	4631      	mov	r1, r6
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b8      	blx	r7
 80079a8:	3001      	adds	r0, #1
 80079aa:	d1e5      	bne.n	8007978 <_printf_float+0x340>
 80079ac:	e6a1      	b.n	80076f2 <_printf_float+0xba>
 80079ae:	4653      	mov	r3, sl
 80079b0:	4642      	mov	r2, r8
 80079b2:	4631      	mov	r1, r6
 80079b4:	4628      	mov	r0, r5
 80079b6:	47b8      	blx	r7
 80079b8:	3001      	adds	r0, #1
 80079ba:	d1e9      	bne.n	8007990 <_printf_float+0x358>
 80079bc:	e699      	b.n	80076f2 <_printf_float+0xba>
 80079be:	2301      	movs	r3, #1
 80079c0:	464a      	mov	r2, r9
 80079c2:	4631      	mov	r1, r6
 80079c4:	4628      	mov	r0, r5
 80079c6:	47b8      	blx	r7
 80079c8:	3001      	adds	r0, #1
 80079ca:	f43f ae92 	beq.w	80076f2 <_printf_float+0xba>
 80079ce:	f108 0801 	add.w	r8, r8, #1
 80079d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	eba3 030a 	sub.w	r3, r3, sl
 80079dc:	4543      	cmp	r3, r8
 80079de:	dcee      	bgt.n	80079be <_printf_float+0x386>
 80079e0:	e74a      	b.n	8007878 <_printf_float+0x240>
 80079e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079e4:	2a01      	cmp	r2, #1
 80079e6:	dc01      	bgt.n	80079ec <_printf_float+0x3b4>
 80079e8:	07db      	lsls	r3, r3, #31
 80079ea:	d53a      	bpl.n	8007a62 <_printf_float+0x42a>
 80079ec:	2301      	movs	r3, #1
 80079ee:	4642      	mov	r2, r8
 80079f0:	4631      	mov	r1, r6
 80079f2:	4628      	mov	r0, r5
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	f43f ae7b 	beq.w	80076f2 <_printf_float+0xba>
 80079fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a00:	4631      	mov	r1, r6
 8007a02:	4628      	mov	r0, r5
 8007a04:	47b8      	blx	r7
 8007a06:	3001      	adds	r0, #1
 8007a08:	f108 0801 	add.w	r8, r8, #1
 8007a0c:	f43f ae71 	beq.w	80076f2 <_printf_float+0xba>
 8007a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a12:	2200      	movs	r2, #0
 8007a14:	f103 3aff 	add.w	sl, r3, #4294967295
 8007a18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f7f8 ffff 	bl	8000a20 <__aeabi_dcmpeq>
 8007a22:	b9c8      	cbnz	r0, 8007a58 <_printf_float+0x420>
 8007a24:	4653      	mov	r3, sl
 8007a26:	4642      	mov	r2, r8
 8007a28:	4631      	mov	r1, r6
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	47b8      	blx	r7
 8007a2e:	3001      	adds	r0, #1
 8007a30:	d10e      	bne.n	8007a50 <_printf_float+0x418>
 8007a32:	e65e      	b.n	80076f2 <_printf_float+0xba>
 8007a34:	2301      	movs	r3, #1
 8007a36:	4652      	mov	r2, sl
 8007a38:	4631      	mov	r1, r6
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	47b8      	blx	r7
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f43f ae57 	beq.w	80076f2 <_printf_float+0xba>
 8007a44:	f108 0801 	add.w	r8, r8, #1
 8007a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	4543      	cmp	r3, r8
 8007a4e:	dcf1      	bgt.n	8007a34 <_printf_float+0x3fc>
 8007a50:	464b      	mov	r3, r9
 8007a52:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a56:	e6de      	b.n	8007816 <_printf_float+0x1de>
 8007a58:	f04f 0800 	mov.w	r8, #0
 8007a5c:	f104 0a1a 	add.w	sl, r4, #26
 8007a60:	e7f2      	b.n	8007a48 <_printf_float+0x410>
 8007a62:	2301      	movs	r3, #1
 8007a64:	e7df      	b.n	8007a26 <_printf_float+0x3ee>
 8007a66:	2301      	movs	r3, #1
 8007a68:	464a      	mov	r2, r9
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	47b8      	blx	r7
 8007a70:	3001      	adds	r0, #1
 8007a72:	f43f ae3e 	beq.w	80076f2 <_printf_float+0xba>
 8007a76:	f108 0801 	add.w	r8, r8, #1
 8007a7a:	68e3      	ldr	r3, [r4, #12]
 8007a7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a7e:	1a9b      	subs	r3, r3, r2
 8007a80:	4543      	cmp	r3, r8
 8007a82:	dcf0      	bgt.n	8007a66 <_printf_float+0x42e>
 8007a84:	e6fc      	b.n	8007880 <_printf_float+0x248>
 8007a86:	f04f 0800 	mov.w	r8, #0
 8007a8a:	f104 0919 	add.w	r9, r4, #25
 8007a8e:	e7f4      	b.n	8007a7a <_printf_float+0x442>
 8007a90:	2900      	cmp	r1, #0
 8007a92:	f43f ae8b 	beq.w	80077ac <_printf_float+0x174>
 8007a96:	2300      	movs	r3, #0
 8007a98:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007a9c:	ab09      	add	r3, sp, #36	; 0x24
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	ec49 8b10 	vmov	d0, r8, r9
 8007aa4:	6022      	str	r2, [r4, #0]
 8007aa6:	f8cd a004 	str.w	sl, [sp, #4]
 8007aaa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f7ff fd2e 	bl	8007510 <__cvt>
 8007ab4:	4680      	mov	r8, r0
 8007ab6:	e648      	b.n	800774a <_printf_float+0x112>

08007ab8 <_printf_common>:
 8007ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007abc:	4691      	mov	r9, r2
 8007abe:	461f      	mov	r7, r3
 8007ac0:	688a      	ldr	r2, [r1, #8]
 8007ac2:	690b      	ldr	r3, [r1, #16]
 8007ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	bfb8      	it	lt
 8007acc:	4613      	movlt	r3, r2
 8007ace:	f8c9 3000 	str.w	r3, [r9]
 8007ad2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	460c      	mov	r4, r1
 8007ada:	b112      	cbz	r2, 8007ae2 <_printf_common+0x2a>
 8007adc:	3301      	adds	r3, #1
 8007ade:	f8c9 3000 	str.w	r3, [r9]
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	0699      	lsls	r1, r3, #26
 8007ae6:	bf42      	ittt	mi
 8007ae8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007aec:	3302      	addmi	r3, #2
 8007aee:	f8c9 3000 	strmi.w	r3, [r9]
 8007af2:	6825      	ldr	r5, [r4, #0]
 8007af4:	f015 0506 	ands.w	r5, r5, #6
 8007af8:	d107      	bne.n	8007b0a <_printf_common+0x52>
 8007afa:	f104 0a19 	add.w	sl, r4, #25
 8007afe:	68e3      	ldr	r3, [r4, #12]
 8007b00:	f8d9 2000 	ldr.w	r2, [r9]
 8007b04:	1a9b      	subs	r3, r3, r2
 8007b06:	42ab      	cmp	r3, r5
 8007b08:	dc28      	bgt.n	8007b5c <_printf_common+0xa4>
 8007b0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007b0e:	6822      	ldr	r2, [r4, #0]
 8007b10:	3300      	adds	r3, #0
 8007b12:	bf18      	it	ne
 8007b14:	2301      	movne	r3, #1
 8007b16:	0692      	lsls	r2, r2, #26
 8007b18:	d42d      	bmi.n	8007b76 <_printf_common+0xbe>
 8007b1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b1e:	4639      	mov	r1, r7
 8007b20:	4630      	mov	r0, r6
 8007b22:	47c0      	blx	r8
 8007b24:	3001      	adds	r0, #1
 8007b26:	d020      	beq.n	8007b6a <_printf_common+0xb2>
 8007b28:	6823      	ldr	r3, [r4, #0]
 8007b2a:	68e5      	ldr	r5, [r4, #12]
 8007b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8007b30:	f003 0306 	and.w	r3, r3, #6
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	bf08      	it	eq
 8007b38:	1aad      	subeq	r5, r5, r2
 8007b3a:	68a3      	ldr	r3, [r4, #8]
 8007b3c:	6922      	ldr	r2, [r4, #16]
 8007b3e:	bf0c      	ite	eq
 8007b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b44:	2500      	movne	r5, #0
 8007b46:	4293      	cmp	r3, r2
 8007b48:	bfc4      	itt	gt
 8007b4a:	1a9b      	subgt	r3, r3, r2
 8007b4c:	18ed      	addgt	r5, r5, r3
 8007b4e:	f04f 0900 	mov.w	r9, #0
 8007b52:	341a      	adds	r4, #26
 8007b54:	454d      	cmp	r5, r9
 8007b56:	d11a      	bne.n	8007b8e <_printf_common+0xd6>
 8007b58:	2000      	movs	r0, #0
 8007b5a:	e008      	b.n	8007b6e <_printf_common+0xb6>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	4652      	mov	r2, sl
 8007b60:	4639      	mov	r1, r7
 8007b62:	4630      	mov	r0, r6
 8007b64:	47c0      	blx	r8
 8007b66:	3001      	adds	r0, #1
 8007b68:	d103      	bne.n	8007b72 <_printf_common+0xba>
 8007b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b72:	3501      	adds	r5, #1
 8007b74:	e7c3      	b.n	8007afe <_printf_common+0x46>
 8007b76:	18e1      	adds	r1, r4, r3
 8007b78:	1c5a      	adds	r2, r3, #1
 8007b7a:	2030      	movs	r0, #48	; 0x30
 8007b7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b80:	4422      	add	r2, r4
 8007b82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b8a:	3302      	adds	r3, #2
 8007b8c:	e7c5      	b.n	8007b1a <_printf_common+0x62>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4622      	mov	r2, r4
 8007b92:	4639      	mov	r1, r7
 8007b94:	4630      	mov	r0, r6
 8007b96:	47c0      	blx	r8
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d0e6      	beq.n	8007b6a <_printf_common+0xb2>
 8007b9c:	f109 0901 	add.w	r9, r9, #1
 8007ba0:	e7d8      	b.n	8007b54 <_printf_common+0x9c>
	...

08007ba4 <__utoa>:
 8007ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ba6:	4b1d      	ldr	r3, [pc, #116]	; (8007c1c <__utoa+0x78>)
 8007ba8:	b08b      	sub	sp, #44	; 0x2c
 8007baa:	4605      	mov	r5, r0
 8007bac:	460c      	mov	r4, r1
 8007bae:	466e      	mov	r6, sp
 8007bb0:	f103 0c20 	add.w	ip, r3, #32
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	6859      	ldr	r1, [r3, #4]
 8007bb8:	4637      	mov	r7, r6
 8007bba:	c703      	stmia	r7!, {r0, r1}
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	4563      	cmp	r3, ip
 8007bc0:	463e      	mov	r6, r7
 8007bc2:	d1f7      	bne.n	8007bb4 <__utoa+0x10>
 8007bc4:	6818      	ldr	r0, [r3, #0]
 8007bc6:	791b      	ldrb	r3, [r3, #4]
 8007bc8:	713b      	strb	r3, [r7, #4]
 8007bca:	1e93      	subs	r3, r2, #2
 8007bcc:	2b22      	cmp	r3, #34	; 0x22
 8007bce:	6038      	str	r0, [r7, #0]
 8007bd0:	f04f 0300 	mov.w	r3, #0
 8007bd4:	d904      	bls.n	8007be0 <__utoa+0x3c>
 8007bd6:	7023      	strb	r3, [r4, #0]
 8007bd8:	461c      	mov	r4, r3
 8007bda:	4620      	mov	r0, r4
 8007bdc:	b00b      	add	sp, #44	; 0x2c
 8007bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007be0:	1e66      	subs	r6, r4, #1
 8007be2:	fbb5 f0f2 	udiv	r0, r5, r2
 8007be6:	af0a      	add	r7, sp, #40	; 0x28
 8007be8:	fb02 5510 	mls	r5, r2, r0, r5
 8007bec:	443d      	add	r5, r7
 8007bee:	1c59      	adds	r1, r3, #1
 8007bf0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8007bf4:	f806 5f01 	strb.w	r5, [r6, #1]!
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	b968      	cbnz	r0, 8007c18 <__utoa+0x74>
 8007bfc:	5460      	strb	r0, [r4, r1]
 8007bfe:	4423      	add	r3, r4
 8007c00:	4622      	mov	r2, r4
 8007c02:	1b19      	subs	r1, r3, r4
 8007c04:	1b10      	subs	r0, r2, r4
 8007c06:	4281      	cmp	r1, r0
 8007c08:	dde7      	ble.n	8007bda <__utoa+0x36>
 8007c0a:	7811      	ldrb	r1, [r2, #0]
 8007c0c:	7818      	ldrb	r0, [r3, #0]
 8007c0e:	f802 0b01 	strb.w	r0, [r2], #1
 8007c12:	f803 1901 	strb.w	r1, [r3], #-1
 8007c16:	e7f4      	b.n	8007c02 <__utoa+0x5e>
 8007c18:	460b      	mov	r3, r1
 8007c1a:	e7e2      	b.n	8007be2 <__utoa+0x3e>
 8007c1c:	0800a786 	.word	0x0800a786

08007c20 <quorem>:
 8007c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	6903      	ldr	r3, [r0, #16]
 8007c26:	690c      	ldr	r4, [r1, #16]
 8007c28:	42a3      	cmp	r3, r4
 8007c2a:	4680      	mov	r8, r0
 8007c2c:	f2c0 8082 	blt.w	8007d34 <quorem+0x114>
 8007c30:	3c01      	subs	r4, #1
 8007c32:	f101 0714 	add.w	r7, r1, #20
 8007c36:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007c3a:	f100 0614 	add.w	r6, r0, #20
 8007c3e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007c42:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007c46:	eb06 030c 	add.w	r3, r6, ip
 8007c4a:	3501      	adds	r5, #1
 8007c4c:	eb07 090c 	add.w	r9, r7, ip
 8007c50:	9301      	str	r3, [sp, #4]
 8007c52:	fbb0 f5f5 	udiv	r5, r0, r5
 8007c56:	b395      	cbz	r5, 8007cbe <quorem+0x9e>
 8007c58:	f04f 0a00 	mov.w	sl, #0
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	46b6      	mov	lr, r6
 8007c60:	46d3      	mov	fp, sl
 8007c62:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c66:	b293      	uxth	r3, r2
 8007c68:	fb05 a303 	mla	r3, r5, r3, sl
 8007c6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	ebab 0303 	sub.w	r3, fp, r3
 8007c76:	0c12      	lsrs	r2, r2, #16
 8007c78:	f8de b000 	ldr.w	fp, [lr]
 8007c7c:	fb05 a202 	mla	r2, r5, r2, sl
 8007c80:	fa13 f38b 	uxtah	r3, r3, fp
 8007c84:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007c88:	fa1f fb82 	uxth.w	fp, r2
 8007c8c:	f8de 2000 	ldr.w	r2, [lr]
 8007c90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c9e:	4581      	cmp	r9, r0
 8007ca0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007ca4:	f84e 3b04 	str.w	r3, [lr], #4
 8007ca8:	d2db      	bcs.n	8007c62 <quorem+0x42>
 8007caa:	f856 300c 	ldr.w	r3, [r6, ip]
 8007cae:	b933      	cbnz	r3, 8007cbe <quorem+0x9e>
 8007cb0:	9b01      	ldr	r3, [sp, #4]
 8007cb2:	3b04      	subs	r3, #4
 8007cb4:	429e      	cmp	r6, r3
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	d330      	bcc.n	8007d1c <quorem+0xfc>
 8007cba:	f8c8 4010 	str.w	r4, [r8, #16]
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	f001 f966 	bl	8008f90 <__mcmp>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	db25      	blt.n	8007d14 <quorem+0xf4>
 8007cc8:	3501      	adds	r5, #1
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f04f 0c00 	mov.w	ip, #0
 8007cd0:	f857 2b04 	ldr.w	r2, [r7], #4
 8007cd4:	f8d0 e000 	ldr.w	lr, [r0]
 8007cd8:	b293      	uxth	r3, r2
 8007cda:	ebac 0303 	sub.w	r3, ip, r3
 8007cde:	0c12      	lsrs	r2, r2, #16
 8007ce0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ce4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ce8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cf2:	45b9      	cmp	r9, r7
 8007cf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007cf8:	f840 3b04 	str.w	r3, [r0], #4
 8007cfc:	d2e8      	bcs.n	8007cd0 <quorem+0xb0>
 8007cfe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007d02:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007d06:	b92a      	cbnz	r2, 8007d14 <quorem+0xf4>
 8007d08:	3b04      	subs	r3, #4
 8007d0a:	429e      	cmp	r6, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	d30b      	bcc.n	8007d28 <quorem+0x108>
 8007d10:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d14:	4628      	mov	r0, r5
 8007d16:	b003      	add	sp, #12
 8007d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1c:	6812      	ldr	r2, [r2, #0]
 8007d1e:	3b04      	subs	r3, #4
 8007d20:	2a00      	cmp	r2, #0
 8007d22:	d1ca      	bne.n	8007cba <quorem+0x9a>
 8007d24:	3c01      	subs	r4, #1
 8007d26:	e7c5      	b.n	8007cb4 <quorem+0x94>
 8007d28:	6812      	ldr	r2, [r2, #0]
 8007d2a:	3b04      	subs	r3, #4
 8007d2c:	2a00      	cmp	r2, #0
 8007d2e:	d1ef      	bne.n	8007d10 <quorem+0xf0>
 8007d30:	3c01      	subs	r4, #1
 8007d32:	e7ea      	b.n	8007d0a <quorem+0xea>
 8007d34:	2000      	movs	r0, #0
 8007d36:	e7ee      	b.n	8007d16 <quorem+0xf6>

08007d38 <_dtoa_r>:
 8007d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	ec57 6b10 	vmov	r6, r7, d0
 8007d40:	b097      	sub	sp, #92	; 0x5c
 8007d42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d44:	9106      	str	r1, [sp, #24]
 8007d46:	4604      	mov	r4, r0
 8007d48:	920b      	str	r2, [sp, #44]	; 0x2c
 8007d4a:	9312      	str	r3, [sp, #72]	; 0x48
 8007d4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d50:	e9cd 6700 	strd	r6, r7, [sp]
 8007d54:	b93d      	cbnz	r5, 8007d66 <_dtoa_r+0x2e>
 8007d56:	2010      	movs	r0, #16
 8007d58:	f000 fef2 	bl	8008b40 <malloc>
 8007d5c:	6260      	str	r0, [r4, #36]	; 0x24
 8007d5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d62:	6005      	str	r5, [r0, #0]
 8007d64:	60c5      	str	r5, [r0, #12]
 8007d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d68:	6819      	ldr	r1, [r3, #0]
 8007d6a:	b151      	cbz	r1, 8007d82 <_dtoa_r+0x4a>
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	604a      	str	r2, [r1, #4]
 8007d70:	2301      	movs	r3, #1
 8007d72:	4093      	lsls	r3, r2
 8007d74:	608b      	str	r3, [r1, #8]
 8007d76:	4620      	mov	r0, r4
 8007d78:	f000 ff29 	bl	8008bce <_Bfree>
 8007d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d7e:	2200      	movs	r2, #0
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	1e3b      	subs	r3, r7, #0
 8007d84:	bfbb      	ittet	lt
 8007d86:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d8a:	9301      	strlt	r3, [sp, #4]
 8007d8c:	2300      	movge	r3, #0
 8007d8e:	2201      	movlt	r2, #1
 8007d90:	bfac      	ite	ge
 8007d92:	f8c8 3000 	strge.w	r3, [r8]
 8007d96:	f8c8 2000 	strlt.w	r2, [r8]
 8007d9a:	4baf      	ldr	r3, [pc, #700]	; (8008058 <_dtoa_r+0x320>)
 8007d9c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007da0:	ea33 0308 	bics.w	r3, r3, r8
 8007da4:	d114      	bne.n	8007dd0 <_dtoa_r+0x98>
 8007da6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007da8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007dac:	6013      	str	r3, [r2, #0]
 8007dae:	9b00      	ldr	r3, [sp, #0]
 8007db0:	b923      	cbnz	r3, 8007dbc <_dtoa_r+0x84>
 8007db2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007db6:	2800      	cmp	r0, #0
 8007db8:	f000 8542 	beq.w	8008840 <_dtoa_r+0xb08>
 8007dbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dbe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800806c <_dtoa_r+0x334>
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	f000 8544 	beq.w	8008850 <_dtoa_r+0xb18>
 8007dc8:	f10b 0303 	add.w	r3, fp, #3
 8007dcc:	f000 bd3e 	b.w	800884c <_dtoa_r+0xb14>
 8007dd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4639      	mov	r1, r7
 8007ddc:	f7f8 fe20 	bl	8000a20 <__aeabi_dcmpeq>
 8007de0:	4681      	mov	r9, r0
 8007de2:	b168      	cbz	r0, 8007e00 <_dtoa_r+0xc8>
 8007de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007de6:	2301      	movs	r3, #1
 8007de8:	6013      	str	r3, [r2, #0]
 8007dea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f000 8524 	beq.w	800883a <_dtoa_r+0xb02>
 8007df2:	4b9a      	ldr	r3, [pc, #616]	; (800805c <_dtoa_r+0x324>)
 8007df4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007df6:	f103 3bff 	add.w	fp, r3, #4294967295
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	f000 bd28 	b.w	8008850 <_dtoa_r+0xb18>
 8007e00:	aa14      	add	r2, sp, #80	; 0x50
 8007e02:	a915      	add	r1, sp, #84	; 0x54
 8007e04:	ec47 6b10 	vmov	d0, r6, r7
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f001 f938 	bl	800907e <__d2b>
 8007e0e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007e12:	9004      	str	r0, [sp, #16]
 8007e14:	2d00      	cmp	r5, #0
 8007e16:	d07c      	beq.n	8007f12 <_dtoa_r+0x1da>
 8007e18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e1c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007e20:	46b2      	mov	sl, r6
 8007e22:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007e26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e2a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007e2e:	2200      	movs	r2, #0
 8007e30:	4b8b      	ldr	r3, [pc, #556]	; (8008060 <_dtoa_r+0x328>)
 8007e32:	4650      	mov	r0, sl
 8007e34:	4659      	mov	r1, fp
 8007e36:	f7f8 f9d3 	bl	80001e0 <__aeabi_dsub>
 8007e3a:	a381      	add	r3, pc, #516	; (adr r3, 8008040 <_dtoa_r+0x308>)
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	f7f8 fb86 	bl	8000550 <__aeabi_dmul>
 8007e44:	a380      	add	r3, pc, #512	; (adr r3, 8008048 <_dtoa_r+0x310>)
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	f7f8 f9cb 	bl	80001e4 <__adddf3>
 8007e4e:	4606      	mov	r6, r0
 8007e50:	4628      	mov	r0, r5
 8007e52:	460f      	mov	r7, r1
 8007e54:	f7f8 fb12 	bl	800047c <__aeabi_i2d>
 8007e58:	a37d      	add	r3, pc, #500	; (adr r3, 8008050 <_dtoa_r+0x318>)
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	f7f8 fb77 	bl	8000550 <__aeabi_dmul>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4630      	mov	r0, r6
 8007e68:	4639      	mov	r1, r7
 8007e6a:	f7f8 f9bb 	bl	80001e4 <__adddf3>
 8007e6e:	4606      	mov	r6, r0
 8007e70:	460f      	mov	r7, r1
 8007e72:	f7f8 fe1d 	bl	8000ab0 <__aeabi_d2iz>
 8007e76:	2200      	movs	r2, #0
 8007e78:	4682      	mov	sl, r0
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	4639      	mov	r1, r7
 8007e80:	f7f8 fdd8 	bl	8000a34 <__aeabi_dcmplt>
 8007e84:	b148      	cbz	r0, 8007e9a <_dtoa_r+0x162>
 8007e86:	4650      	mov	r0, sl
 8007e88:	f7f8 faf8 	bl	800047c <__aeabi_i2d>
 8007e8c:	4632      	mov	r2, r6
 8007e8e:	463b      	mov	r3, r7
 8007e90:	f7f8 fdc6 	bl	8000a20 <__aeabi_dcmpeq>
 8007e94:	b908      	cbnz	r0, 8007e9a <_dtoa_r+0x162>
 8007e96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e9a:	f1ba 0f16 	cmp.w	sl, #22
 8007e9e:	d859      	bhi.n	8007f54 <_dtoa_r+0x21c>
 8007ea0:	4970      	ldr	r1, [pc, #448]	; (8008064 <_dtoa_r+0x32c>)
 8007ea2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007ea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eae:	f7f8 fddf 	bl	8000a70 <__aeabi_dcmpgt>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d050      	beq.n	8007f58 <_dtoa_r+0x220>
 8007eb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007eba:	2300      	movs	r3, #0
 8007ebc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ebe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ec0:	1b5d      	subs	r5, r3, r5
 8007ec2:	f1b5 0801 	subs.w	r8, r5, #1
 8007ec6:	bf49      	itett	mi
 8007ec8:	f1c5 0301 	rsbmi	r3, r5, #1
 8007ecc:	2300      	movpl	r3, #0
 8007ece:	9305      	strmi	r3, [sp, #20]
 8007ed0:	f04f 0800 	movmi.w	r8, #0
 8007ed4:	bf58      	it	pl
 8007ed6:	9305      	strpl	r3, [sp, #20]
 8007ed8:	f1ba 0f00 	cmp.w	sl, #0
 8007edc:	db3e      	blt.n	8007f5c <_dtoa_r+0x224>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	44d0      	add	r8, sl
 8007ee2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007ee6:	9307      	str	r3, [sp, #28]
 8007ee8:	9b06      	ldr	r3, [sp, #24]
 8007eea:	2b09      	cmp	r3, #9
 8007eec:	f200 8090 	bhi.w	8008010 <_dtoa_r+0x2d8>
 8007ef0:	2b05      	cmp	r3, #5
 8007ef2:	bfc4      	itt	gt
 8007ef4:	3b04      	subgt	r3, #4
 8007ef6:	9306      	strgt	r3, [sp, #24]
 8007ef8:	9b06      	ldr	r3, [sp, #24]
 8007efa:	f1a3 0302 	sub.w	r3, r3, #2
 8007efe:	bfcc      	ite	gt
 8007f00:	2500      	movgt	r5, #0
 8007f02:	2501      	movle	r5, #1
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	f200 808f 	bhi.w	8008028 <_dtoa_r+0x2f0>
 8007f0a:	e8df f003 	tbb	[pc, r3]
 8007f0e:	7f7d      	.short	0x7f7d
 8007f10:	7131      	.short	0x7131
 8007f12:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007f16:	441d      	add	r5, r3
 8007f18:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007f1c:	2820      	cmp	r0, #32
 8007f1e:	dd13      	ble.n	8007f48 <_dtoa_r+0x210>
 8007f20:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007f24:	9b00      	ldr	r3, [sp, #0]
 8007f26:	fa08 f800 	lsl.w	r8, r8, r0
 8007f2a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007f2e:	fa23 f000 	lsr.w	r0, r3, r0
 8007f32:	ea48 0000 	orr.w	r0, r8, r0
 8007f36:	f7f8 fa91 	bl	800045c <__aeabi_ui2d>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	4682      	mov	sl, r0
 8007f3e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007f42:	3d01      	subs	r5, #1
 8007f44:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f46:	e772      	b.n	8007e2e <_dtoa_r+0xf6>
 8007f48:	9b00      	ldr	r3, [sp, #0]
 8007f4a:	f1c0 0020 	rsb	r0, r0, #32
 8007f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8007f52:	e7f0      	b.n	8007f36 <_dtoa_r+0x1fe>
 8007f54:	2301      	movs	r3, #1
 8007f56:	e7b1      	b.n	8007ebc <_dtoa_r+0x184>
 8007f58:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f5a:	e7b0      	b.n	8007ebe <_dtoa_r+0x186>
 8007f5c:	9b05      	ldr	r3, [sp, #20]
 8007f5e:	eba3 030a 	sub.w	r3, r3, sl
 8007f62:	9305      	str	r3, [sp, #20]
 8007f64:	f1ca 0300 	rsb	r3, sl, #0
 8007f68:	9307      	str	r3, [sp, #28]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	930e      	str	r3, [sp, #56]	; 0x38
 8007f6e:	e7bb      	b.n	8007ee8 <_dtoa_r+0x1b0>
 8007f70:	2301      	movs	r3, #1
 8007f72:	930a      	str	r3, [sp, #40]	; 0x28
 8007f74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	dd59      	ble.n	800802e <_dtoa_r+0x2f6>
 8007f7a:	9302      	str	r3, [sp, #8]
 8007f7c:	4699      	mov	r9, r3
 8007f7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f80:	2200      	movs	r2, #0
 8007f82:	6072      	str	r2, [r6, #4]
 8007f84:	2204      	movs	r2, #4
 8007f86:	f102 0014 	add.w	r0, r2, #20
 8007f8a:	4298      	cmp	r0, r3
 8007f8c:	6871      	ldr	r1, [r6, #4]
 8007f8e:	d953      	bls.n	8008038 <_dtoa_r+0x300>
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 fde8 	bl	8008b66 <_Balloc>
 8007f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f98:	6030      	str	r0, [r6, #0]
 8007f9a:	f1b9 0f0e 	cmp.w	r9, #14
 8007f9e:	f8d3 b000 	ldr.w	fp, [r3]
 8007fa2:	f200 80e6 	bhi.w	8008172 <_dtoa_r+0x43a>
 8007fa6:	2d00      	cmp	r5, #0
 8007fa8:	f000 80e3 	beq.w	8008172 <_dtoa_r+0x43a>
 8007fac:	ed9d 7b00 	vldr	d7, [sp]
 8007fb0:	f1ba 0f00 	cmp.w	sl, #0
 8007fb4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007fb8:	dd74      	ble.n	80080a4 <_dtoa_r+0x36c>
 8007fba:	4a2a      	ldr	r2, [pc, #168]	; (8008064 <_dtoa_r+0x32c>)
 8007fbc:	f00a 030f 	and.w	r3, sl, #15
 8007fc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007fc4:	ed93 7b00 	vldr	d7, [r3]
 8007fc8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007fcc:	06f0      	lsls	r0, r6, #27
 8007fce:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007fd2:	d565      	bpl.n	80080a0 <_dtoa_r+0x368>
 8007fd4:	4b24      	ldr	r3, [pc, #144]	; (8008068 <_dtoa_r+0x330>)
 8007fd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007fda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fde:	f7f8 fbe1 	bl	80007a4 <__aeabi_ddiv>
 8007fe2:	e9cd 0100 	strd	r0, r1, [sp]
 8007fe6:	f006 060f 	and.w	r6, r6, #15
 8007fea:	2503      	movs	r5, #3
 8007fec:	4f1e      	ldr	r7, [pc, #120]	; (8008068 <_dtoa_r+0x330>)
 8007fee:	e04c      	b.n	800808a <_dtoa_r+0x352>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ff4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ff6:	4453      	add	r3, sl
 8007ff8:	f103 0901 	add.w	r9, r3, #1
 8007ffc:	9302      	str	r3, [sp, #8]
 8007ffe:	464b      	mov	r3, r9
 8008000:	2b01      	cmp	r3, #1
 8008002:	bfb8      	it	lt
 8008004:	2301      	movlt	r3, #1
 8008006:	e7ba      	b.n	8007f7e <_dtoa_r+0x246>
 8008008:	2300      	movs	r3, #0
 800800a:	e7b2      	b.n	8007f72 <_dtoa_r+0x23a>
 800800c:	2300      	movs	r3, #0
 800800e:	e7f0      	b.n	8007ff2 <_dtoa_r+0x2ba>
 8008010:	2501      	movs	r5, #1
 8008012:	2300      	movs	r3, #0
 8008014:	9306      	str	r3, [sp, #24]
 8008016:	950a      	str	r5, [sp, #40]	; 0x28
 8008018:	f04f 33ff 	mov.w	r3, #4294967295
 800801c:	9302      	str	r3, [sp, #8]
 800801e:	4699      	mov	r9, r3
 8008020:	2200      	movs	r2, #0
 8008022:	2312      	movs	r3, #18
 8008024:	920b      	str	r2, [sp, #44]	; 0x2c
 8008026:	e7aa      	b.n	8007f7e <_dtoa_r+0x246>
 8008028:	2301      	movs	r3, #1
 800802a:	930a      	str	r3, [sp, #40]	; 0x28
 800802c:	e7f4      	b.n	8008018 <_dtoa_r+0x2e0>
 800802e:	2301      	movs	r3, #1
 8008030:	9302      	str	r3, [sp, #8]
 8008032:	4699      	mov	r9, r3
 8008034:	461a      	mov	r2, r3
 8008036:	e7f5      	b.n	8008024 <_dtoa_r+0x2ec>
 8008038:	3101      	adds	r1, #1
 800803a:	6071      	str	r1, [r6, #4]
 800803c:	0052      	lsls	r2, r2, #1
 800803e:	e7a2      	b.n	8007f86 <_dtoa_r+0x24e>
 8008040:	636f4361 	.word	0x636f4361
 8008044:	3fd287a7 	.word	0x3fd287a7
 8008048:	8b60c8b3 	.word	0x8b60c8b3
 800804c:	3fc68a28 	.word	0x3fc68a28
 8008050:	509f79fb 	.word	0x509f79fb
 8008054:	3fd34413 	.word	0x3fd34413
 8008058:	7ff00000 	.word	0x7ff00000
 800805c:	0800a785 	.word	0x0800a785
 8008060:	3ff80000 	.word	0x3ff80000
 8008064:	0800a7e0 	.word	0x0800a7e0
 8008068:	0800a7b8 	.word	0x0800a7b8
 800806c:	0800a7b4 	.word	0x0800a7b4
 8008070:	07f1      	lsls	r1, r6, #31
 8008072:	d508      	bpl.n	8008086 <_dtoa_r+0x34e>
 8008074:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800807c:	f7f8 fa68 	bl	8000550 <__aeabi_dmul>
 8008080:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008084:	3501      	adds	r5, #1
 8008086:	1076      	asrs	r6, r6, #1
 8008088:	3708      	adds	r7, #8
 800808a:	2e00      	cmp	r6, #0
 800808c:	d1f0      	bne.n	8008070 <_dtoa_r+0x338>
 800808e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008092:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008096:	f7f8 fb85 	bl	80007a4 <__aeabi_ddiv>
 800809a:	e9cd 0100 	strd	r0, r1, [sp]
 800809e:	e01a      	b.n	80080d6 <_dtoa_r+0x39e>
 80080a0:	2502      	movs	r5, #2
 80080a2:	e7a3      	b.n	8007fec <_dtoa_r+0x2b4>
 80080a4:	f000 80a0 	beq.w	80081e8 <_dtoa_r+0x4b0>
 80080a8:	f1ca 0600 	rsb	r6, sl, #0
 80080ac:	4b9f      	ldr	r3, [pc, #636]	; (800832c <_dtoa_r+0x5f4>)
 80080ae:	4fa0      	ldr	r7, [pc, #640]	; (8008330 <_dtoa_r+0x5f8>)
 80080b0:	f006 020f 	and.w	r2, r6, #15
 80080b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080c0:	f7f8 fa46 	bl	8000550 <__aeabi_dmul>
 80080c4:	e9cd 0100 	strd	r0, r1, [sp]
 80080c8:	1136      	asrs	r6, r6, #4
 80080ca:	2300      	movs	r3, #0
 80080cc:	2502      	movs	r5, #2
 80080ce:	2e00      	cmp	r6, #0
 80080d0:	d17f      	bne.n	80081d2 <_dtoa_r+0x49a>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1e1      	bne.n	800809a <_dtoa_r+0x362>
 80080d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 8087 	beq.w	80081ec <_dtoa_r+0x4b4>
 80080de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80080e2:	2200      	movs	r2, #0
 80080e4:	4b93      	ldr	r3, [pc, #588]	; (8008334 <_dtoa_r+0x5fc>)
 80080e6:	4630      	mov	r0, r6
 80080e8:	4639      	mov	r1, r7
 80080ea:	f7f8 fca3 	bl	8000a34 <__aeabi_dcmplt>
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d07c      	beq.n	80081ec <_dtoa_r+0x4b4>
 80080f2:	f1b9 0f00 	cmp.w	r9, #0
 80080f6:	d079      	beq.n	80081ec <_dtoa_r+0x4b4>
 80080f8:	9b02      	ldr	r3, [sp, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	dd35      	ble.n	800816a <_dtoa_r+0x432>
 80080fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008102:	9308      	str	r3, [sp, #32]
 8008104:	4639      	mov	r1, r7
 8008106:	2200      	movs	r2, #0
 8008108:	4b8b      	ldr	r3, [pc, #556]	; (8008338 <_dtoa_r+0x600>)
 800810a:	4630      	mov	r0, r6
 800810c:	f7f8 fa20 	bl	8000550 <__aeabi_dmul>
 8008110:	e9cd 0100 	strd	r0, r1, [sp]
 8008114:	9f02      	ldr	r7, [sp, #8]
 8008116:	3501      	adds	r5, #1
 8008118:	4628      	mov	r0, r5
 800811a:	f7f8 f9af 	bl	800047c <__aeabi_i2d>
 800811e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008122:	f7f8 fa15 	bl	8000550 <__aeabi_dmul>
 8008126:	2200      	movs	r2, #0
 8008128:	4b84      	ldr	r3, [pc, #528]	; (800833c <_dtoa_r+0x604>)
 800812a:	f7f8 f85b 	bl	80001e4 <__adddf3>
 800812e:	4605      	mov	r5, r0
 8008130:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008134:	2f00      	cmp	r7, #0
 8008136:	d15d      	bne.n	80081f4 <_dtoa_r+0x4bc>
 8008138:	2200      	movs	r2, #0
 800813a:	4b81      	ldr	r3, [pc, #516]	; (8008340 <_dtoa_r+0x608>)
 800813c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008140:	f7f8 f84e 	bl	80001e0 <__aeabi_dsub>
 8008144:	462a      	mov	r2, r5
 8008146:	4633      	mov	r3, r6
 8008148:	e9cd 0100 	strd	r0, r1, [sp]
 800814c:	f7f8 fc90 	bl	8000a70 <__aeabi_dcmpgt>
 8008150:	2800      	cmp	r0, #0
 8008152:	f040 8288 	bne.w	8008666 <_dtoa_r+0x92e>
 8008156:	462a      	mov	r2, r5
 8008158:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800815c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008160:	f7f8 fc68 	bl	8000a34 <__aeabi_dcmplt>
 8008164:	2800      	cmp	r0, #0
 8008166:	f040 827c 	bne.w	8008662 <_dtoa_r+0x92a>
 800816a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800816e:	e9cd 2300 	strd	r2, r3, [sp]
 8008172:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008174:	2b00      	cmp	r3, #0
 8008176:	f2c0 8150 	blt.w	800841a <_dtoa_r+0x6e2>
 800817a:	f1ba 0f0e 	cmp.w	sl, #14
 800817e:	f300 814c 	bgt.w	800841a <_dtoa_r+0x6e2>
 8008182:	4b6a      	ldr	r3, [pc, #424]	; (800832c <_dtoa_r+0x5f4>)
 8008184:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008188:	ed93 7b00 	vldr	d7, [r3]
 800818c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800818e:	2b00      	cmp	r3, #0
 8008190:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008194:	f280 80d8 	bge.w	8008348 <_dtoa_r+0x610>
 8008198:	f1b9 0f00 	cmp.w	r9, #0
 800819c:	f300 80d4 	bgt.w	8008348 <_dtoa_r+0x610>
 80081a0:	f040 825e 	bne.w	8008660 <_dtoa_r+0x928>
 80081a4:	2200      	movs	r2, #0
 80081a6:	4b66      	ldr	r3, [pc, #408]	; (8008340 <_dtoa_r+0x608>)
 80081a8:	ec51 0b17 	vmov	r0, r1, d7
 80081ac:	f7f8 f9d0 	bl	8000550 <__aeabi_dmul>
 80081b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081b4:	f7f8 fc52 	bl	8000a5c <__aeabi_dcmpge>
 80081b8:	464f      	mov	r7, r9
 80081ba:	464e      	mov	r6, r9
 80081bc:	2800      	cmp	r0, #0
 80081be:	f040 8234 	bne.w	800862a <_dtoa_r+0x8f2>
 80081c2:	2331      	movs	r3, #49	; 0x31
 80081c4:	f10b 0501 	add.w	r5, fp, #1
 80081c8:	f88b 3000 	strb.w	r3, [fp]
 80081cc:	f10a 0a01 	add.w	sl, sl, #1
 80081d0:	e22f      	b.n	8008632 <_dtoa_r+0x8fa>
 80081d2:	07f2      	lsls	r2, r6, #31
 80081d4:	d505      	bpl.n	80081e2 <_dtoa_r+0x4aa>
 80081d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081da:	f7f8 f9b9 	bl	8000550 <__aeabi_dmul>
 80081de:	3501      	adds	r5, #1
 80081e0:	2301      	movs	r3, #1
 80081e2:	1076      	asrs	r6, r6, #1
 80081e4:	3708      	adds	r7, #8
 80081e6:	e772      	b.n	80080ce <_dtoa_r+0x396>
 80081e8:	2502      	movs	r5, #2
 80081ea:	e774      	b.n	80080d6 <_dtoa_r+0x39e>
 80081ec:	f8cd a020 	str.w	sl, [sp, #32]
 80081f0:	464f      	mov	r7, r9
 80081f2:	e791      	b.n	8008118 <_dtoa_r+0x3e0>
 80081f4:	4b4d      	ldr	r3, [pc, #308]	; (800832c <_dtoa_r+0x5f4>)
 80081f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80081fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008200:	2b00      	cmp	r3, #0
 8008202:	d047      	beq.n	8008294 <_dtoa_r+0x55c>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	2000      	movs	r0, #0
 800820a:	494e      	ldr	r1, [pc, #312]	; (8008344 <_dtoa_r+0x60c>)
 800820c:	f7f8 faca 	bl	80007a4 <__aeabi_ddiv>
 8008210:	462a      	mov	r2, r5
 8008212:	4633      	mov	r3, r6
 8008214:	f7f7 ffe4 	bl	80001e0 <__aeabi_dsub>
 8008218:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800821c:	465d      	mov	r5, fp
 800821e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008222:	f7f8 fc45 	bl	8000ab0 <__aeabi_d2iz>
 8008226:	4606      	mov	r6, r0
 8008228:	f7f8 f928 	bl	800047c <__aeabi_i2d>
 800822c:	4602      	mov	r2, r0
 800822e:	460b      	mov	r3, r1
 8008230:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008234:	f7f7 ffd4 	bl	80001e0 <__aeabi_dsub>
 8008238:	3630      	adds	r6, #48	; 0x30
 800823a:	f805 6b01 	strb.w	r6, [r5], #1
 800823e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008242:	e9cd 0100 	strd	r0, r1, [sp]
 8008246:	f7f8 fbf5 	bl	8000a34 <__aeabi_dcmplt>
 800824a:	2800      	cmp	r0, #0
 800824c:	d163      	bne.n	8008316 <_dtoa_r+0x5de>
 800824e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008252:	2000      	movs	r0, #0
 8008254:	4937      	ldr	r1, [pc, #220]	; (8008334 <_dtoa_r+0x5fc>)
 8008256:	f7f7 ffc3 	bl	80001e0 <__aeabi_dsub>
 800825a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800825e:	f7f8 fbe9 	bl	8000a34 <__aeabi_dcmplt>
 8008262:	2800      	cmp	r0, #0
 8008264:	f040 80b7 	bne.w	80083d6 <_dtoa_r+0x69e>
 8008268:	eba5 030b 	sub.w	r3, r5, fp
 800826c:	429f      	cmp	r7, r3
 800826e:	f77f af7c 	ble.w	800816a <_dtoa_r+0x432>
 8008272:	2200      	movs	r2, #0
 8008274:	4b30      	ldr	r3, [pc, #192]	; (8008338 <_dtoa_r+0x600>)
 8008276:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800827a:	f7f8 f969 	bl	8000550 <__aeabi_dmul>
 800827e:	2200      	movs	r2, #0
 8008280:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008284:	4b2c      	ldr	r3, [pc, #176]	; (8008338 <_dtoa_r+0x600>)
 8008286:	e9dd 0100 	ldrd	r0, r1, [sp]
 800828a:	f7f8 f961 	bl	8000550 <__aeabi_dmul>
 800828e:	e9cd 0100 	strd	r0, r1, [sp]
 8008292:	e7c4      	b.n	800821e <_dtoa_r+0x4e6>
 8008294:	462a      	mov	r2, r5
 8008296:	4633      	mov	r3, r6
 8008298:	f7f8 f95a 	bl	8000550 <__aeabi_dmul>
 800829c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80082a0:	eb0b 0507 	add.w	r5, fp, r7
 80082a4:	465e      	mov	r6, fp
 80082a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082aa:	f7f8 fc01 	bl	8000ab0 <__aeabi_d2iz>
 80082ae:	4607      	mov	r7, r0
 80082b0:	f7f8 f8e4 	bl	800047c <__aeabi_i2d>
 80082b4:	3730      	adds	r7, #48	; 0x30
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082be:	f7f7 ff8f 	bl	80001e0 <__aeabi_dsub>
 80082c2:	f806 7b01 	strb.w	r7, [r6], #1
 80082c6:	42ae      	cmp	r6, r5
 80082c8:	e9cd 0100 	strd	r0, r1, [sp]
 80082cc:	f04f 0200 	mov.w	r2, #0
 80082d0:	d126      	bne.n	8008320 <_dtoa_r+0x5e8>
 80082d2:	4b1c      	ldr	r3, [pc, #112]	; (8008344 <_dtoa_r+0x60c>)
 80082d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082d8:	f7f7 ff84 	bl	80001e4 <__adddf3>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082e4:	f7f8 fbc4 	bl	8000a70 <__aeabi_dcmpgt>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d174      	bne.n	80083d6 <_dtoa_r+0x69e>
 80082ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082f0:	2000      	movs	r0, #0
 80082f2:	4914      	ldr	r1, [pc, #80]	; (8008344 <_dtoa_r+0x60c>)
 80082f4:	f7f7 ff74 	bl	80001e0 <__aeabi_dsub>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008300:	f7f8 fb98 	bl	8000a34 <__aeabi_dcmplt>
 8008304:	2800      	cmp	r0, #0
 8008306:	f43f af30 	beq.w	800816a <_dtoa_r+0x432>
 800830a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800830e:	2b30      	cmp	r3, #48	; 0x30
 8008310:	f105 32ff 	add.w	r2, r5, #4294967295
 8008314:	d002      	beq.n	800831c <_dtoa_r+0x5e4>
 8008316:	f8dd a020 	ldr.w	sl, [sp, #32]
 800831a:	e04a      	b.n	80083b2 <_dtoa_r+0x67a>
 800831c:	4615      	mov	r5, r2
 800831e:	e7f4      	b.n	800830a <_dtoa_r+0x5d2>
 8008320:	4b05      	ldr	r3, [pc, #20]	; (8008338 <_dtoa_r+0x600>)
 8008322:	f7f8 f915 	bl	8000550 <__aeabi_dmul>
 8008326:	e9cd 0100 	strd	r0, r1, [sp]
 800832a:	e7bc      	b.n	80082a6 <_dtoa_r+0x56e>
 800832c:	0800a7e0 	.word	0x0800a7e0
 8008330:	0800a7b8 	.word	0x0800a7b8
 8008334:	3ff00000 	.word	0x3ff00000
 8008338:	40240000 	.word	0x40240000
 800833c:	401c0000 	.word	0x401c0000
 8008340:	40140000 	.word	0x40140000
 8008344:	3fe00000 	.word	0x3fe00000
 8008348:	e9dd 6700 	ldrd	r6, r7, [sp]
 800834c:	465d      	mov	r5, fp
 800834e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008352:	4630      	mov	r0, r6
 8008354:	4639      	mov	r1, r7
 8008356:	f7f8 fa25 	bl	80007a4 <__aeabi_ddiv>
 800835a:	f7f8 fba9 	bl	8000ab0 <__aeabi_d2iz>
 800835e:	4680      	mov	r8, r0
 8008360:	f7f8 f88c 	bl	800047c <__aeabi_i2d>
 8008364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008368:	f7f8 f8f2 	bl	8000550 <__aeabi_dmul>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4630      	mov	r0, r6
 8008372:	4639      	mov	r1, r7
 8008374:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008378:	f7f7 ff32 	bl	80001e0 <__aeabi_dsub>
 800837c:	f805 6b01 	strb.w	r6, [r5], #1
 8008380:	eba5 060b 	sub.w	r6, r5, fp
 8008384:	45b1      	cmp	r9, r6
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	d139      	bne.n	8008400 <_dtoa_r+0x6c8>
 800838c:	f7f7 ff2a 	bl	80001e4 <__adddf3>
 8008390:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008394:	4606      	mov	r6, r0
 8008396:	460f      	mov	r7, r1
 8008398:	f7f8 fb6a 	bl	8000a70 <__aeabi_dcmpgt>
 800839c:	b9c8      	cbnz	r0, 80083d2 <_dtoa_r+0x69a>
 800839e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083a2:	4630      	mov	r0, r6
 80083a4:	4639      	mov	r1, r7
 80083a6:	f7f8 fb3b 	bl	8000a20 <__aeabi_dcmpeq>
 80083aa:	b110      	cbz	r0, 80083b2 <_dtoa_r+0x67a>
 80083ac:	f018 0f01 	tst.w	r8, #1
 80083b0:	d10f      	bne.n	80083d2 <_dtoa_r+0x69a>
 80083b2:	9904      	ldr	r1, [sp, #16]
 80083b4:	4620      	mov	r0, r4
 80083b6:	f000 fc0a 	bl	8008bce <_Bfree>
 80083ba:	2300      	movs	r3, #0
 80083bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083be:	702b      	strb	r3, [r5, #0]
 80083c0:	f10a 0301 	add.w	r3, sl, #1
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f000 8241 	beq.w	8008850 <_dtoa_r+0xb18>
 80083ce:	601d      	str	r5, [r3, #0]
 80083d0:	e23e      	b.n	8008850 <_dtoa_r+0xb18>
 80083d2:	f8cd a020 	str.w	sl, [sp, #32]
 80083d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80083da:	2a39      	cmp	r2, #57	; 0x39
 80083dc:	f105 33ff 	add.w	r3, r5, #4294967295
 80083e0:	d108      	bne.n	80083f4 <_dtoa_r+0x6bc>
 80083e2:	459b      	cmp	fp, r3
 80083e4:	d10a      	bne.n	80083fc <_dtoa_r+0x6c4>
 80083e6:	9b08      	ldr	r3, [sp, #32]
 80083e8:	3301      	adds	r3, #1
 80083ea:	9308      	str	r3, [sp, #32]
 80083ec:	2330      	movs	r3, #48	; 0x30
 80083ee:	f88b 3000 	strb.w	r3, [fp]
 80083f2:	465b      	mov	r3, fp
 80083f4:	781a      	ldrb	r2, [r3, #0]
 80083f6:	3201      	adds	r2, #1
 80083f8:	701a      	strb	r2, [r3, #0]
 80083fa:	e78c      	b.n	8008316 <_dtoa_r+0x5de>
 80083fc:	461d      	mov	r5, r3
 80083fe:	e7ea      	b.n	80083d6 <_dtoa_r+0x69e>
 8008400:	2200      	movs	r2, #0
 8008402:	4b9b      	ldr	r3, [pc, #620]	; (8008670 <_dtoa_r+0x938>)
 8008404:	f7f8 f8a4 	bl	8000550 <__aeabi_dmul>
 8008408:	2200      	movs	r2, #0
 800840a:	2300      	movs	r3, #0
 800840c:	4606      	mov	r6, r0
 800840e:	460f      	mov	r7, r1
 8008410:	f7f8 fb06 	bl	8000a20 <__aeabi_dcmpeq>
 8008414:	2800      	cmp	r0, #0
 8008416:	d09a      	beq.n	800834e <_dtoa_r+0x616>
 8008418:	e7cb      	b.n	80083b2 <_dtoa_r+0x67a>
 800841a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800841c:	2a00      	cmp	r2, #0
 800841e:	f000 808b 	beq.w	8008538 <_dtoa_r+0x800>
 8008422:	9a06      	ldr	r2, [sp, #24]
 8008424:	2a01      	cmp	r2, #1
 8008426:	dc6e      	bgt.n	8008506 <_dtoa_r+0x7ce>
 8008428:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800842a:	2a00      	cmp	r2, #0
 800842c:	d067      	beq.n	80084fe <_dtoa_r+0x7c6>
 800842e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008432:	9f07      	ldr	r7, [sp, #28]
 8008434:	9d05      	ldr	r5, [sp, #20]
 8008436:	9a05      	ldr	r2, [sp, #20]
 8008438:	2101      	movs	r1, #1
 800843a:	441a      	add	r2, r3
 800843c:	4620      	mov	r0, r4
 800843e:	9205      	str	r2, [sp, #20]
 8008440:	4498      	add	r8, r3
 8008442:	f000 fc64 	bl	8008d0e <__i2b>
 8008446:	4606      	mov	r6, r0
 8008448:	2d00      	cmp	r5, #0
 800844a:	dd0c      	ble.n	8008466 <_dtoa_r+0x72e>
 800844c:	f1b8 0f00 	cmp.w	r8, #0
 8008450:	dd09      	ble.n	8008466 <_dtoa_r+0x72e>
 8008452:	4545      	cmp	r5, r8
 8008454:	9a05      	ldr	r2, [sp, #20]
 8008456:	462b      	mov	r3, r5
 8008458:	bfa8      	it	ge
 800845a:	4643      	movge	r3, r8
 800845c:	1ad2      	subs	r2, r2, r3
 800845e:	9205      	str	r2, [sp, #20]
 8008460:	1aed      	subs	r5, r5, r3
 8008462:	eba8 0803 	sub.w	r8, r8, r3
 8008466:	9b07      	ldr	r3, [sp, #28]
 8008468:	b1eb      	cbz	r3, 80084a6 <_dtoa_r+0x76e>
 800846a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800846c:	2b00      	cmp	r3, #0
 800846e:	d067      	beq.n	8008540 <_dtoa_r+0x808>
 8008470:	b18f      	cbz	r7, 8008496 <_dtoa_r+0x75e>
 8008472:	4631      	mov	r1, r6
 8008474:	463a      	mov	r2, r7
 8008476:	4620      	mov	r0, r4
 8008478:	f000 fce8 	bl	8008e4c <__pow5mult>
 800847c:	9a04      	ldr	r2, [sp, #16]
 800847e:	4601      	mov	r1, r0
 8008480:	4606      	mov	r6, r0
 8008482:	4620      	mov	r0, r4
 8008484:	f000 fc4c 	bl	8008d20 <__multiply>
 8008488:	9904      	ldr	r1, [sp, #16]
 800848a:	9008      	str	r0, [sp, #32]
 800848c:	4620      	mov	r0, r4
 800848e:	f000 fb9e 	bl	8008bce <_Bfree>
 8008492:	9b08      	ldr	r3, [sp, #32]
 8008494:	9304      	str	r3, [sp, #16]
 8008496:	9b07      	ldr	r3, [sp, #28]
 8008498:	1bda      	subs	r2, r3, r7
 800849a:	d004      	beq.n	80084a6 <_dtoa_r+0x76e>
 800849c:	9904      	ldr	r1, [sp, #16]
 800849e:	4620      	mov	r0, r4
 80084a0:	f000 fcd4 	bl	8008e4c <__pow5mult>
 80084a4:	9004      	str	r0, [sp, #16]
 80084a6:	2101      	movs	r1, #1
 80084a8:	4620      	mov	r0, r4
 80084aa:	f000 fc30 	bl	8008d0e <__i2b>
 80084ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084b0:	4607      	mov	r7, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 81d0 	beq.w	8008858 <_dtoa_r+0xb20>
 80084b8:	461a      	mov	r2, r3
 80084ba:	4601      	mov	r1, r0
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 fcc5 	bl	8008e4c <__pow5mult>
 80084c2:	9b06      	ldr	r3, [sp, #24]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	4607      	mov	r7, r0
 80084c8:	dc40      	bgt.n	800854c <_dtoa_r+0x814>
 80084ca:	9b00      	ldr	r3, [sp, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d139      	bne.n	8008544 <_dtoa_r+0x80c>
 80084d0:	9b01      	ldr	r3, [sp, #4]
 80084d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d136      	bne.n	8008548 <_dtoa_r+0x810>
 80084da:	9b01      	ldr	r3, [sp, #4]
 80084dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084e0:	0d1b      	lsrs	r3, r3, #20
 80084e2:	051b      	lsls	r3, r3, #20
 80084e4:	b12b      	cbz	r3, 80084f2 <_dtoa_r+0x7ba>
 80084e6:	9b05      	ldr	r3, [sp, #20]
 80084e8:	3301      	adds	r3, #1
 80084ea:	9305      	str	r3, [sp, #20]
 80084ec:	f108 0801 	add.w	r8, r8, #1
 80084f0:	2301      	movs	r3, #1
 80084f2:	9307      	str	r3, [sp, #28]
 80084f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d12a      	bne.n	8008550 <_dtoa_r+0x818>
 80084fa:	2001      	movs	r0, #1
 80084fc:	e030      	b.n	8008560 <_dtoa_r+0x828>
 80084fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008500:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008504:	e795      	b.n	8008432 <_dtoa_r+0x6fa>
 8008506:	9b07      	ldr	r3, [sp, #28]
 8008508:	f109 37ff 	add.w	r7, r9, #4294967295
 800850c:	42bb      	cmp	r3, r7
 800850e:	bfbf      	itttt	lt
 8008510:	9b07      	ldrlt	r3, [sp, #28]
 8008512:	9707      	strlt	r7, [sp, #28]
 8008514:	1afa      	sublt	r2, r7, r3
 8008516:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008518:	bfbb      	ittet	lt
 800851a:	189b      	addlt	r3, r3, r2
 800851c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800851e:	1bdf      	subge	r7, r3, r7
 8008520:	2700      	movlt	r7, #0
 8008522:	f1b9 0f00 	cmp.w	r9, #0
 8008526:	bfb5      	itete	lt
 8008528:	9b05      	ldrlt	r3, [sp, #20]
 800852a:	9d05      	ldrge	r5, [sp, #20]
 800852c:	eba3 0509 	sublt.w	r5, r3, r9
 8008530:	464b      	movge	r3, r9
 8008532:	bfb8      	it	lt
 8008534:	2300      	movlt	r3, #0
 8008536:	e77e      	b.n	8008436 <_dtoa_r+0x6fe>
 8008538:	9f07      	ldr	r7, [sp, #28]
 800853a:	9d05      	ldr	r5, [sp, #20]
 800853c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800853e:	e783      	b.n	8008448 <_dtoa_r+0x710>
 8008540:	9a07      	ldr	r2, [sp, #28]
 8008542:	e7ab      	b.n	800849c <_dtoa_r+0x764>
 8008544:	2300      	movs	r3, #0
 8008546:	e7d4      	b.n	80084f2 <_dtoa_r+0x7ba>
 8008548:	9b00      	ldr	r3, [sp, #0]
 800854a:	e7d2      	b.n	80084f2 <_dtoa_r+0x7ba>
 800854c:	2300      	movs	r3, #0
 800854e:	9307      	str	r3, [sp, #28]
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008556:	6918      	ldr	r0, [r3, #16]
 8008558:	f000 fb8b 	bl	8008c72 <__hi0bits>
 800855c:	f1c0 0020 	rsb	r0, r0, #32
 8008560:	4440      	add	r0, r8
 8008562:	f010 001f 	ands.w	r0, r0, #31
 8008566:	d047      	beq.n	80085f8 <_dtoa_r+0x8c0>
 8008568:	f1c0 0320 	rsb	r3, r0, #32
 800856c:	2b04      	cmp	r3, #4
 800856e:	dd3b      	ble.n	80085e8 <_dtoa_r+0x8b0>
 8008570:	9b05      	ldr	r3, [sp, #20]
 8008572:	f1c0 001c 	rsb	r0, r0, #28
 8008576:	4403      	add	r3, r0
 8008578:	9305      	str	r3, [sp, #20]
 800857a:	4405      	add	r5, r0
 800857c:	4480      	add	r8, r0
 800857e:	9b05      	ldr	r3, [sp, #20]
 8008580:	2b00      	cmp	r3, #0
 8008582:	dd05      	ble.n	8008590 <_dtoa_r+0x858>
 8008584:	461a      	mov	r2, r3
 8008586:	9904      	ldr	r1, [sp, #16]
 8008588:	4620      	mov	r0, r4
 800858a:	f000 fcad 	bl	8008ee8 <__lshift>
 800858e:	9004      	str	r0, [sp, #16]
 8008590:	f1b8 0f00 	cmp.w	r8, #0
 8008594:	dd05      	ble.n	80085a2 <_dtoa_r+0x86a>
 8008596:	4639      	mov	r1, r7
 8008598:	4642      	mov	r2, r8
 800859a:	4620      	mov	r0, r4
 800859c:	f000 fca4 	bl	8008ee8 <__lshift>
 80085a0:	4607      	mov	r7, r0
 80085a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085a4:	b353      	cbz	r3, 80085fc <_dtoa_r+0x8c4>
 80085a6:	4639      	mov	r1, r7
 80085a8:	9804      	ldr	r0, [sp, #16]
 80085aa:	f000 fcf1 	bl	8008f90 <__mcmp>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	da24      	bge.n	80085fc <_dtoa_r+0x8c4>
 80085b2:	2300      	movs	r3, #0
 80085b4:	220a      	movs	r2, #10
 80085b6:	9904      	ldr	r1, [sp, #16]
 80085b8:	4620      	mov	r0, r4
 80085ba:	f000 fb1f 	bl	8008bfc <__multadd>
 80085be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c0:	9004      	str	r0, [sp, #16]
 80085c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 814d 	beq.w	8008866 <_dtoa_r+0xb2e>
 80085cc:	2300      	movs	r3, #0
 80085ce:	4631      	mov	r1, r6
 80085d0:	220a      	movs	r2, #10
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 fb12 	bl	8008bfc <__multadd>
 80085d8:	9b02      	ldr	r3, [sp, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	4606      	mov	r6, r0
 80085de:	dc4f      	bgt.n	8008680 <_dtoa_r+0x948>
 80085e0:	9b06      	ldr	r3, [sp, #24]
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	dd4c      	ble.n	8008680 <_dtoa_r+0x948>
 80085e6:	e011      	b.n	800860c <_dtoa_r+0x8d4>
 80085e8:	d0c9      	beq.n	800857e <_dtoa_r+0x846>
 80085ea:	9a05      	ldr	r2, [sp, #20]
 80085ec:	331c      	adds	r3, #28
 80085ee:	441a      	add	r2, r3
 80085f0:	9205      	str	r2, [sp, #20]
 80085f2:	441d      	add	r5, r3
 80085f4:	4498      	add	r8, r3
 80085f6:	e7c2      	b.n	800857e <_dtoa_r+0x846>
 80085f8:	4603      	mov	r3, r0
 80085fa:	e7f6      	b.n	80085ea <_dtoa_r+0x8b2>
 80085fc:	f1b9 0f00 	cmp.w	r9, #0
 8008600:	dc38      	bgt.n	8008674 <_dtoa_r+0x93c>
 8008602:	9b06      	ldr	r3, [sp, #24]
 8008604:	2b02      	cmp	r3, #2
 8008606:	dd35      	ble.n	8008674 <_dtoa_r+0x93c>
 8008608:	f8cd 9008 	str.w	r9, [sp, #8]
 800860c:	9b02      	ldr	r3, [sp, #8]
 800860e:	b963      	cbnz	r3, 800862a <_dtoa_r+0x8f2>
 8008610:	4639      	mov	r1, r7
 8008612:	2205      	movs	r2, #5
 8008614:	4620      	mov	r0, r4
 8008616:	f000 faf1 	bl	8008bfc <__multadd>
 800861a:	4601      	mov	r1, r0
 800861c:	4607      	mov	r7, r0
 800861e:	9804      	ldr	r0, [sp, #16]
 8008620:	f000 fcb6 	bl	8008f90 <__mcmp>
 8008624:	2800      	cmp	r0, #0
 8008626:	f73f adcc 	bgt.w	80081c2 <_dtoa_r+0x48a>
 800862a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800862c:	465d      	mov	r5, fp
 800862e:	ea6f 0a03 	mvn.w	sl, r3
 8008632:	f04f 0900 	mov.w	r9, #0
 8008636:	4639      	mov	r1, r7
 8008638:	4620      	mov	r0, r4
 800863a:	f000 fac8 	bl	8008bce <_Bfree>
 800863e:	2e00      	cmp	r6, #0
 8008640:	f43f aeb7 	beq.w	80083b2 <_dtoa_r+0x67a>
 8008644:	f1b9 0f00 	cmp.w	r9, #0
 8008648:	d005      	beq.n	8008656 <_dtoa_r+0x91e>
 800864a:	45b1      	cmp	r9, r6
 800864c:	d003      	beq.n	8008656 <_dtoa_r+0x91e>
 800864e:	4649      	mov	r1, r9
 8008650:	4620      	mov	r0, r4
 8008652:	f000 fabc 	bl	8008bce <_Bfree>
 8008656:	4631      	mov	r1, r6
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fab8 	bl	8008bce <_Bfree>
 800865e:	e6a8      	b.n	80083b2 <_dtoa_r+0x67a>
 8008660:	2700      	movs	r7, #0
 8008662:	463e      	mov	r6, r7
 8008664:	e7e1      	b.n	800862a <_dtoa_r+0x8f2>
 8008666:	f8dd a020 	ldr.w	sl, [sp, #32]
 800866a:	463e      	mov	r6, r7
 800866c:	e5a9      	b.n	80081c2 <_dtoa_r+0x48a>
 800866e:	bf00      	nop
 8008670:	40240000 	.word	0x40240000
 8008674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008676:	f8cd 9008 	str.w	r9, [sp, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 80fa 	beq.w	8008874 <_dtoa_r+0xb3c>
 8008680:	2d00      	cmp	r5, #0
 8008682:	dd05      	ble.n	8008690 <_dtoa_r+0x958>
 8008684:	4631      	mov	r1, r6
 8008686:	462a      	mov	r2, r5
 8008688:	4620      	mov	r0, r4
 800868a:	f000 fc2d 	bl	8008ee8 <__lshift>
 800868e:	4606      	mov	r6, r0
 8008690:	9b07      	ldr	r3, [sp, #28]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d04c      	beq.n	8008730 <_dtoa_r+0x9f8>
 8008696:	6871      	ldr	r1, [r6, #4]
 8008698:	4620      	mov	r0, r4
 800869a:	f000 fa64 	bl	8008b66 <_Balloc>
 800869e:	6932      	ldr	r2, [r6, #16]
 80086a0:	3202      	adds	r2, #2
 80086a2:	4605      	mov	r5, r0
 80086a4:	0092      	lsls	r2, r2, #2
 80086a6:	f106 010c 	add.w	r1, r6, #12
 80086aa:	300c      	adds	r0, #12
 80086ac:	f000 fa50 	bl	8008b50 <memcpy>
 80086b0:	2201      	movs	r2, #1
 80086b2:	4629      	mov	r1, r5
 80086b4:	4620      	mov	r0, r4
 80086b6:	f000 fc17 	bl	8008ee8 <__lshift>
 80086ba:	9b00      	ldr	r3, [sp, #0]
 80086bc:	f8cd b014 	str.w	fp, [sp, #20]
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	46b1      	mov	r9, r6
 80086c6:	9307      	str	r3, [sp, #28]
 80086c8:	4606      	mov	r6, r0
 80086ca:	4639      	mov	r1, r7
 80086cc:	9804      	ldr	r0, [sp, #16]
 80086ce:	f7ff faa7 	bl	8007c20 <quorem>
 80086d2:	4649      	mov	r1, r9
 80086d4:	4605      	mov	r5, r0
 80086d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80086da:	9804      	ldr	r0, [sp, #16]
 80086dc:	f000 fc58 	bl	8008f90 <__mcmp>
 80086e0:	4632      	mov	r2, r6
 80086e2:	9000      	str	r0, [sp, #0]
 80086e4:	4639      	mov	r1, r7
 80086e6:	4620      	mov	r0, r4
 80086e8:	f000 fc6c 	bl	8008fc4 <__mdiff>
 80086ec:	68c3      	ldr	r3, [r0, #12]
 80086ee:	4602      	mov	r2, r0
 80086f0:	bb03      	cbnz	r3, 8008734 <_dtoa_r+0x9fc>
 80086f2:	4601      	mov	r1, r0
 80086f4:	9008      	str	r0, [sp, #32]
 80086f6:	9804      	ldr	r0, [sp, #16]
 80086f8:	f000 fc4a 	bl	8008f90 <__mcmp>
 80086fc:	9a08      	ldr	r2, [sp, #32]
 80086fe:	4603      	mov	r3, r0
 8008700:	4611      	mov	r1, r2
 8008702:	4620      	mov	r0, r4
 8008704:	9308      	str	r3, [sp, #32]
 8008706:	f000 fa62 	bl	8008bce <_Bfree>
 800870a:	9b08      	ldr	r3, [sp, #32]
 800870c:	b9a3      	cbnz	r3, 8008738 <_dtoa_r+0xa00>
 800870e:	9a06      	ldr	r2, [sp, #24]
 8008710:	b992      	cbnz	r2, 8008738 <_dtoa_r+0xa00>
 8008712:	9a07      	ldr	r2, [sp, #28]
 8008714:	b982      	cbnz	r2, 8008738 <_dtoa_r+0xa00>
 8008716:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800871a:	d029      	beq.n	8008770 <_dtoa_r+0xa38>
 800871c:	9b00      	ldr	r3, [sp, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	dd01      	ble.n	8008726 <_dtoa_r+0x9ee>
 8008722:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008726:	9b05      	ldr	r3, [sp, #20]
 8008728:	1c5d      	adds	r5, r3, #1
 800872a:	f883 8000 	strb.w	r8, [r3]
 800872e:	e782      	b.n	8008636 <_dtoa_r+0x8fe>
 8008730:	4630      	mov	r0, r6
 8008732:	e7c2      	b.n	80086ba <_dtoa_r+0x982>
 8008734:	2301      	movs	r3, #1
 8008736:	e7e3      	b.n	8008700 <_dtoa_r+0x9c8>
 8008738:	9a00      	ldr	r2, [sp, #0]
 800873a:	2a00      	cmp	r2, #0
 800873c:	db04      	blt.n	8008748 <_dtoa_r+0xa10>
 800873e:	d125      	bne.n	800878c <_dtoa_r+0xa54>
 8008740:	9a06      	ldr	r2, [sp, #24]
 8008742:	bb1a      	cbnz	r2, 800878c <_dtoa_r+0xa54>
 8008744:	9a07      	ldr	r2, [sp, #28]
 8008746:	bb0a      	cbnz	r2, 800878c <_dtoa_r+0xa54>
 8008748:	2b00      	cmp	r3, #0
 800874a:	ddec      	ble.n	8008726 <_dtoa_r+0x9ee>
 800874c:	2201      	movs	r2, #1
 800874e:	9904      	ldr	r1, [sp, #16]
 8008750:	4620      	mov	r0, r4
 8008752:	f000 fbc9 	bl	8008ee8 <__lshift>
 8008756:	4639      	mov	r1, r7
 8008758:	9004      	str	r0, [sp, #16]
 800875a:	f000 fc19 	bl	8008f90 <__mcmp>
 800875e:	2800      	cmp	r0, #0
 8008760:	dc03      	bgt.n	800876a <_dtoa_r+0xa32>
 8008762:	d1e0      	bne.n	8008726 <_dtoa_r+0x9ee>
 8008764:	f018 0f01 	tst.w	r8, #1
 8008768:	d0dd      	beq.n	8008726 <_dtoa_r+0x9ee>
 800876a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800876e:	d1d8      	bne.n	8008722 <_dtoa_r+0x9ea>
 8008770:	9b05      	ldr	r3, [sp, #20]
 8008772:	9a05      	ldr	r2, [sp, #20]
 8008774:	1c5d      	adds	r5, r3, #1
 8008776:	2339      	movs	r3, #57	; 0x39
 8008778:	7013      	strb	r3, [r2, #0]
 800877a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800877e:	2b39      	cmp	r3, #57	; 0x39
 8008780:	f105 32ff 	add.w	r2, r5, #4294967295
 8008784:	d04f      	beq.n	8008826 <_dtoa_r+0xaee>
 8008786:	3301      	adds	r3, #1
 8008788:	7013      	strb	r3, [r2, #0]
 800878a:	e754      	b.n	8008636 <_dtoa_r+0x8fe>
 800878c:	9a05      	ldr	r2, [sp, #20]
 800878e:	2b00      	cmp	r3, #0
 8008790:	f102 0501 	add.w	r5, r2, #1
 8008794:	dd06      	ble.n	80087a4 <_dtoa_r+0xa6c>
 8008796:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800879a:	d0e9      	beq.n	8008770 <_dtoa_r+0xa38>
 800879c:	f108 0801 	add.w	r8, r8, #1
 80087a0:	9b05      	ldr	r3, [sp, #20]
 80087a2:	e7c2      	b.n	800872a <_dtoa_r+0x9f2>
 80087a4:	9a02      	ldr	r2, [sp, #8]
 80087a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80087aa:	eba5 030b 	sub.w	r3, r5, fp
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d021      	beq.n	80087f6 <_dtoa_r+0xabe>
 80087b2:	2300      	movs	r3, #0
 80087b4:	220a      	movs	r2, #10
 80087b6:	9904      	ldr	r1, [sp, #16]
 80087b8:	4620      	mov	r0, r4
 80087ba:	f000 fa1f 	bl	8008bfc <__multadd>
 80087be:	45b1      	cmp	r9, r6
 80087c0:	9004      	str	r0, [sp, #16]
 80087c2:	f04f 0300 	mov.w	r3, #0
 80087c6:	f04f 020a 	mov.w	r2, #10
 80087ca:	4649      	mov	r1, r9
 80087cc:	4620      	mov	r0, r4
 80087ce:	d105      	bne.n	80087dc <_dtoa_r+0xaa4>
 80087d0:	f000 fa14 	bl	8008bfc <__multadd>
 80087d4:	4681      	mov	r9, r0
 80087d6:	4606      	mov	r6, r0
 80087d8:	9505      	str	r5, [sp, #20]
 80087da:	e776      	b.n	80086ca <_dtoa_r+0x992>
 80087dc:	f000 fa0e 	bl	8008bfc <__multadd>
 80087e0:	4631      	mov	r1, r6
 80087e2:	4681      	mov	r9, r0
 80087e4:	2300      	movs	r3, #0
 80087e6:	220a      	movs	r2, #10
 80087e8:	4620      	mov	r0, r4
 80087ea:	f000 fa07 	bl	8008bfc <__multadd>
 80087ee:	4606      	mov	r6, r0
 80087f0:	e7f2      	b.n	80087d8 <_dtoa_r+0xaa0>
 80087f2:	f04f 0900 	mov.w	r9, #0
 80087f6:	2201      	movs	r2, #1
 80087f8:	9904      	ldr	r1, [sp, #16]
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 fb74 	bl	8008ee8 <__lshift>
 8008800:	4639      	mov	r1, r7
 8008802:	9004      	str	r0, [sp, #16]
 8008804:	f000 fbc4 	bl	8008f90 <__mcmp>
 8008808:	2800      	cmp	r0, #0
 800880a:	dcb6      	bgt.n	800877a <_dtoa_r+0xa42>
 800880c:	d102      	bne.n	8008814 <_dtoa_r+0xadc>
 800880e:	f018 0f01 	tst.w	r8, #1
 8008812:	d1b2      	bne.n	800877a <_dtoa_r+0xa42>
 8008814:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008818:	2b30      	cmp	r3, #48	; 0x30
 800881a:	f105 32ff 	add.w	r2, r5, #4294967295
 800881e:	f47f af0a 	bne.w	8008636 <_dtoa_r+0x8fe>
 8008822:	4615      	mov	r5, r2
 8008824:	e7f6      	b.n	8008814 <_dtoa_r+0xadc>
 8008826:	4593      	cmp	fp, r2
 8008828:	d105      	bne.n	8008836 <_dtoa_r+0xafe>
 800882a:	2331      	movs	r3, #49	; 0x31
 800882c:	f10a 0a01 	add.w	sl, sl, #1
 8008830:	f88b 3000 	strb.w	r3, [fp]
 8008834:	e6ff      	b.n	8008636 <_dtoa_r+0x8fe>
 8008836:	4615      	mov	r5, r2
 8008838:	e79f      	b.n	800877a <_dtoa_r+0xa42>
 800883a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80088a0 <_dtoa_r+0xb68>
 800883e:	e007      	b.n	8008850 <_dtoa_r+0xb18>
 8008840:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008842:	f8df b060 	ldr.w	fp, [pc, #96]	; 80088a4 <_dtoa_r+0xb6c>
 8008846:	b11b      	cbz	r3, 8008850 <_dtoa_r+0xb18>
 8008848:	f10b 0308 	add.w	r3, fp, #8
 800884c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800884e:	6013      	str	r3, [r2, #0]
 8008850:	4658      	mov	r0, fp
 8008852:	b017      	add	sp, #92	; 0x5c
 8008854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008858:	9b06      	ldr	r3, [sp, #24]
 800885a:	2b01      	cmp	r3, #1
 800885c:	f77f ae35 	ble.w	80084ca <_dtoa_r+0x792>
 8008860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008862:	9307      	str	r3, [sp, #28]
 8008864:	e649      	b.n	80084fa <_dtoa_r+0x7c2>
 8008866:	9b02      	ldr	r3, [sp, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	dc03      	bgt.n	8008874 <_dtoa_r+0xb3c>
 800886c:	9b06      	ldr	r3, [sp, #24]
 800886e:	2b02      	cmp	r3, #2
 8008870:	f73f aecc 	bgt.w	800860c <_dtoa_r+0x8d4>
 8008874:	465d      	mov	r5, fp
 8008876:	4639      	mov	r1, r7
 8008878:	9804      	ldr	r0, [sp, #16]
 800887a:	f7ff f9d1 	bl	8007c20 <quorem>
 800887e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008882:	f805 8b01 	strb.w	r8, [r5], #1
 8008886:	9a02      	ldr	r2, [sp, #8]
 8008888:	eba5 030b 	sub.w	r3, r5, fp
 800888c:	429a      	cmp	r2, r3
 800888e:	ddb0      	ble.n	80087f2 <_dtoa_r+0xaba>
 8008890:	2300      	movs	r3, #0
 8008892:	220a      	movs	r2, #10
 8008894:	9904      	ldr	r1, [sp, #16]
 8008896:	4620      	mov	r0, r4
 8008898:	f000 f9b0 	bl	8008bfc <__multadd>
 800889c:	9004      	str	r0, [sp, #16]
 800889e:	e7ea      	b.n	8008876 <_dtoa_r+0xb3e>
 80088a0:	0800a784 	.word	0x0800a784
 80088a4:	0800a7ab 	.word	0x0800a7ab

080088a8 <print_e>:
 80088a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088aa:	b087      	sub	sp, #28
 80088ac:	ec43 2b10 	vmov	d0, r2, r3
 80088b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80088b2:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80088b6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80088b8:	ab04      	add	r3, sp, #16
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	ab03      	add	r3, sp, #12
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	460f      	mov	r7, r1
 80088c2:	ab05      	add	r3, sp, #20
 80088c4:	2102      	movs	r1, #2
 80088c6:	1c62      	adds	r2, r4, #1
 80088c8:	f7ff fa36 	bl	8007d38 <_dtoa_r>
 80088cc:	4601      	mov	r1, r0
 80088ce:	9805      	ldr	r0, [sp, #20]
 80088d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80088d4:	4298      	cmp	r0, r3
 80088d6:	d104      	bne.n	80088e2 <print_e+0x3a>
 80088d8:	4638      	mov	r0, r7
 80088da:	f000 fcb5 	bl	8009248 <strcpy>
 80088de:	b007      	add	sp, #28
 80088e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088e2:	780b      	ldrb	r3, [r1, #0]
 80088e4:	703b      	strb	r3, [r7, #0]
 80088e6:	2d00      	cmp	r5, #0
 80088e8:	d143      	bne.n	8008972 <print_e+0xca>
 80088ea:	2c00      	cmp	r4, #0
 80088ec:	d141      	bne.n	8008972 <print_e+0xca>
 80088ee:	1c7b      	adds	r3, r7, #1
 80088f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80088f4:	b10a      	cbz	r2, 80088fa <print_e+0x52>
 80088f6:	2c00      	cmp	r4, #0
 80088f8:	dc3f      	bgt.n	800897a <print_e+0xd2>
 80088fa:	2e67      	cmp	r6, #103	; 0x67
 80088fc:	d044      	beq.n	8008988 <print_e+0xe0>
 80088fe:	2e47      	cmp	r6, #71	; 0x47
 8008900:	d044      	beq.n	800898c <print_e+0xe4>
 8008902:	461a      	mov	r2, r3
 8008904:	191d      	adds	r5, r3, r4
 8008906:	2730      	movs	r7, #48	; 0x30
 8008908:	1aa9      	subs	r1, r5, r2
 800890a:	2900      	cmp	r1, #0
 800890c:	dc39      	bgt.n	8008982 <print_e+0xda>
 800890e:	2c00      	cmp	r4, #0
 8008910:	bfa8      	it	ge
 8008912:	191b      	addge	r3, r3, r4
 8008914:	1e41      	subs	r1, r0, #1
 8008916:	2900      	cmp	r1, #0
 8008918:	bfb8      	it	lt
 800891a:	f1c0 0001 	rsblt	r0, r0, #1
 800891e:	9105      	str	r1, [sp, #20]
 8008920:	bfb8      	it	lt
 8008922:	9005      	strlt	r0, [sp, #20]
 8008924:	461a      	mov	r2, r3
 8008926:	9805      	ldr	r0, [sp, #20]
 8008928:	f802 6b02 	strb.w	r6, [r2], #2
 800892c:	bfb5      	itete	lt
 800892e:	212d      	movlt	r1, #45	; 0x2d
 8008930:	212b      	movge	r1, #43	; 0x2b
 8008932:	7059      	strblt	r1, [r3, #1]
 8008934:	7059      	strbge	r1, [r3, #1]
 8008936:	2863      	cmp	r0, #99	; 0x63
 8008938:	dd0b      	ble.n	8008952 <print_e+0xaa>
 800893a:	2164      	movs	r1, #100	; 0x64
 800893c:	fb90 f1f1 	sdiv	r1, r0, r1
 8008940:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8008944:	1cda      	adds	r2, r3, #3
 8008946:	709c      	strb	r4, [r3, #2]
 8008948:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800894c:	fb03 0101 	mla	r1, r3, r1, r0
 8008950:	9105      	str	r1, [sp, #20]
 8008952:	9905      	ldr	r1, [sp, #20]
 8008954:	230a      	movs	r3, #10
 8008956:	fb91 f3f3 	sdiv	r3, r1, r3
 800895a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800895e:	7010      	strb	r0, [r2, #0]
 8008960:	f06f 0009 	mvn.w	r0, #9
 8008964:	fb00 1303 	mla	r3, r0, r3, r1
 8008968:	3330      	adds	r3, #48	; 0x30
 800896a:	7053      	strb	r3, [r2, #1]
 800896c:	2300      	movs	r3, #0
 800896e:	7093      	strb	r3, [r2, #2]
 8008970:	e7b5      	b.n	80088de <print_e+0x36>
 8008972:	222e      	movs	r2, #46	; 0x2e
 8008974:	1cbb      	adds	r3, r7, #2
 8008976:	707a      	strb	r2, [r7, #1]
 8008978:	e7ba      	b.n	80088f0 <print_e+0x48>
 800897a:	f803 2b01 	strb.w	r2, [r3], #1
 800897e:	3c01      	subs	r4, #1
 8008980:	e7b6      	b.n	80088f0 <print_e+0x48>
 8008982:	f802 7b01 	strb.w	r7, [r2], #1
 8008986:	e7bf      	b.n	8008908 <print_e+0x60>
 8008988:	2665      	movs	r6, #101	; 0x65
 800898a:	e7c3      	b.n	8008914 <print_e+0x6c>
 800898c:	2645      	movs	r6, #69	; 0x45
 800898e:	e7c1      	b.n	8008914 <print_e+0x6c>

08008990 <_gcvt>:
 8008990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008994:	ec55 4b10 	vmov	r4, r5, d0
 8008998:	b088      	sub	sp, #32
 800899a:	4681      	mov	r9, r0
 800899c:	460f      	mov	r7, r1
 800899e:	4616      	mov	r6, r2
 80089a0:	469a      	mov	sl, r3
 80089a2:	2200      	movs	r2, #0
 80089a4:	2300      	movs	r3, #0
 80089a6:	ee10 0a10 	vmov	r0, s0
 80089aa:	4629      	mov	r1, r5
 80089ac:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80089b0:	f7f8 f840 	bl	8000a34 <__aeabi_dcmplt>
 80089b4:	b110      	cbz	r0, 80089bc <_gcvt+0x2c>
 80089b6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80089ba:	461d      	mov	r5, r3
 80089bc:	2200      	movs	r2, #0
 80089be:	2300      	movs	r3, #0
 80089c0:	4620      	mov	r0, r4
 80089c2:	4629      	mov	r1, r5
 80089c4:	f7f8 f82c 	bl	8000a20 <__aeabi_dcmpeq>
 80089c8:	b138      	cbz	r0, 80089da <_gcvt+0x4a>
 80089ca:	2330      	movs	r3, #48	; 0x30
 80089cc:	7033      	strb	r3, [r6, #0]
 80089ce:	2300      	movs	r3, #0
 80089d0:	7073      	strb	r3, [r6, #1]
 80089d2:	4630      	mov	r0, r6
 80089d4:	b008      	add	sp, #32
 80089d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089da:	a350      	add	r3, pc, #320	; (adr r3, 8008b1c <_gcvt+0x18c>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	4620      	mov	r0, r4
 80089e2:	4629      	mov	r1, r5
 80089e4:	f7f8 f830 	bl	8000a48 <__aeabi_dcmple>
 80089e8:	b150      	cbz	r0, 8008a00 <_gcvt+0x70>
 80089ea:	3f01      	subs	r7, #1
 80089ec:	e9cd a801 	strd	sl, r8, [sp, #4]
 80089f0:	9700      	str	r7, [sp, #0]
 80089f2:	4622      	mov	r2, r4
 80089f4:	462b      	mov	r3, r5
 80089f6:	4631      	mov	r1, r6
 80089f8:	4648      	mov	r0, r9
 80089fa:	f7ff ff55 	bl	80088a8 <print_e>
 80089fe:	e7e8      	b.n	80089d2 <_gcvt+0x42>
 8008a00:	4638      	mov	r0, r7
 8008a02:	f000 fb8b 	bl	800911c <_mprec_log10>
 8008a06:	4622      	mov	r2, r4
 8008a08:	462b      	mov	r3, r5
 8008a0a:	ec51 0b10 	vmov	r0, r1, d0
 8008a0e:	f7f8 f81b 	bl	8000a48 <__aeabi_dcmple>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d1e9      	bne.n	80089ea <_gcvt+0x5a>
 8008a16:	2200      	movs	r2, #0
 8008a18:	4b3f      	ldr	r3, [pc, #252]	; (8008b18 <_gcvt+0x188>)
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	f7f8 f809 	bl	8000a34 <__aeabi_dcmplt>
 8008a22:	aa07      	add	r2, sp, #28
 8008a24:	ab06      	add	r3, sp, #24
 8008a26:	e9cd 3200 	strd	r3, r2, [sp]
 8008a2a:	ab05      	add	r3, sp, #20
 8008a2c:	463a      	mov	r2, r7
 8008a2e:	b360      	cbz	r0, 8008a8a <_gcvt+0xfa>
 8008a30:	2103      	movs	r1, #3
 8008a32:	ec45 4b10 	vmov	d0, r4, r5
 8008a36:	4648      	mov	r0, r9
 8008a38:	f7ff f97e 	bl	8007d38 <_dtoa_r>
 8008a3c:	9a05      	ldr	r2, [sp, #20]
 8008a3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d023      	beq.n	8008a8e <_gcvt+0xfe>
 8008a46:	4633      	mov	r3, r6
 8008a48:	4437      	add	r7, r6
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a50:	9d05      	ldr	r5, [sp, #20]
 8008a52:	1afc      	subs	r4, r7, r3
 8008a54:	b32a      	cbz	r2, 8008aa2 <_gcvt+0x112>
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	dc1e      	bgt.n	8008a98 <_gcvt+0x108>
 8008a5a:	f1b8 0f00 	cmp.w	r8, #0
 8008a5e:	d102      	bne.n	8008a66 <_gcvt+0xd6>
 8008a60:	780a      	ldrb	r2, [r1, #0]
 8008a62:	2a00      	cmp	r2, #0
 8008a64:	d045      	beq.n	8008af2 <_gcvt+0x162>
 8008a66:	429e      	cmp	r6, r3
 8008a68:	bf02      	ittt	eq
 8008a6a:	1c73      	addeq	r3, r6, #1
 8008a6c:	2230      	moveq	r2, #48	; 0x30
 8008a6e:	7032      	strbeq	r2, [r6, #0]
 8008a70:	222e      	movs	r2, #46	; 0x2e
 8008a72:	701a      	strb	r2, [r3, #0]
 8008a74:	9a05      	ldr	r2, [sp, #20]
 8008a76:	3301      	adds	r3, #1
 8008a78:	2000      	movs	r0, #0
 8008a7a:	2730      	movs	r7, #48	; 0x30
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	4615      	mov	r5, r2
 8008a80:	db24      	blt.n	8008acc <_gcvt+0x13c>
 8008a82:	b100      	cbz	r0, 8008a86 <_gcvt+0xf6>
 8008a84:	9205      	str	r2, [sp, #20]
 8008a86:	1e4a      	subs	r2, r1, #1
 8008a88:	e02b      	b.n	8008ae2 <_gcvt+0x152>
 8008a8a:	2102      	movs	r1, #2
 8008a8c:	e7d1      	b.n	8008a32 <_gcvt+0xa2>
 8008a8e:	4601      	mov	r1, r0
 8008a90:	4630      	mov	r0, r6
 8008a92:	f000 fbd9 	bl	8009248 <strcpy>
 8008a96:	e79c      	b.n	80089d2 <_gcvt+0x42>
 8008a98:	3d01      	subs	r5, #1
 8008a9a:	f803 2b01 	strb.w	r2, [r3], #1
 8008a9e:	9505      	str	r5, [sp, #20]
 8008aa0:	e7d3      	b.n	8008a4a <_gcvt+0xba>
 8008aa2:	1b2d      	subs	r5, r5, r4
 8008aa4:	2730      	movs	r7, #48	; 0x30
 8008aa6:	e005      	b.n	8008ab4 <_gcvt+0x124>
 8008aa8:	2c00      	cmp	r4, #0
 8008aaa:	dd06      	ble.n	8008aba <_gcvt+0x12a>
 8008aac:	f803 7b01 	strb.w	r7, [r3], #1
 8008ab0:	3c01      	subs	r4, #1
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	1928      	adds	r0, r5, r4
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	dcf6      	bgt.n	8008aa8 <_gcvt+0x118>
 8008aba:	2a00      	cmp	r2, #0
 8008abc:	d0cd      	beq.n	8008a5a <_gcvt+0xca>
 8008abe:	9005      	str	r0, [sp, #20]
 8008ac0:	e7cb      	b.n	8008a5a <_gcvt+0xca>
 8008ac2:	f803 7b01 	strb.w	r7, [r3], #1
 8008ac6:	3c01      	subs	r4, #1
 8008ac8:	2001      	movs	r0, #1
 8008aca:	e7d7      	b.n	8008a7c <_gcvt+0xec>
 8008acc:	2c00      	cmp	r4, #0
 8008ace:	f102 0201 	add.w	r2, r2, #1
 8008ad2:	dcf6      	bgt.n	8008ac2 <_gcvt+0x132>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	d0d6      	beq.n	8008a86 <_gcvt+0xf6>
 8008ad8:	9505      	str	r5, [sp, #20]
 8008ada:	e7d4      	b.n	8008a86 <_gcvt+0xf6>
 8008adc:	f803 1b01 	strb.w	r1, [r3], #1
 8008ae0:	3c01      	subs	r4, #1
 8008ae2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008ae6:	b109      	cbz	r1, 8008aec <_gcvt+0x15c>
 8008ae8:	2c00      	cmp	r4, #0
 8008aea:	dcf7      	bgt.n	8008adc <_gcvt+0x14c>
 8008aec:	f1b8 0f00 	cmp.w	r8, #0
 8008af0:	d10b      	bne.n	8008b0a <_gcvt+0x17a>
 8008af2:	2200      	movs	r2, #0
 8008af4:	701a      	strb	r2, [r3, #0]
 8008af6:	e76c      	b.n	80089d2 <_gcvt+0x42>
 8008af8:	f802 5b01 	strb.w	r5, [r2], #1
 8008afc:	1a81      	subs	r1, r0, r2
 8008afe:	2900      	cmp	r1, #0
 8008b00:	dcfa      	bgt.n	8008af8 <_gcvt+0x168>
 8008b02:	2c00      	cmp	r4, #0
 8008b04:	bfa8      	it	ge
 8008b06:	191b      	addge	r3, r3, r4
 8008b08:	e7f3      	b.n	8008af2 <_gcvt+0x162>
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	1918      	adds	r0, r3, r4
 8008b0e:	2530      	movs	r5, #48	; 0x30
 8008b10:	e7f4      	b.n	8008afc <_gcvt+0x16c>
 8008b12:	bf00      	nop
 8008b14:	f3af 8000 	nop.w
 8008b18:	3ff00000 	.word	0x3ff00000
 8008b1c:	eb1c432d 	.word	0xeb1c432d
 8008b20:	3f1a36e2 	.word	0x3f1a36e2

08008b24 <_localeconv_r>:
 8008b24:	4b04      	ldr	r3, [pc, #16]	; (8008b38 <_localeconv_r+0x14>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6a18      	ldr	r0, [r3, #32]
 8008b2a:	4b04      	ldr	r3, [pc, #16]	; (8008b3c <_localeconv_r+0x18>)
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	bf08      	it	eq
 8008b30:	4618      	moveq	r0, r3
 8008b32:	30f0      	adds	r0, #240	; 0xf0
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	2000000c 	.word	0x2000000c
 8008b3c:	20000070 	.word	0x20000070

08008b40 <malloc>:
 8008b40:	4b02      	ldr	r3, [pc, #8]	; (8008b4c <malloc+0xc>)
 8008b42:	4601      	mov	r1, r0
 8008b44:	6818      	ldr	r0, [r3, #0]
 8008b46:	f000 bb15 	b.w	8009174 <_malloc_r>
 8008b4a:	bf00      	nop
 8008b4c:	2000000c 	.word	0x2000000c

08008b50 <memcpy>:
 8008b50:	b510      	push	{r4, lr}
 8008b52:	1e43      	subs	r3, r0, #1
 8008b54:	440a      	add	r2, r1
 8008b56:	4291      	cmp	r1, r2
 8008b58:	d100      	bne.n	8008b5c <memcpy+0xc>
 8008b5a:	bd10      	pop	{r4, pc}
 8008b5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b64:	e7f7      	b.n	8008b56 <memcpy+0x6>

08008b66 <_Balloc>:
 8008b66:	b570      	push	{r4, r5, r6, lr}
 8008b68:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	460e      	mov	r6, r1
 8008b6e:	b93d      	cbnz	r5, 8008b80 <_Balloc+0x1a>
 8008b70:	2010      	movs	r0, #16
 8008b72:	f7ff ffe5 	bl	8008b40 <malloc>
 8008b76:	6260      	str	r0, [r4, #36]	; 0x24
 8008b78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b7c:	6005      	str	r5, [r0, #0]
 8008b7e:	60c5      	str	r5, [r0, #12]
 8008b80:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008b82:	68eb      	ldr	r3, [r5, #12]
 8008b84:	b183      	cbz	r3, 8008ba8 <_Balloc+0x42>
 8008b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b8e:	b9b8      	cbnz	r0, 8008bc0 <_Balloc+0x5a>
 8008b90:	2101      	movs	r1, #1
 8008b92:	fa01 f506 	lsl.w	r5, r1, r6
 8008b96:	1d6a      	adds	r2, r5, #5
 8008b98:	0092      	lsls	r2, r2, #2
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 fadc 	bl	8009158 <_calloc_r>
 8008ba0:	b160      	cbz	r0, 8008bbc <_Balloc+0x56>
 8008ba2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008ba6:	e00e      	b.n	8008bc6 <_Balloc+0x60>
 8008ba8:	2221      	movs	r2, #33	; 0x21
 8008baa:	2104      	movs	r1, #4
 8008bac:	4620      	mov	r0, r4
 8008bae:	f000 fad3 	bl	8009158 <_calloc_r>
 8008bb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bb4:	60e8      	str	r0, [r5, #12]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e4      	bne.n	8008b86 <_Balloc+0x20>
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	bd70      	pop	{r4, r5, r6, pc}
 8008bc0:	6802      	ldr	r2, [r0, #0]
 8008bc2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bcc:	e7f7      	b.n	8008bbe <_Balloc+0x58>

08008bce <_Bfree>:
 8008bce:	b570      	push	{r4, r5, r6, lr}
 8008bd0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	460d      	mov	r5, r1
 8008bd6:	b93c      	cbnz	r4, 8008be8 <_Bfree+0x1a>
 8008bd8:	2010      	movs	r0, #16
 8008bda:	f7ff ffb1 	bl	8008b40 <malloc>
 8008bde:	6270      	str	r0, [r6, #36]	; 0x24
 8008be0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008be4:	6004      	str	r4, [r0, #0]
 8008be6:	60c4      	str	r4, [r0, #12]
 8008be8:	b13d      	cbz	r5, 8008bfa <_Bfree+0x2c>
 8008bea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008bec:	686a      	ldr	r2, [r5, #4]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bf4:	6029      	str	r1, [r5, #0]
 8008bf6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008bfa:	bd70      	pop	{r4, r5, r6, pc}

08008bfc <__multadd>:
 8008bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c00:	690d      	ldr	r5, [r1, #16]
 8008c02:	461f      	mov	r7, r3
 8008c04:	4606      	mov	r6, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	f101 0c14 	add.w	ip, r1, #20
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f8dc 0000 	ldr.w	r0, [ip]
 8008c12:	b281      	uxth	r1, r0
 8008c14:	fb02 7101 	mla	r1, r2, r1, r7
 8008c18:	0c0f      	lsrs	r7, r1, #16
 8008c1a:	0c00      	lsrs	r0, r0, #16
 8008c1c:	fb02 7000 	mla	r0, r2, r0, r7
 8008c20:	b289      	uxth	r1, r1
 8008c22:	3301      	adds	r3, #1
 8008c24:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008c28:	429d      	cmp	r5, r3
 8008c2a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008c2e:	f84c 1b04 	str.w	r1, [ip], #4
 8008c32:	dcec      	bgt.n	8008c0e <__multadd+0x12>
 8008c34:	b1d7      	cbz	r7, 8008c6c <__multadd+0x70>
 8008c36:	68a3      	ldr	r3, [r4, #8]
 8008c38:	42ab      	cmp	r3, r5
 8008c3a:	dc12      	bgt.n	8008c62 <__multadd+0x66>
 8008c3c:	6861      	ldr	r1, [r4, #4]
 8008c3e:	4630      	mov	r0, r6
 8008c40:	3101      	adds	r1, #1
 8008c42:	f7ff ff90 	bl	8008b66 <_Balloc>
 8008c46:	6922      	ldr	r2, [r4, #16]
 8008c48:	3202      	adds	r2, #2
 8008c4a:	f104 010c 	add.w	r1, r4, #12
 8008c4e:	4680      	mov	r8, r0
 8008c50:	0092      	lsls	r2, r2, #2
 8008c52:	300c      	adds	r0, #12
 8008c54:	f7ff ff7c 	bl	8008b50 <memcpy>
 8008c58:	4621      	mov	r1, r4
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	f7ff ffb7 	bl	8008bce <_Bfree>
 8008c60:	4644      	mov	r4, r8
 8008c62:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c66:	3501      	adds	r5, #1
 8008c68:	615f      	str	r7, [r3, #20]
 8008c6a:	6125      	str	r5, [r4, #16]
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c72 <__hi0bits>:
 8008c72:	0c02      	lsrs	r2, r0, #16
 8008c74:	0412      	lsls	r2, r2, #16
 8008c76:	4603      	mov	r3, r0
 8008c78:	b9b2      	cbnz	r2, 8008ca8 <__hi0bits+0x36>
 8008c7a:	0403      	lsls	r3, r0, #16
 8008c7c:	2010      	movs	r0, #16
 8008c7e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c82:	bf04      	itt	eq
 8008c84:	021b      	lsleq	r3, r3, #8
 8008c86:	3008      	addeq	r0, #8
 8008c88:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c8c:	bf04      	itt	eq
 8008c8e:	011b      	lsleq	r3, r3, #4
 8008c90:	3004      	addeq	r0, #4
 8008c92:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c96:	bf04      	itt	eq
 8008c98:	009b      	lsleq	r3, r3, #2
 8008c9a:	3002      	addeq	r0, #2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	db06      	blt.n	8008cae <__hi0bits+0x3c>
 8008ca0:	005b      	lsls	r3, r3, #1
 8008ca2:	d503      	bpl.n	8008cac <__hi0bits+0x3a>
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	4770      	bx	lr
 8008ca8:	2000      	movs	r0, #0
 8008caa:	e7e8      	b.n	8008c7e <__hi0bits+0xc>
 8008cac:	2020      	movs	r0, #32
 8008cae:	4770      	bx	lr

08008cb0 <__lo0bits>:
 8008cb0:	6803      	ldr	r3, [r0, #0]
 8008cb2:	f013 0207 	ands.w	r2, r3, #7
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	d00b      	beq.n	8008cd2 <__lo0bits+0x22>
 8008cba:	07da      	lsls	r2, r3, #31
 8008cbc:	d423      	bmi.n	8008d06 <__lo0bits+0x56>
 8008cbe:	0798      	lsls	r0, r3, #30
 8008cc0:	bf49      	itett	mi
 8008cc2:	085b      	lsrmi	r3, r3, #1
 8008cc4:	089b      	lsrpl	r3, r3, #2
 8008cc6:	2001      	movmi	r0, #1
 8008cc8:	600b      	strmi	r3, [r1, #0]
 8008cca:	bf5c      	itt	pl
 8008ccc:	600b      	strpl	r3, [r1, #0]
 8008cce:	2002      	movpl	r0, #2
 8008cd0:	4770      	bx	lr
 8008cd2:	b298      	uxth	r0, r3
 8008cd4:	b9a8      	cbnz	r0, 8008d02 <__lo0bits+0x52>
 8008cd6:	0c1b      	lsrs	r3, r3, #16
 8008cd8:	2010      	movs	r0, #16
 8008cda:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008cde:	bf04      	itt	eq
 8008ce0:	0a1b      	lsreq	r3, r3, #8
 8008ce2:	3008      	addeq	r0, #8
 8008ce4:	071a      	lsls	r2, r3, #28
 8008ce6:	bf04      	itt	eq
 8008ce8:	091b      	lsreq	r3, r3, #4
 8008cea:	3004      	addeq	r0, #4
 8008cec:	079a      	lsls	r2, r3, #30
 8008cee:	bf04      	itt	eq
 8008cf0:	089b      	lsreq	r3, r3, #2
 8008cf2:	3002      	addeq	r0, #2
 8008cf4:	07da      	lsls	r2, r3, #31
 8008cf6:	d402      	bmi.n	8008cfe <__lo0bits+0x4e>
 8008cf8:	085b      	lsrs	r3, r3, #1
 8008cfa:	d006      	beq.n	8008d0a <__lo0bits+0x5a>
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	600b      	str	r3, [r1, #0]
 8008d00:	4770      	bx	lr
 8008d02:	4610      	mov	r0, r2
 8008d04:	e7e9      	b.n	8008cda <__lo0bits+0x2a>
 8008d06:	2000      	movs	r0, #0
 8008d08:	4770      	bx	lr
 8008d0a:	2020      	movs	r0, #32
 8008d0c:	4770      	bx	lr

08008d0e <__i2b>:
 8008d0e:	b510      	push	{r4, lr}
 8008d10:	460c      	mov	r4, r1
 8008d12:	2101      	movs	r1, #1
 8008d14:	f7ff ff27 	bl	8008b66 <_Balloc>
 8008d18:	2201      	movs	r2, #1
 8008d1a:	6144      	str	r4, [r0, #20]
 8008d1c:	6102      	str	r2, [r0, #16]
 8008d1e:	bd10      	pop	{r4, pc}

08008d20 <__multiply>:
 8008d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d24:	4614      	mov	r4, r2
 8008d26:	690a      	ldr	r2, [r1, #16]
 8008d28:	6923      	ldr	r3, [r4, #16]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	bfb8      	it	lt
 8008d2e:	460b      	movlt	r3, r1
 8008d30:	4688      	mov	r8, r1
 8008d32:	bfbc      	itt	lt
 8008d34:	46a0      	movlt	r8, r4
 8008d36:	461c      	movlt	r4, r3
 8008d38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d3c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008d40:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d48:	eb07 0609 	add.w	r6, r7, r9
 8008d4c:	42b3      	cmp	r3, r6
 8008d4e:	bfb8      	it	lt
 8008d50:	3101      	addlt	r1, #1
 8008d52:	f7ff ff08 	bl	8008b66 <_Balloc>
 8008d56:	f100 0514 	add.w	r5, r0, #20
 8008d5a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008d5e:	462b      	mov	r3, r5
 8008d60:	2200      	movs	r2, #0
 8008d62:	4573      	cmp	r3, lr
 8008d64:	d316      	bcc.n	8008d94 <__multiply+0x74>
 8008d66:	f104 0214 	add.w	r2, r4, #20
 8008d6a:	f108 0114 	add.w	r1, r8, #20
 8008d6e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008d72:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	9b00      	ldr	r3, [sp, #0]
 8008d7a:	9201      	str	r2, [sp, #4]
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d80c      	bhi.n	8008d9a <__multiply+0x7a>
 8008d80:	2e00      	cmp	r6, #0
 8008d82:	dd03      	ble.n	8008d8c <__multiply+0x6c>
 8008d84:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d05d      	beq.n	8008e48 <__multiply+0x128>
 8008d8c:	6106      	str	r6, [r0, #16]
 8008d8e:	b003      	add	sp, #12
 8008d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d94:	f843 2b04 	str.w	r2, [r3], #4
 8008d98:	e7e3      	b.n	8008d62 <__multiply+0x42>
 8008d9a:	f8b2 b000 	ldrh.w	fp, [r2]
 8008d9e:	f1bb 0f00 	cmp.w	fp, #0
 8008da2:	d023      	beq.n	8008dec <__multiply+0xcc>
 8008da4:	4689      	mov	r9, r1
 8008da6:	46ac      	mov	ip, r5
 8008da8:	f04f 0800 	mov.w	r8, #0
 8008dac:	f859 4b04 	ldr.w	r4, [r9], #4
 8008db0:	f8dc a000 	ldr.w	sl, [ip]
 8008db4:	b2a3      	uxth	r3, r4
 8008db6:	fa1f fa8a 	uxth.w	sl, sl
 8008dba:	fb0b a303 	mla	r3, fp, r3, sl
 8008dbe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008dc2:	f8dc 4000 	ldr.w	r4, [ip]
 8008dc6:	4443      	add	r3, r8
 8008dc8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008dcc:	fb0b 840a 	mla	r4, fp, sl, r8
 8008dd0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008dd4:	46e2      	mov	sl, ip
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008ddc:	454f      	cmp	r7, r9
 8008dde:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008de2:	f84a 3b04 	str.w	r3, [sl], #4
 8008de6:	d82b      	bhi.n	8008e40 <__multiply+0x120>
 8008de8:	f8cc 8004 	str.w	r8, [ip, #4]
 8008dec:	9b01      	ldr	r3, [sp, #4]
 8008dee:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008df2:	3204      	adds	r2, #4
 8008df4:	f1ba 0f00 	cmp.w	sl, #0
 8008df8:	d020      	beq.n	8008e3c <__multiply+0x11c>
 8008dfa:	682b      	ldr	r3, [r5, #0]
 8008dfc:	4689      	mov	r9, r1
 8008dfe:	46a8      	mov	r8, r5
 8008e00:	f04f 0b00 	mov.w	fp, #0
 8008e04:	f8b9 c000 	ldrh.w	ip, [r9]
 8008e08:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008e0c:	fb0a 440c 	mla	r4, sl, ip, r4
 8008e10:	445c      	add	r4, fp
 8008e12:	46c4      	mov	ip, r8
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e1a:	f84c 3b04 	str.w	r3, [ip], #4
 8008e1e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e22:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008e26:	0c1b      	lsrs	r3, r3, #16
 8008e28:	fb0a b303 	mla	r3, sl, r3, fp
 8008e2c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008e30:	454f      	cmp	r7, r9
 8008e32:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008e36:	d805      	bhi.n	8008e44 <__multiply+0x124>
 8008e38:	f8c8 3004 	str.w	r3, [r8, #4]
 8008e3c:	3504      	adds	r5, #4
 8008e3e:	e79b      	b.n	8008d78 <__multiply+0x58>
 8008e40:	46d4      	mov	ip, sl
 8008e42:	e7b3      	b.n	8008dac <__multiply+0x8c>
 8008e44:	46e0      	mov	r8, ip
 8008e46:	e7dd      	b.n	8008e04 <__multiply+0xe4>
 8008e48:	3e01      	subs	r6, #1
 8008e4a:	e799      	b.n	8008d80 <__multiply+0x60>

08008e4c <__pow5mult>:
 8008e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e50:	4615      	mov	r5, r2
 8008e52:	f012 0203 	ands.w	r2, r2, #3
 8008e56:	4606      	mov	r6, r0
 8008e58:	460f      	mov	r7, r1
 8008e5a:	d007      	beq.n	8008e6c <__pow5mult+0x20>
 8008e5c:	3a01      	subs	r2, #1
 8008e5e:	4c21      	ldr	r4, [pc, #132]	; (8008ee4 <__pow5mult+0x98>)
 8008e60:	2300      	movs	r3, #0
 8008e62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e66:	f7ff fec9 	bl	8008bfc <__multadd>
 8008e6a:	4607      	mov	r7, r0
 8008e6c:	10ad      	asrs	r5, r5, #2
 8008e6e:	d035      	beq.n	8008edc <__pow5mult+0x90>
 8008e70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e72:	b93c      	cbnz	r4, 8008e84 <__pow5mult+0x38>
 8008e74:	2010      	movs	r0, #16
 8008e76:	f7ff fe63 	bl	8008b40 <malloc>
 8008e7a:	6270      	str	r0, [r6, #36]	; 0x24
 8008e7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e80:	6004      	str	r4, [r0, #0]
 8008e82:	60c4      	str	r4, [r0, #12]
 8008e84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e8c:	b94c      	cbnz	r4, 8008ea2 <__pow5mult+0x56>
 8008e8e:	f240 2171 	movw	r1, #625	; 0x271
 8008e92:	4630      	mov	r0, r6
 8008e94:	f7ff ff3b 	bl	8008d0e <__i2b>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	6003      	str	r3, [r0, #0]
 8008ea2:	f04f 0800 	mov.w	r8, #0
 8008ea6:	07eb      	lsls	r3, r5, #31
 8008ea8:	d50a      	bpl.n	8008ec0 <__pow5mult+0x74>
 8008eaa:	4639      	mov	r1, r7
 8008eac:	4622      	mov	r2, r4
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f7ff ff36 	bl	8008d20 <__multiply>
 8008eb4:	4639      	mov	r1, r7
 8008eb6:	4681      	mov	r9, r0
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f7ff fe88 	bl	8008bce <_Bfree>
 8008ebe:	464f      	mov	r7, r9
 8008ec0:	106d      	asrs	r5, r5, #1
 8008ec2:	d00b      	beq.n	8008edc <__pow5mult+0x90>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	b938      	cbnz	r0, 8008ed8 <__pow5mult+0x8c>
 8008ec8:	4622      	mov	r2, r4
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f7ff ff27 	bl	8008d20 <__multiply>
 8008ed2:	6020      	str	r0, [r4, #0]
 8008ed4:	f8c0 8000 	str.w	r8, [r0]
 8008ed8:	4604      	mov	r4, r0
 8008eda:	e7e4      	b.n	8008ea6 <__pow5mult+0x5a>
 8008edc:	4638      	mov	r0, r7
 8008ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ee2:	bf00      	nop
 8008ee4:	0800a8a8 	.word	0x0800a8a8

08008ee8 <__lshift>:
 8008ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eec:	460c      	mov	r4, r1
 8008eee:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ef2:	6923      	ldr	r3, [r4, #16]
 8008ef4:	6849      	ldr	r1, [r1, #4]
 8008ef6:	eb0a 0903 	add.w	r9, sl, r3
 8008efa:	68a3      	ldr	r3, [r4, #8]
 8008efc:	4607      	mov	r7, r0
 8008efe:	4616      	mov	r6, r2
 8008f00:	f109 0501 	add.w	r5, r9, #1
 8008f04:	42ab      	cmp	r3, r5
 8008f06:	db32      	blt.n	8008f6e <__lshift+0x86>
 8008f08:	4638      	mov	r0, r7
 8008f0a:	f7ff fe2c 	bl	8008b66 <_Balloc>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	4680      	mov	r8, r0
 8008f12:	f100 0114 	add.w	r1, r0, #20
 8008f16:	461a      	mov	r2, r3
 8008f18:	4553      	cmp	r3, sl
 8008f1a:	db2b      	blt.n	8008f74 <__lshift+0x8c>
 8008f1c:	6920      	ldr	r0, [r4, #16]
 8008f1e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f22:	f104 0314 	add.w	r3, r4, #20
 8008f26:	f016 021f 	ands.w	r2, r6, #31
 8008f2a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f2e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f32:	d025      	beq.n	8008f80 <__lshift+0x98>
 8008f34:	f1c2 0e20 	rsb	lr, r2, #32
 8008f38:	2000      	movs	r0, #0
 8008f3a:	681e      	ldr	r6, [r3, #0]
 8008f3c:	468a      	mov	sl, r1
 8008f3e:	4096      	lsls	r6, r2
 8008f40:	4330      	orrs	r0, r6
 8008f42:	f84a 0b04 	str.w	r0, [sl], #4
 8008f46:	f853 0b04 	ldr.w	r0, [r3], #4
 8008f4a:	459c      	cmp	ip, r3
 8008f4c:	fa20 f00e 	lsr.w	r0, r0, lr
 8008f50:	d814      	bhi.n	8008f7c <__lshift+0x94>
 8008f52:	6048      	str	r0, [r1, #4]
 8008f54:	b108      	cbz	r0, 8008f5a <__lshift+0x72>
 8008f56:	f109 0502 	add.w	r5, r9, #2
 8008f5a:	3d01      	subs	r5, #1
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	f8c8 5010 	str.w	r5, [r8, #16]
 8008f62:	4621      	mov	r1, r4
 8008f64:	f7ff fe33 	bl	8008bce <_Bfree>
 8008f68:	4640      	mov	r0, r8
 8008f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f6e:	3101      	adds	r1, #1
 8008f70:	005b      	lsls	r3, r3, #1
 8008f72:	e7c7      	b.n	8008f04 <__lshift+0x1c>
 8008f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	e7cd      	b.n	8008f18 <__lshift+0x30>
 8008f7c:	4651      	mov	r1, sl
 8008f7e:	e7dc      	b.n	8008f3a <__lshift+0x52>
 8008f80:	3904      	subs	r1, #4
 8008f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f86:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f8a:	459c      	cmp	ip, r3
 8008f8c:	d8f9      	bhi.n	8008f82 <__lshift+0x9a>
 8008f8e:	e7e4      	b.n	8008f5a <__lshift+0x72>

08008f90 <__mcmp>:
 8008f90:	6903      	ldr	r3, [r0, #16]
 8008f92:	690a      	ldr	r2, [r1, #16]
 8008f94:	1a9b      	subs	r3, r3, r2
 8008f96:	b530      	push	{r4, r5, lr}
 8008f98:	d10c      	bne.n	8008fb4 <__mcmp+0x24>
 8008f9a:	0092      	lsls	r2, r2, #2
 8008f9c:	3014      	adds	r0, #20
 8008f9e:	3114      	adds	r1, #20
 8008fa0:	1884      	adds	r4, r0, r2
 8008fa2:	4411      	add	r1, r2
 8008fa4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fac:	4295      	cmp	r5, r2
 8008fae:	d003      	beq.n	8008fb8 <__mcmp+0x28>
 8008fb0:	d305      	bcc.n	8008fbe <__mcmp+0x2e>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	bd30      	pop	{r4, r5, pc}
 8008fb8:	42a0      	cmp	r0, r4
 8008fba:	d3f3      	bcc.n	8008fa4 <__mcmp+0x14>
 8008fbc:	e7fa      	b.n	8008fb4 <__mcmp+0x24>
 8008fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc2:	e7f7      	b.n	8008fb4 <__mcmp+0x24>

08008fc4 <__mdiff>:
 8008fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc8:	460d      	mov	r5, r1
 8008fca:	4607      	mov	r7, r0
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4628      	mov	r0, r5
 8008fd0:	4614      	mov	r4, r2
 8008fd2:	f7ff ffdd 	bl	8008f90 <__mcmp>
 8008fd6:	1e06      	subs	r6, r0, #0
 8008fd8:	d108      	bne.n	8008fec <__mdiff+0x28>
 8008fda:	4631      	mov	r1, r6
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f7ff fdc2 	bl	8008b66 <_Balloc>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fec:	bfa4      	itt	ge
 8008fee:	4623      	movge	r3, r4
 8008ff0:	462c      	movge	r4, r5
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	6861      	ldr	r1, [r4, #4]
 8008ff6:	bfa6      	itte	ge
 8008ff8:	461d      	movge	r5, r3
 8008ffa:	2600      	movge	r6, #0
 8008ffc:	2601      	movlt	r6, #1
 8008ffe:	f7ff fdb2 	bl	8008b66 <_Balloc>
 8009002:	692b      	ldr	r3, [r5, #16]
 8009004:	60c6      	str	r6, [r0, #12]
 8009006:	6926      	ldr	r6, [r4, #16]
 8009008:	f105 0914 	add.w	r9, r5, #20
 800900c:	f104 0214 	add.w	r2, r4, #20
 8009010:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009014:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009018:	f100 0514 	add.w	r5, r0, #20
 800901c:	f04f 0e00 	mov.w	lr, #0
 8009020:	f852 ab04 	ldr.w	sl, [r2], #4
 8009024:	f859 4b04 	ldr.w	r4, [r9], #4
 8009028:	fa1e f18a 	uxtah	r1, lr, sl
 800902c:	b2a3      	uxth	r3, r4
 800902e:	1ac9      	subs	r1, r1, r3
 8009030:	0c23      	lsrs	r3, r4, #16
 8009032:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009036:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800903a:	b289      	uxth	r1, r1
 800903c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009040:	45c8      	cmp	r8, r9
 8009042:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009046:	4694      	mov	ip, r2
 8009048:	f845 3b04 	str.w	r3, [r5], #4
 800904c:	d8e8      	bhi.n	8009020 <__mdiff+0x5c>
 800904e:	45bc      	cmp	ip, r7
 8009050:	d304      	bcc.n	800905c <__mdiff+0x98>
 8009052:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009056:	b183      	cbz	r3, 800907a <__mdiff+0xb6>
 8009058:	6106      	str	r6, [r0, #16]
 800905a:	e7c5      	b.n	8008fe8 <__mdiff+0x24>
 800905c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009060:	fa1e f381 	uxtah	r3, lr, r1
 8009064:	141a      	asrs	r2, r3, #16
 8009066:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800906a:	b29b      	uxth	r3, r3
 800906c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009070:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009074:	f845 3b04 	str.w	r3, [r5], #4
 8009078:	e7e9      	b.n	800904e <__mdiff+0x8a>
 800907a:	3e01      	subs	r6, #1
 800907c:	e7e9      	b.n	8009052 <__mdiff+0x8e>

0800907e <__d2b>:
 800907e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009082:	460e      	mov	r6, r1
 8009084:	2101      	movs	r1, #1
 8009086:	ec59 8b10 	vmov	r8, r9, d0
 800908a:	4615      	mov	r5, r2
 800908c:	f7ff fd6b 	bl	8008b66 <_Balloc>
 8009090:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009094:	4607      	mov	r7, r0
 8009096:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800909a:	bb34      	cbnz	r4, 80090ea <__d2b+0x6c>
 800909c:	9301      	str	r3, [sp, #4]
 800909e:	f1b8 0300 	subs.w	r3, r8, #0
 80090a2:	d027      	beq.n	80090f4 <__d2b+0x76>
 80090a4:	a802      	add	r0, sp, #8
 80090a6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80090aa:	f7ff fe01 	bl	8008cb0 <__lo0bits>
 80090ae:	9900      	ldr	r1, [sp, #0]
 80090b0:	b1f0      	cbz	r0, 80090f0 <__d2b+0x72>
 80090b2:	9a01      	ldr	r2, [sp, #4]
 80090b4:	f1c0 0320 	rsb	r3, r0, #32
 80090b8:	fa02 f303 	lsl.w	r3, r2, r3
 80090bc:	430b      	orrs	r3, r1
 80090be:	40c2      	lsrs	r2, r0
 80090c0:	617b      	str	r3, [r7, #20]
 80090c2:	9201      	str	r2, [sp, #4]
 80090c4:	9b01      	ldr	r3, [sp, #4]
 80090c6:	61bb      	str	r3, [r7, #24]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	bf14      	ite	ne
 80090cc:	2102      	movne	r1, #2
 80090ce:	2101      	moveq	r1, #1
 80090d0:	6139      	str	r1, [r7, #16]
 80090d2:	b1c4      	cbz	r4, 8009106 <__d2b+0x88>
 80090d4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80090d8:	4404      	add	r4, r0
 80090da:	6034      	str	r4, [r6, #0]
 80090dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090e0:	6028      	str	r0, [r5, #0]
 80090e2:	4638      	mov	r0, r7
 80090e4:	b003      	add	sp, #12
 80090e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090ee:	e7d5      	b.n	800909c <__d2b+0x1e>
 80090f0:	6179      	str	r1, [r7, #20]
 80090f2:	e7e7      	b.n	80090c4 <__d2b+0x46>
 80090f4:	a801      	add	r0, sp, #4
 80090f6:	f7ff fddb 	bl	8008cb0 <__lo0bits>
 80090fa:	9b01      	ldr	r3, [sp, #4]
 80090fc:	617b      	str	r3, [r7, #20]
 80090fe:	2101      	movs	r1, #1
 8009100:	6139      	str	r1, [r7, #16]
 8009102:	3020      	adds	r0, #32
 8009104:	e7e5      	b.n	80090d2 <__d2b+0x54>
 8009106:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800910a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800910e:	6030      	str	r0, [r6, #0]
 8009110:	6918      	ldr	r0, [r3, #16]
 8009112:	f7ff fdae 	bl	8008c72 <__hi0bits>
 8009116:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800911a:	e7e1      	b.n	80090e0 <__d2b+0x62>

0800911c <_mprec_log10>:
 800911c:	2817      	cmp	r0, #23
 800911e:	b5d0      	push	{r4, r6, r7, lr}
 8009120:	4604      	mov	r4, r0
 8009122:	dc07      	bgt.n	8009134 <_mprec_log10+0x18>
 8009124:	4b09      	ldr	r3, [pc, #36]	; (800914c <_mprec_log10+0x30>)
 8009126:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800912a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800912e:	ec41 0b10 	vmov	d0, r0, r1
 8009132:	bdd0      	pop	{r4, r6, r7, pc}
 8009134:	4906      	ldr	r1, [pc, #24]	; (8009150 <_mprec_log10+0x34>)
 8009136:	4f07      	ldr	r7, [pc, #28]	; (8009154 <_mprec_log10+0x38>)
 8009138:	2000      	movs	r0, #0
 800913a:	2600      	movs	r6, #0
 800913c:	4632      	mov	r2, r6
 800913e:	463b      	mov	r3, r7
 8009140:	f7f7 fa06 	bl	8000550 <__aeabi_dmul>
 8009144:	3c01      	subs	r4, #1
 8009146:	d1f9      	bne.n	800913c <_mprec_log10+0x20>
 8009148:	e7f1      	b.n	800912e <_mprec_log10+0x12>
 800914a:	bf00      	nop
 800914c:	0800a7e0 	.word	0x0800a7e0
 8009150:	3ff00000 	.word	0x3ff00000
 8009154:	40240000 	.word	0x40240000

08009158 <_calloc_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	fb02 f401 	mul.w	r4, r2, r1
 800915e:	4621      	mov	r1, r4
 8009160:	f000 f808 	bl	8009174 <_malloc_r>
 8009164:	4605      	mov	r5, r0
 8009166:	b118      	cbz	r0, 8009170 <_calloc_r+0x18>
 8009168:	4622      	mov	r2, r4
 800916a:	2100      	movs	r1, #0
 800916c:	f7fe f9c8 	bl	8007500 <memset>
 8009170:	4628      	mov	r0, r5
 8009172:	bd38      	pop	{r3, r4, r5, pc}

08009174 <_malloc_r>:
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	1ccd      	adds	r5, r1, #3
 8009178:	f025 0503 	bic.w	r5, r5, #3
 800917c:	3508      	adds	r5, #8
 800917e:	2d0c      	cmp	r5, #12
 8009180:	bf38      	it	cc
 8009182:	250c      	movcc	r5, #12
 8009184:	2d00      	cmp	r5, #0
 8009186:	4606      	mov	r6, r0
 8009188:	db01      	blt.n	800918e <_malloc_r+0x1a>
 800918a:	42a9      	cmp	r1, r5
 800918c:	d903      	bls.n	8009196 <_malloc_r+0x22>
 800918e:	230c      	movs	r3, #12
 8009190:	6033      	str	r3, [r6, #0]
 8009192:	2000      	movs	r0, #0
 8009194:	bd70      	pop	{r4, r5, r6, pc}
 8009196:	f000 f871 	bl	800927c <__malloc_lock>
 800919a:	4a21      	ldr	r2, [pc, #132]	; (8009220 <_malloc_r+0xac>)
 800919c:	6814      	ldr	r4, [r2, #0]
 800919e:	4621      	mov	r1, r4
 80091a0:	b991      	cbnz	r1, 80091c8 <_malloc_r+0x54>
 80091a2:	4c20      	ldr	r4, [pc, #128]	; (8009224 <_malloc_r+0xb0>)
 80091a4:	6823      	ldr	r3, [r4, #0]
 80091a6:	b91b      	cbnz	r3, 80091b0 <_malloc_r+0x3c>
 80091a8:	4630      	mov	r0, r6
 80091aa:	f000 f83d 	bl	8009228 <_sbrk_r>
 80091ae:	6020      	str	r0, [r4, #0]
 80091b0:	4629      	mov	r1, r5
 80091b2:	4630      	mov	r0, r6
 80091b4:	f000 f838 	bl	8009228 <_sbrk_r>
 80091b8:	1c43      	adds	r3, r0, #1
 80091ba:	d124      	bne.n	8009206 <_malloc_r+0x92>
 80091bc:	230c      	movs	r3, #12
 80091be:	6033      	str	r3, [r6, #0]
 80091c0:	4630      	mov	r0, r6
 80091c2:	f000 f85c 	bl	800927e <__malloc_unlock>
 80091c6:	e7e4      	b.n	8009192 <_malloc_r+0x1e>
 80091c8:	680b      	ldr	r3, [r1, #0]
 80091ca:	1b5b      	subs	r3, r3, r5
 80091cc:	d418      	bmi.n	8009200 <_malloc_r+0x8c>
 80091ce:	2b0b      	cmp	r3, #11
 80091d0:	d90f      	bls.n	80091f2 <_malloc_r+0x7e>
 80091d2:	600b      	str	r3, [r1, #0]
 80091d4:	50cd      	str	r5, [r1, r3]
 80091d6:	18cc      	adds	r4, r1, r3
 80091d8:	4630      	mov	r0, r6
 80091da:	f000 f850 	bl	800927e <__malloc_unlock>
 80091de:	f104 000b 	add.w	r0, r4, #11
 80091e2:	1d23      	adds	r3, r4, #4
 80091e4:	f020 0007 	bic.w	r0, r0, #7
 80091e8:	1ac3      	subs	r3, r0, r3
 80091ea:	d0d3      	beq.n	8009194 <_malloc_r+0x20>
 80091ec:	425a      	negs	r2, r3
 80091ee:	50e2      	str	r2, [r4, r3]
 80091f0:	e7d0      	b.n	8009194 <_malloc_r+0x20>
 80091f2:	428c      	cmp	r4, r1
 80091f4:	684b      	ldr	r3, [r1, #4]
 80091f6:	bf16      	itet	ne
 80091f8:	6063      	strne	r3, [r4, #4]
 80091fa:	6013      	streq	r3, [r2, #0]
 80091fc:	460c      	movne	r4, r1
 80091fe:	e7eb      	b.n	80091d8 <_malloc_r+0x64>
 8009200:	460c      	mov	r4, r1
 8009202:	6849      	ldr	r1, [r1, #4]
 8009204:	e7cc      	b.n	80091a0 <_malloc_r+0x2c>
 8009206:	1cc4      	adds	r4, r0, #3
 8009208:	f024 0403 	bic.w	r4, r4, #3
 800920c:	42a0      	cmp	r0, r4
 800920e:	d005      	beq.n	800921c <_malloc_r+0xa8>
 8009210:	1a21      	subs	r1, r4, r0
 8009212:	4630      	mov	r0, r6
 8009214:	f000 f808 	bl	8009228 <_sbrk_r>
 8009218:	3001      	adds	r0, #1
 800921a:	d0cf      	beq.n	80091bc <_malloc_r+0x48>
 800921c:	6025      	str	r5, [r4, #0]
 800921e:	e7db      	b.n	80091d8 <_malloc_r+0x64>
 8009220:	2000020c 	.word	0x2000020c
 8009224:	20000210 	.word	0x20000210

08009228 <_sbrk_r>:
 8009228:	b538      	push	{r3, r4, r5, lr}
 800922a:	4c06      	ldr	r4, [pc, #24]	; (8009244 <_sbrk_r+0x1c>)
 800922c:	2300      	movs	r3, #0
 800922e:	4605      	mov	r5, r0
 8009230:	4608      	mov	r0, r1
 8009232:	6023      	str	r3, [r4, #0]
 8009234:	f7f8 fe68 	bl	8001f08 <_sbrk>
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	d102      	bne.n	8009242 <_sbrk_r+0x1a>
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	b103      	cbz	r3, 8009242 <_sbrk_r+0x1a>
 8009240:	602b      	str	r3, [r5, #0]
 8009242:	bd38      	pop	{r3, r4, r5, pc}
 8009244:	200003fc 	.word	0x200003fc

08009248 <strcpy>:
 8009248:	4603      	mov	r3, r0
 800924a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800924e:	f803 2b01 	strb.w	r2, [r3], #1
 8009252:	2a00      	cmp	r2, #0
 8009254:	d1f9      	bne.n	800924a <strcpy+0x2>
 8009256:	4770      	bx	lr

08009258 <__ascii_mbtowc>:
 8009258:	b082      	sub	sp, #8
 800925a:	b901      	cbnz	r1, 800925e <__ascii_mbtowc+0x6>
 800925c:	a901      	add	r1, sp, #4
 800925e:	b142      	cbz	r2, 8009272 <__ascii_mbtowc+0x1a>
 8009260:	b14b      	cbz	r3, 8009276 <__ascii_mbtowc+0x1e>
 8009262:	7813      	ldrb	r3, [r2, #0]
 8009264:	600b      	str	r3, [r1, #0]
 8009266:	7812      	ldrb	r2, [r2, #0]
 8009268:	1c10      	adds	r0, r2, #0
 800926a:	bf18      	it	ne
 800926c:	2001      	movne	r0, #1
 800926e:	b002      	add	sp, #8
 8009270:	4770      	bx	lr
 8009272:	4610      	mov	r0, r2
 8009274:	e7fb      	b.n	800926e <__ascii_mbtowc+0x16>
 8009276:	f06f 0001 	mvn.w	r0, #1
 800927a:	e7f8      	b.n	800926e <__ascii_mbtowc+0x16>

0800927c <__malloc_lock>:
 800927c:	4770      	bx	lr

0800927e <__malloc_unlock>:
 800927e:	4770      	bx	lr

08009280 <__ascii_wctomb>:
 8009280:	b149      	cbz	r1, 8009296 <__ascii_wctomb+0x16>
 8009282:	2aff      	cmp	r2, #255	; 0xff
 8009284:	bf85      	ittet	hi
 8009286:	238a      	movhi	r3, #138	; 0x8a
 8009288:	6003      	strhi	r3, [r0, #0]
 800928a:	700a      	strbls	r2, [r1, #0]
 800928c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009290:	bf98      	it	ls
 8009292:	2001      	movls	r0, #1
 8009294:	4770      	bx	lr
 8009296:	4608      	mov	r0, r1
 8009298:	4770      	bx	lr
 800929a:	0000      	movs	r0, r0
 800929c:	0000      	movs	r0, r0
	...

080092a0 <atan>:
 80092a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	ec55 4b10 	vmov	r4, r5, d0
 80092a8:	4bc3      	ldr	r3, [pc, #780]	; (80095b8 <atan+0x318>)
 80092aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80092ae:	429e      	cmp	r6, r3
 80092b0:	46ab      	mov	fp, r5
 80092b2:	dd18      	ble.n	80092e6 <atan+0x46>
 80092b4:	4bc1      	ldr	r3, [pc, #772]	; (80095bc <atan+0x31c>)
 80092b6:	429e      	cmp	r6, r3
 80092b8:	dc01      	bgt.n	80092be <atan+0x1e>
 80092ba:	d109      	bne.n	80092d0 <atan+0x30>
 80092bc:	b144      	cbz	r4, 80092d0 <atan+0x30>
 80092be:	4622      	mov	r2, r4
 80092c0:	462b      	mov	r3, r5
 80092c2:	4620      	mov	r0, r4
 80092c4:	4629      	mov	r1, r5
 80092c6:	f7f6 ff8d 	bl	80001e4 <__adddf3>
 80092ca:	4604      	mov	r4, r0
 80092cc:	460d      	mov	r5, r1
 80092ce:	e006      	b.n	80092de <atan+0x3e>
 80092d0:	f1bb 0f00 	cmp.w	fp, #0
 80092d4:	f340 8131 	ble.w	800953a <atan+0x29a>
 80092d8:	a59b      	add	r5, pc, #620	; (adr r5, 8009548 <atan+0x2a8>)
 80092da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80092de:	ec45 4b10 	vmov	d0, r4, r5
 80092e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e6:	4bb6      	ldr	r3, [pc, #728]	; (80095c0 <atan+0x320>)
 80092e8:	429e      	cmp	r6, r3
 80092ea:	dc14      	bgt.n	8009316 <atan+0x76>
 80092ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80092f0:	429e      	cmp	r6, r3
 80092f2:	dc0d      	bgt.n	8009310 <atan+0x70>
 80092f4:	a396      	add	r3, pc, #600	; (adr r3, 8009550 <atan+0x2b0>)
 80092f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fa:	ee10 0a10 	vmov	r0, s0
 80092fe:	4629      	mov	r1, r5
 8009300:	f7f6 ff70 	bl	80001e4 <__adddf3>
 8009304:	2200      	movs	r2, #0
 8009306:	4baf      	ldr	r3, [pc, #700]	; (80095c4 <atan+0x324>)
 8009308:	f7f7 fbb2 	bl	8000a70 <__aeabi_dcmpgt>
 800930c:	2800      	cmp	r0, #0
 800930e:	d1e6      	bne.n	80092de <atan+0x3e>
 8009310:	f04f 3aff 	mov.w	sl, #4294967295
 8009314:	e02b      	b.n	800936e <atan+0xce>
 8009316:	f000 f963 	bl	80095e0 <fabs>
 800931a:	4bab      	ldr	r3, [pc, #684]	; (80095c8 <atan+0x328>)
 800931c:	429e      	cmp	r6, r3
 800931e:	ec55 4b10 	vmov	r4, r5, d0
 8009322:	f300 80bf 	bgt.w	80094a4 <atan+0x204>
 8009326:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800932a:	429e      	cmp	r6, r3
 800932c:	f300 80a0 	bgt.w	8009470 <atan+0x1d0>
 8009330:	ee10 2a10 	vmov	r2, s0
 8009334:	ee10 0a10 	vmov	r0, s0
 8009338:	462b      	mov	r3, r5
 800933a:	4629      	mov	r1, r5
 800933c:	f7f6 ff52 	bl	80001e4 <__adddf3>
 8009340:	2200      	movs	r2, #0
 8009342:	4ba0      	ldr	r3, [pc, #640]	; (80095c4 <atan+0x324>)
 8009344:	f7f6 ff4c 	bl	80001e0 <__aeabi_dsub>
 8009348:	2200      	movs	r2, #0
 800934a:	4606      	mov	r6, r0
 800934c:	460f      	mov	r7, r1
 800934e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009352:	4620      	mov	r0, r4
 8009354:	4629      	mov	r1, r5
 8009356:	f7f6 ff45 	bl	80001e4 <__adddf3>
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	4630      	mov	r0, r6
 8009360:	4639      	mov	r1, r7
 8009362:	f7f7 fa1f 	bl	80007a4 <__aeabi_ddiv>
 8009366:	f04f 0a00 	mov.w	sl, #0
 800936a:	4604      	mov	r4, r0
 800936c:	460d      	mov	r5, r1
 800936e:	4622      	mov	r2, r4
 8009370:	462b      	mov	r3, r5
 8009372:	4620      	mov	r0, r4
 8009374:	4629      	mov	r1, r5
 8009376:	f7f7 f8eb 	bl	8000550 <__aeabi_dmul>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	4680      	mov	r8, r0
 8009380:	4689      	mov	r9, r1
 8009382:	f7f7 f8e5 	bl	8000550 <__aeabi_dmul>
 8009386:	a374      	add	r3, pc, #464	; (adr r3, 8009558 <atan+0x2b8>)
 8009388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938c:	4606      	mov	r6, r0
 800938e:	460f      	mov	r7, r1
 8009390:	f7f7 f8de 	bl	8000550 <__aeabi_dmul>
 8009394:	a372      	add	r3, pc, #456	; (adr r3, 8009560 <atan+0x2c0>)
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	f7f6 ff23 	bl	80001e4 <__adddf3>
 800939e:	4632      	mov	r2, r6
 80093a0:	463b      	mov	r3, r7
 80093a2:	f7f7 f8d5 	bl	8000550 <__aeabi_dmul>
 80093a6:	a370      	add	r3, pc, #448	; (adr r3, 8009568 <atan+0x2c8>)
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	f7f6 ff1a 	bl	80001e4 <__adddf3>
 80093b0:	4632      	mov	r2, r6
 80093b2:	463b      	mov	r3, r7
 80093b4:	f7f7 f8cc 	bl	8000550 <__aeabi_dmul>
 80093b8:	a36d      	add	r3, pc, #436	; (adr r3, 8009570 <atan+0x2d0>)
 80093ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093be:	f7f6 ff11 	bl	80001e4 <__adddf3>
 80093c2:	4632      	mov	r2, r6
 80093c4:	463b      	mov	r3, r7
 80093c6:	f7f7 f8c3 	bl	8000550 <__aeabi_dmul>
 80093ca:	a36b      	add	r3, pc, #428	; (adr r3, 8009578 <atan+0x2d8>)
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	f7f6 ff08 	bl	80001e4 <__adddf3>
 80093d4:	4632      	mov	r2, r6
 80093d6:	463b      	mov	r3, r7
 80093d8:	f7f7 f8ba 	bl	8000550 <__aeabi_dmul>
 80093dc:	a368      	add	r3, pc, #416	; (adr r3, 8009580 <atan+0x2e0>)
 80093de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e2:	f7f6 feff 	bl	80001e4 <__adddf3>
 80093e6:	4642      	mov	r2, r8
 80093e8:	464b      	mov	r3, r9
 80093ea:	f7f7 f8b1 	bl	8000550 <__aeabi_dmul>
 80093ee:	a366      	add	r3, pc, #408	; (adr r3, 8009588 <atan+0x2e8>)
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	4680      	mov	r8, r0
 80093f6:	4689      	mov	r9, r1
 80093f8:	4630      	mov	r0, r6
 80093fa:	4639      	mov	r1, r7
 80093fc:	f7f7 f8a8 	bl	8000550 <__aeabi_dmul>
 8009400:	a363      	add	r3, pc, #396	; (adr r3, 8009590 <atan+0x2f0>)
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	f7f6 feeb 	bl	80001e0 <__aeabi_dsub>
 800940a:	4632      	mov	r2, r6
 800940c:	463b      	mov	r3, r7
 800940e:	f7f7 f89f 	bl	8000550 <__aeabi_dmul>
 8009412:	a361      	add	r3, pc, #388	; (adr r3, 8009598 <atan+0x2f8>)
 8009414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009418:	f7f6 fee2 	bl	80001e0 <__aeabi_dsub>
 800941c:	4632      	mov	r2, r6
 800941e:	463b      	mov	r3, r7
 8009420:	f7f7 f896 	bl	8000550 <__aeabi_dmul>
 8009424:	a35e      	add	r3, pc, #376	; (adr r3, 80095a0 <atan+0x300>)
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	f7f6 fed9 	bl	80001e0 <__aeabi_dsub>
 800942e:	4632      	mov	r2, r6
 8009430:	463b      	mov	r3, r7
 8009432:	f7f7 f88d 	bl	8000550 <__aeabi_dmul>
 8009436:	a35c      	add	r3, pc, #368	; (adr r3, 80095a8 <atan+0x308>)
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	f7f6 fed0 	bl	80001e0 <__aeabi_dsub>
 8009440:	4632      	mov	r2, r6
 8009442:	463b      	mov	r3, r7
 8009444:	f7f7 f884 	bl	8000550 <__aeabi_dmul>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4640      	mov	r0, r8
 800944e:	4649      	mov	r1, r9
 8009450:	f7f6 fec8 	bl	80001e4 <__adddf3>
 8009454:	4622      	mov	r2, r4
 8009456:	462b      	mov	r3, r5
 8009458:	f7f7 f87a 	bl	8000550 <__aeabi_dmul>
 800945c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	d14b      	bne.n	80094fe <atan+0x25e>
 8009466:	4620      	mov	r0, r4
 8009468:	4629      	mov	r1, r5
 800946a:	f7f6 feb9 	bl	80001e0 <__aeabi_dsub>
 800946e:	e72c      	b.n	80092ca <atan+0x2a>
 8009470:	ee10 0a10 	vmov	r0, s0
 8009474:	2200      	movs	r2, #0
 8009476:	4b53      	ldr	r3, [pc, #332]	; (80095c4 <atan+0x324>)
 8009478:	4629      	mov	r1, r5
 800947a:	f7f6 feb1 	bl	80001e0 <__aeabi_dsub>
 800947e:	2200      	movs	r2, #0
 8009480:	4606      	mov	r6, r0
 8009482:	460f      	mov	r7, r1
 8009484:	4b4f      	ldr	r3, [pc, #316]	; (80095c4 <atan+0x324>)
 8009486:	4620      	mov	r0, r4
 8009488:	4629      	mov	r1, r5
 800948a:	f7f6 feab 	bl	80001e4 <__adddf3>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	4630      	mov	r0, r6
 8009494:	4639      	mov	r1, r7
 8009496:	f7f7 f985 	bl	80007a4 <__aeabi_ddiv>
 800949a:	f04f 0a01 	mov.w	sl, #1
 800949e:	4604      	mov	r4, r0
 80094a0:	460d      	mov	r5, r1
 80094a2:	e764      	b.n	800936e <atan+0xce>
 80094a4:	4b49      	ldr	r3, [pc, #292]	; (80095cc <atan+0x32c>)
 80094a6:	429e      	cmp	r6, r3
 80094a8:	dc1d      	bgt.n	80094e6 <atan+0x246>
 80094aa:	ee10 0a10 	vmov	r0, s0
 80094ae:	2200      	movs	r2, #0
 80094b0:	4b47      	ldr	r3, [pc, #284]	; (80095d0 <atan+0x330>)
 80094b2:	4629      	mov	r1, r5
 80094b4:	f7f6 fe94 	bl	80001e0 <__aeabi_dsub>
 80094b8:	2200      	movs	r2, #0
 80094ba:	4606      	mov	r6, r0
 80094bc:	460f      	mov	r7, r1
 80094be:	4b44      	ldr	r3, [pc, #272]	; (80095d0 <atan+0x330>)
 80094c0:	4620      	mov	r0, r4
 80094c2:	4629      	mov	r1, r5
 80094c4:	f7f7 f844 	bl	8000550 <__aeabi_dmul>
 80094c8:	2200      	movs	r2, #0
 80094ca:	4b3e      	ldr	r3, [pc, #248]	; (80095c4 <atan+0x324>)
 80094cc:	f7f6 fe8a 	bl	80001e4 <__adddf3>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	4630      	mov	r0, r6
 80094d6:	4639      	mov	r1, r7
 80094d8:	f7f7 f964 	bl	80007a4 <__aeabi_ddiv>
 80094dc:	f04f 0a02 	mov.w	sl, #2
 80094e0:	4604      	mov	r4, r0
 80094e2:	460d      	mov	r5, r1
 80094e4:	e743      	b.n	800936e <atan+0xce>
 80094e6:	462b      	mov	r3, r5
 80094e8:	ee10 2a10 	vmov	r2, s0
 80094ec:	2000      	movs	r0, #0
 80094ee:	4939      	ldr	r1, [pc, #228]	; (80095d4 <atan+0x334>)
 80094f0:	f7f7 f958 	bl	80007a4 <__aeabi_ddiv>
 80094f4:	f04f 0a03 	mov.w	sl, #3
 80094f8:	4604      	mov	r4, r0
 80094fa:	460d      	mov	r5, r1
 80094fc:	e737      	b.n	800936e <atan+0xce>
 80094fe:	4b36      	ldr	r3, [pc, #216]	; (80095d8 <atan+0x338>)
 8009500:	4e36      	ldr	r6, [pc, #216]	; (80095dc <atan+0x33c>)
 8009502:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8009506:	4456      	add	r6, sl
 8009508:	449a      	add	sl, r3
 800950a:	e9da 2300 	ldrd	r2, r3, [sl]
 800950e:	f7f6 fe67 	bl	80001e0 <__aeabi_dsub>
 8009512:	4622      	mov	r2, r4
 8009514:	462b      	mov	r3, r5
 8009516:	f7f6 fe63 	bl	80001e0 <__aeabi_dsub>
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009522:	f7f6 fe5d 	bl	80001e0 <__aeabi_dsub>
 8009526:	f1bb 0f00 	cmp.w	fp, #0
 800952a:	4604      	mov	r4, r0
 800952c:	460d      	mov	r5, r1
 800952e:	f6bf aed6 	bge.w	80092de <atan+0x3e>
 8009532:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009536:	461d      	mov	r5, r3
 8009538:	e6d1      	b.n	80092de <atan+0x3e>
 800953a:	a51d      	add	r5, pc, #116	; (adr r5, 80095b0 <atan+0x310>)
 800953c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009540:	e6cd      	b.n	80092de <atan+0x3e>
 8009542:	bf00      	nop
 8009544:	f3af 8000 	nop.w
 8009548:	54442d18 	.word	0x54442d18
 800954c:	3ff921fb 	.word	0x3ff921fb
 8009550:	8800759c 	.word	0x8800759c
 8009554:	7e37e43c 	.word	0x7e37e43c
 8009558:	e322da11 	.word	0xe322da11
 800955c:	3f90ad3a 	.word	0x3f90ad3a
 8009560:	24760deb 	.word	0x24760deb
 8009564:	3fa97b4b 	.word	0x3fa97b4b
 8009568:	a0d03d51 	.word	0xa0d03d51
 800956c:	3fb10d66 	.word	0x3fb10d66
 8009570:	c54c206e 	.word	0xc54c206e
 8009574:	3fb745cd 	.word	0x3fb745cd
 8009578:	920083ff 	.word	0x920083ff
 800957c:	3fc24924 	.word	0x3fc24924
 8009580:	5555550d 	.word	0x5555550d
 8009584:	3fd55555 	.word	0x3fd55555
 8009588:	2c6a6c2f 	.word	0x2c6a6c2f
 800958c:	bfa2b444 	.word	0xbfa2b444
 8009590:	52defd9a 	.word	0x52defd9a
 8009594:	3fadde2d 	.word	0x3fadde2d
 8009598:	af749a6d 	.word	0xaf749a6d
 800959c:	3fb3b0f2 	.word	0x3fb3b0f2
 80095a0:	fe231671 	.word	0xfe231671
 80095a4:	3fbc71c6 	.word	0x3fbc71c6
 80095a8:	9998ebc4 	.word	0x9998ebc4
 80095ac:	3fc99999 	.word	0x3fc99999
 80095b0:	54442d18 	.word	0x54442d18
 80095b4:	bff921fb 	.word	0xbff921fb
 80095b8:	440fffff 	.word	0x440fffff
 80095bc:	7ff00000 	.word	0x7ff00000
 80095c0:	3fdbffff 	.word	0x3fdbffff
 80095c4:	3ff00000 	.word	0x3ff00000
 80095c8:	3ff2ffff 	.word	0x3ff2ffff
 80095cc:	40037fff 	.word	0x40037fff
 80095d0:	3ff80000 	.word	0x3ff80000
 80095d4:	bff00000 	.word	0xbff00000
 80095d8:	0800a9e0 	.word	0x0800a9e0
 80095dc:	0800a9c0 	.word	0x0800a9c0

080095e0 <fabs>:
 80095e0:	ec51 0b10 	vmov	r0, r1, d0
 80095e4:	ee10 2a10 	vmov	r2, s0
 80095e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095ec:	ec43 2b10 	vmov	d0, r2, r3
 80095f0:	4770      	bx	lr
	...

080095f4 <pow>:
 80095f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f8:	ed2d 8b04 	vpush	{d8-d9}
 80095fc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80098d0 <pow+0x2dc>
 8009600:	b08d      	sub	sp, #52	; 0x34
 8009602:	ec57 6b10 	vmov	r6, r7, d0
 8009606:	ec55 4b11 	vmov	r4, r5, d1
 800960a:	f000 f9bd 	bl	8009988 <__ieee754_pow>
 800960e:	f999 3000 	ldrsb.w	r3, [r9]
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	3301      	adds	r3, #1
 8009616:	eeb0 8a40 	vmov.f32	s16, s0
 800961a:	eef0 8a60 	vmov.f32	s17, s1
 800961e:	46c8      	mov	r8, r9
 8009620:	d05f      	beq.n	80096e2 <pow+0xee>
 8009622:	4622      	mov	r2, r4
 8009624:	462b      	mov	r3, r5
 8009626:	4620      	mov	r0, r4
 8009628:	4629      	mov	r1, r5
 800962a:	f7f7 fa2b 	bl	8000a84 <__aeabi_dcmpun>
 800962e:	4683      	mov	fp, r0
 8009630:	2800      	cmp	r0, #0
 8009632:	d156      	bne.n	80096e2 <pow+0xee>
 8009634:	4632      	mov	r2, r6
 8009636:	463b      	mov	r3, r7
 8009638:	4630      	mov	r0, r6
 800963a:	4639      	mov	r1, r7
 800963c:	f7f7 fa22 	bl	8000a84 <__aeabi_dcmpun>
 8009640:	9001      	str	r0, [sp, #4]
 8009642:	b1e8      	cbz	r0, 8009680 <pow+0x8c>
 8009644:	2200      	movs	r2, #0
 8009646:	2300      	movs	r3, #0
 8009648:	4620      	mov	r0, r4
 800964a:	4629      	mov	r1, r5
 800964c:	f7f7 f9e8 	bl	8000a20 <__aeabi_dcmpeq>
 8009650:	2800      	cmp	r0, #0
 8009652:	d046      	beq.n	80096e2 <pow+0xee>
 8009654:	2301      	movs	r3, #1
 8009656:	9302      	str	r3, [sp, #8]
 8009658:	4b96      	ldr	r3, [pc, #600]	; (80098b4 <pow+0x2c0>)
 800965a:	9303      	str	r3, [sp, #12]
 800965c:	4b96      	ldr	r3, [pc, #600]	; (80098b8 <pow+0x2c4>)
 800965e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009662:	2200      	movs	r2, #0
 8009664:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009668:	9b00      	ldr	r3, [sp, #0]
 800966a:	2b02      	cmp	r3, #2
 800966c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009670:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009674:	d033      	beq.n	80096de <pow+0xea>
 8009676:	a802      	add	r0, sp, #8
 8009678:	f000 ff4c 	bl	800a514 <matherr>
 800967c:	bb48      	cbnz	r0, 80096d2 <pow+0xde>
 800967e:	e05d      	b.n	800973c <pow+0x148>
 8009680:	f04f 0a00 	mov.w	sl, #0
 8009684:	f04f 0b00 	mov.w	fp, #0
 8009688:	4652      	mov	r2, sl
 800968a:	465b      	mov	r3, fp
 800968c:	4630      	mov	r0, r6
 800968e:	4639      	mov	r1, r7
 8009690:	f7f7 f9c6 	bl	8000a20 <__aeabi_dcmpeq>
 8009694:	ec4b ab19 	vmov	d9, sl, fp
 8009698:	2800      	cmp	r0, #0
 800969a:	d054      	beq.n	8009746 <pow+0x152>
 800969c:	4652      	mov	r2, sl
 800969e:	465b      	mov	r3, fp
 80096a0:	4620      	mov	r0, r4
 80096a2:	4629      	mov	r1, r5
 80096a4:	f7f7 f9bc 	bl	8000a20 <__aeabi_dcmpeq>
 80096a8:	4680      	mov	r8, r0
 80096aa:	b318      	cbz	r0, 80096f4 <pow+0x100>
 80096ac:	2301      	movs	r3, #1
 80096ae:	9302      	str	r3, [sp, #8]
 80096b0:	4b80      	ldr	r3, [pc, #512]	; (80098b4 <pow+0x2c0>)
 80096b2:	9303      	str	r3, [sp, #12]
 80096b4:	9b01      	ldr	r3, [sp, #4]
 80096b6:	930a      	str	r3, [sp, #40]	; 0x28
 80096b8:	9b00      	ldr	r3, [sp, #0]
 80096ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80096be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80096c2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0d5      	beq.n	8009676 <pow+0x82>
 80096ca:	4b7b      	ldr	r3, [pc, #492]	; (80098b8 <pow+0x2c4>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80096d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d4:	b11b      	cbz	r3, 80096de <pow+0xea>
 80096d6:	f7fd fecf 	bl	8007478 <__errno>
 80096da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096dc:	6003      	str	r3, [r0, #0]
 80096de:	ed9d 8b08 	vldr	d8, [sp, #32]
 80096e2:	eeb0 0a48 	vmov.f32	s0, s16
 80096e6:	eef0 0a68 	vmov.f32	s1, s17
 80096ea:	b00d      	add	sp, #52	; 0x34
 80096ec:	ecbd 8b04 	vpop	{d8-d9}
 80096f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f4:	ec45 4b10 	vmov	d0, r4, r5
 80096f8:	f000 ff04 	bl	800a504 <finite>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d0f0      	beq.n	80096e2 <pow+0xee>
 8009700:	4652      	mov	r2, sl
 8009702:	465b      	mov	r3, fp
 8009704:	4620      	mov	r0, r4
 8009706:	4629      	mov	r1, r5
 8009708:	f7f7 f994 	bl	8000a34 <__aeabi_dcmplt>
 800970c:	2800      	cmp	r0, #0
 800970e:	d0e8      	beq.n	80096e2 <pow+0xee>
 8009710:	2301      	movs	r3, #1
 8009712:	9302      	str	r3, [sp, #8]
 8009714:	4b67      	ldr	r3, [pc, #412]	; (80098b4 <pow+0x2c0>)
 8009716:	9303      	str	r3, [sp, #12]
 8009718:	f999 3000 	ldrsb.w	r3, [r9]
 800971c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009720:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009724:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009728:	b913      	cbnz	r3, 8009730 <pow+0x13c>
 800972a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800972e:	e7a2      	b.n	8009676 <pow+0x82>
 8009730:	4962      	ldr	r1, [pc, #392]	; (80098bc <pow+0x2c8>)
 8009732:	2000      	movs	r0, #0
 8009734:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009738:	2b02      	cmp	r3, #2
 800973a:	d19c      	bne.n	8009676 <pow+0x82>
 800973c:	f7fd fe9c 	bl	8007478 <__errno>
 8009740:	2321      	movs	r3, #33	; 0x21
 8009742:	6003      	str	r3, [r0, #0]
 8009744:	e7c5      	b.n	80096d2 <pow+0xde>
 8009746:	eeb0 0a48 	vmov.f32	s0, s16
 800974a:	eef0 0a68 	vmov.f32	s1, s17
 800974e:	f000 fed9 	bl	800a504 <finite>
 8009752:	9000      	str	r0, [sp, #0]
 8009754:	2800      	cmp	r0, #0
 8009756:	f040 8081 	bne.w	800985c <pow+0x268>
 800975a:	ec47 6b10 	vmov	d0, r6, r7
 800975e:	f000 fed1 	bl	800a504 <finite>
 8009762:	2800      	cmp	r0, #0
 8009764:	d07a      	beq.n	800985c <pow+0x268>
 8009766:	ec45 4b10 	vmov	d0, r4, r5
 800976a:	f000 fecb 	bl	800a504 <finite>
 800976e:	2800      	cmp	r0, #0
 8009770:	d074      	beq.n	800985c <pow+0x268>
 8009772:	ec53 2b18 	vmov	r2, r3, d8
 8009776:	ee18 0a10 	vmov	r0, s16
 800977a:	4619      	mov	r1, r3
 800977c:	f7f7 f982 	bl	8000a84 <__aeabi_dcmpun>
 8009780:	f999 9000 	ldrsb.w	r9, [r9]
 8009784:	4b4b      	ldr	r3, [pc, #300]	; (80098b4 <pow+0x2c0>)
 8009786:	b1b0      	cbz	r0, 80097b6 <pow+0x1c2>
 8009788:	2201      	movs	r2, #1
 800978a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800978e:	9b00      	ldr	r3, [sp, #0]
 8009790:	930a      	str	r3, [sp, #40]	; 0x28
 8009792:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009796:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800979a:	f1b9 0f00 	cmp.w	r9, #0
 800979e:	d0c4      	beq.n	800972a <pow+0x136>
 80097a0:	4652      	mov	r2, sl
 80097a2:	465b      	mov	r3, fp
 80097a4:	4650      	mov	r0, sl
 80097a6:	4659      	mov	r1, fp
 80097a8:	f7f6 fffc 	bl	80007a4 <__aeabi_ddiv>
 80097ac:	f1b9 0f02 	cmp.w	r9, #2
 80097b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80097b4:	e7c1      	b.n	800973a <pow+0x146>
 80097b6:	2203      	movs	r2, #3
 80097b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097bc:	900a      	str	r0, [sp, #40]	; 0x28
 80097be:	4629      	mov	r1, r5
 80097c0:	4620      	mov	r0, r4
 80097c2:	2200      	movs	r2, #0
 80097c4:	4b3e      	ldr	r3, [pc, #248]	; (80098c0 <pow+0x2cc>)
 80097c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80097ca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80097ce:	f7f6 febf 	bl	8000550 <__aeabi_dmul>
 80097d2:	4604      	mov	r4, r0
 80097d4:	460d      	mov	r5, r1
 80097d6:	f1b9 0f00 	cmp.w	r9, #0
 80097da:	d124      	bne.n	8009826 <pow+0x232>
 80097dc:	4b39      	ldr	r3, [pc, #228]	; (80098c4 <pow+0x2d0>)
 80097de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80097e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80097e6:	4630      	mov	r0, r6
 80097e8:	4652      	mov	r2, sl
 80097ea:	465b      	mov	r3, fp
 80097ec:	4639      	mov	r1, r7
 80097ee:	f7f7 f921 	bl	8000a34 <__aeabi_dcmplt>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d056      	beq.n	80098a4 <pow+0x2b0>
 80097f6:	ec45 4b10 	vmov	d0, r4, r5
 80097fa:	f000 fe95 	bl	800a528 <rint>
 80097fe:	4622      	mov	r2, r4
 8009800:	462b      	mov	r3, r5
 8009802:	ec51 0b10 	vmov	r0, r1, d0
 8009806:	f7f7 f90b 	bl	8000a20 <__aeabi_dcmpeq>
 800980a:	b920      	cbnz	r0, 8009816 <pow+0x222>
 800980c:	4b2e      	ldr	r3, [pc, #184]	; (80098c8 <pow+0x2d4>)
 800980e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009812:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009816:	f998 3000 	ldrsb.w	r3, [r8]
 800981a:	2b02      	cmp	r3, #2
 800981c:	d142      	bne.n	80098a4 <pow+0x2b0>
 800981e:	f7fd fe2b 	bl	8007478 <__errno>
 8009822:	2322      	movs	r3, #34	; 0x22
 8009824:	e78d      	b.n	8009742 <pow+0x14e>
 8009826:	4b29      	ldr	r3, [pc, #164]	; (80098cc <pow+0x2d8>)
 8009828:	2200      	movs	r2, #0
 800982a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800982e:	4630      	mov	r0, r6
 8009830:	4652      	mov	r2, sl
 8009832:	465b      	mov	r3, fp
 8009834:	4639      	mov	r1, r7
 8009836:	f7f7 f8fd 	bl	8000a34 <__aeabi_dcmplt>
 800983a:	2800      	cmp	r0, #0
 800983c:	d0eb      	beq.n	8009816 <pow+0x222>
 800983e:	ec45 4b10 	vmov	d0, r4, r5
 8009842:	f000 fe71 	bl	800a528 <rint>
 8009846:	4622      	mov	r2, r4
 8009848:	462b      	mov	r3, r5
 800984a:	ec51 0b10 	vmov	r0, r1, d0
 800984e:	f7f7 f8e7 	bl	8000a20 <__aeabi_dcmpeq>
 8009852:	2800      	cmp	r0, #0
 8009854:	d1df      	bne.n	8009816 <pow+0x222>
 8009856:	2200      	movs	r2, #0
 8009858:	4b18      	ldr	r3, [pc, #96]	; (80098bc <pow+0x2c8>)
 800985a:	e7da      	b.n	8009812 <pow+0x21e>
 800985c:	2200      	movs	r2, #0
 800985e:	2300      	movs	r3, #0
 8009860:	ec51 0b18 	vmov	r0, r1, d8
 8009864:	f7f7 f8dc 	bl	8000a20 <__aeabi_dcmpeq>
 8009868:	2800      	cmp	r0, #0
 800986a:	f43f af3a 	beq.w	80096e2 <pow+0xee>
 800986e:	ec47 6b10 	vmov	d0, r6, r7
 8009872:	f000 fe47 	bl	800a504 <finite>
 8009876:	2800      	cmp	r0, #0
 8009878:	f43f af33 	beq.w	80096e2 <pow+0xee>
 800987c:	ec45 4b10 	vmov	d0, r4, r5
 8009880:	f000 fe40 	bl	800a504 <finite>
 8009884:	2800      	cmp	r0, #0
 8009886:	f43f af2c 	beq.w	80096e2 <pow+0xee>
 800988a:	2304      	movs	r3, #4
 800988c:	9302      	str	r3, [sp, #8]
 800988e:	4b09      	ldr	r3, [pc, #36]	; (80098b4 <pow+0x2c0>)
 8009890:	9303      	str	r3, [sp, #12]
 8009892:	2300      	movs	r3, #0
 8009894:	930a      	str	r3, [sp, #40]	; 0x28
 8009896:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800989a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800989e:	ed8d 9b08 	vstr	d9, [sp, #32]
 80098a2:	e7b8      	b.n	8009816 <pow+0x222>
 80098a4:	a802      	add	r0, sp, #8
 80098a6:	f000 fe35 	bl	800a514 <matherr>
 80098aa:	2800      	cmp	r0, #0
 80098ac:	f47f af11 	bne.w	80096d2 <pow+0xde>
 80098b0:	e7b5      	b.n	800981e <pow+0x22a>
 80098b2:	bf00      	nop
 80098b4:	0800aa00 	.word	0x0800aa00
 80098b8:	3ff00000 	.word	0x3ff00000
 80098bc:	fff00000 	.word	0xfff00000
 80098c0:	3fe00000 	.word	0x3fe00000
 80098c4:	47efffff 	.word	0x47efffff
 80098c8:	c7efffff 	.word	0xc7efffff
 80098cc:	7ff00000 	.word	0x7ff00000
 80098d0:	200001dc 	.word	0x200001dc

080098d4 <sqrt>:
 80098d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098d8:	ed2d 8b02 	vpush	{d8}
 80098dc:	b08b      	sub	sp, #44	; 0x2c
 80098de:	ec55 4b10 	vmov	r4, r5, d0
 80098e2:	f000 fd5f 	bl	800a3a4 <__ieee754_sqrt>
 80098e6:	4b26      	ldr	r3, [pc, #152]	; (8009980 <sqrt+0xac>)
 80098e8:	eeb0 8a40 	vmov.f32	s16, s0
 80098ec:	eef0 8a60 	vmov.f32	s17, s1
 80098f0:	f993 6000 	ldrsb.w	r6, [r3]
 80098f4:	1c73      	adds	r3, r6, #1
 80098f6:	d02a      	beq.n	800994e <sqrt+0x7a>
 80098f8:	4622      	mov	r2, r4
 80098fa:	462b      	mov	r3, r5
 80098fc:	4620      	mov	r0, r4
 80098fe:	4629      	mov	r1, r5
 8009900:	f7f7 f8c0 	bl	8000a84 <__aeabi_dcmpun>
 8009904:	4607      	mov	r7, r0
 8009906:	bb10      	cbnz	r0, 800994e <sqrt+0x7a>
 8009908:	f04f 0800 	mov.w	r8, #0
 800990c:	f04f 0900 	mov.w	r9, #0
 8009910:	4642      	mov	r2, r8
 8009912:	464b      	mov	r3, r9
 8009914:	4620      	mov	r0, r4
 8009916:	4629      	mov	r1, r5
 8009918:	f7f7 f88c 	bl	8000a34 <__aeabi_dcmplt>
 800991c:	b1b8      	cbz	r0, 800994e <sqrt+0x7a>
 800991e:	2301      	movs	r3, #1
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	4b18      	ldr	r3, [pc, #96]	; (8009984 <sqrt+0xb0>)
 8009924:	9301      	str	r3, [sp, #4]
 8009926:	9708      	str	r7, [sp, #32]
 8009928:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800992c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009930:	b9b6      	cbnz	r6, 8009960 <sqrt+0x8c>
 8009932:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009936:	4668      	mov	r0, sp
 8009938:	f000 fdec 	bl	800a514 <matherr>
 800993c:	b1d0      	cbz	r0, 8009974 <sqrt+0xa0>
 800993e:	9b08      	ldr	r3, [sp, #32]
 8009940:	b11b      	cbz	r3, 800994a <sqrt+0x76>
 8009942:	f7fd fd99 	bl	8007478 <__errno>
 8009946:	9b08      	ldr	r3, [sp, #32]
 8009948:	6003      	str	r3, [r0, #0]
 800994a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800994e:	eeb0 0a48 	vmov.f32	s0, s16
 8009952:	eef0 0a68 	vmov.f32	s1, s17
 8009956:	b00b      	add	sp, #44	; 0x2c
 8009958:	ecbd 8b02 	vpop	{d8}
 800995c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009960:	4642      	mov	r2, r8
 8009962:	464b      	mov	r3, r9
 8009964:	4640      	mov	r0, r8
 8009966:	4649      	mov	r1, r9
 8009968:	f7f6 ff1c 	bl	80007a4 <__aeabi_ddiv>
 800996c:	2e02      	cmp	r6, #2
 800996e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009972:	d1e0      	bne.n	8009936 <sqrt+0x62>
 8009974:	f7fd fd80 	bl	8007478 <__errno>
 8009978:	2321      	movs	r3, #33	; 0x21
 800997a:	6003      	str	r3, [r0, #0]
 800997c:	e7df      	b.n	800993e <sqrt+0x6a>
 800997e:	bf00      	nop
 8009980:	200001dc 	.word	0x200001dc
 8009984:	0800aa04 	.word	0x0800aa04

08009988 <__ieee754_pow>:
 8009988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998c:	b091      	sub	sp, #68	; 0x44
 800998e:	ed8d 1b00 	vstr	d1, [sp]
 8009992:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009996:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800999a:	ea58 0302 	orrs.w	r3, r8, r2
 800999e:	ec57 6b10 	vmov	r6, r7, d0
 80099a2:	f000 84be 	beq.w	800a322 <__ieee754_pow+0x99a>
 80099a6:	4b7a      	ldr	r3, [pc, #488]	; (8009b90 <__ieee754_pow+0x208>)
 80099a8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80099ac:	429c      	cmp	r4, r3
 80099ae:	463d      	mov	r5, r7
 80099b0:	ee10 aa10 	vmov	sl, s0
 80099b4:	dc09      	bgt.n	80099ca <__ieee754_pow+0x42>
 80099b6:	d103      	bne.n	80099c0 <__ieee754_pow+0x38>
 80099b8:	b93e      	cbnz	r6, 80099ca <__ieee754_pow+0x42>
 80099ba:	45a0      	cmp	r8, r4
 80099bc:	dc0d      	bgt.n	80099da <__ieee754_pow+0x52>
 80099be:	e001      	b.n	80099c4 <__ieee754_pow+0x3c>
 80099c0:	4598      	cmp	r8, r3
 80099c2:	dc02      	bgt.n	80099ca <__ieee754_pow+0x42>
 80099c4:	4598      	cmp	r8, r3
 80099c6:	d10e      	bne.n	80099e6 <__ieee754_pow+0x5e>
 80099c8:	b16a      	cbz	r2, 80099e6 <__ieee754_pow+0x5e>
 80099ca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80099ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80099d2:	ea54 030a 	orrs.w	r3, r4, sl
 80099d6:	f000 84a4 	beq.w	800a322 <__ieee754_pow+0x99a>
 80099da:	486e      	ldr	r0, [pc, #440]	; (8009b94 <__ieee754_pow+0x20c>)
 80099dc:	b011      	add	sp, #68	; 0x44
 80099de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e2:	f000 bd99 	b.w	800a518 <nan>
 80099e6:	2d00      	cmp	r5, #0
 80099e8:	da53      	bge.n	8009a92 <__ieee754_pow+0x10a>
 80099ea:	4b6b      	ldr	r3, [pc, #428]	; (8009b98 <__ieee754_pow+0x210>)
 80099ec:	4598      	cmp	r8, r3
 80099ee:	dc4d      	bgt.n	8009a8c <__ieee754_pow+0x104>
 80099f0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80099f4:	4598      	cmp	r8, r3
 80099f6:	dd4c      	ble.n	8009a92 <__ieee754_pow+0x10a>
 80099f8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80099fc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009a00:	2b14      	cmp	r3, #20
 8009a02:	dd26      	ble.n	8009a52 <__ieee754_pow+0xca>
 8009a04:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009a08:	fa22 f103 	lsr.w	r1, r2, r3
 8009a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d13e      	bne.n	8009a92 <__ieee754_pow+0x10a>
 8009a14:	f001 0101 	and.w	r1, r1, #1
 8009a18:	f1c1 0b02 	rsb	fp, r1, #2
 8009a1c:	2a00      	cmp	r2, #0
 8009a1e:	d15b      	bne.n	8009ad8 <__ieee754_pow+0x150>
 8009a20:	4b5b      	ldr	r3, [pc, #364]	; (8009b90 <__ieee754_pow+0x208>)
 8009a22:	4598      	cmp	r8, r3
 8009a24:	d124      	bne.n	8009a70 <__ieee754_pow+0xe8>
 8009a26:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009a2a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009a2e:	ea53 030a 	orrs.w	r3, r3, sl
 8009a32:	f000 8476 	beq.w	800a322 <__ieee754_pow+0x99a>
 8009a36:	4b59      	ldr	r3, [pc, #356]	; (8009b9c <__ieee754_pow+0x214>)
 8009a38:	429c      	cmp	r4, r3
 8009a3a:	dd2d      	ble.n	8009a98 <__ieee754_pow+0x110>
 8009a3c:	f1b9 0f00 	cmp.w	r9, #0
 8009a40:	f280 8473 	bge.w	800a32a <__ieee754_pow+0x9a2>
 8009a44:	2000      	movs	r0, #0
 8009a46:	2100      	movs	r1, #0
 8009a48:	ec41 0b10 	vmov	d0, r0, r1
 8009a4c:	b011      	add	sp, #68	; 0x44
 8009a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a52:	2a00      	cmp	r2, #0
 8009a54:	d13e      	bne.n	8009ad4 <__ieee754_pow+0x14c>
 8009a56:	f1c3 0314 	rsb	r3, r3, #20
 8009a5a:	fa48 f103 	asr.w	r1, r8, r3
 8009a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a62:	4543      	cmp	r3, r8
 8009a64:	f040 8469 	bne.w	800a33a <__ieee754_pow+0x9b2>
 8009a68:	f001 0101 	and.w	r1, r1, #1
 8009a6c:	f1c1 0b02 	rsb	fp, r1, #2
 8009a70:	4b4b      	ldr	r3, [pc, #300]	; (8009ba0 <__ieee754_pow+0x218>)
 8009a72:	4598      	cmp	r8, r3
 8009a74:	d118      	bne.n	8009aa8 <__ieee754_pow+0x120>
 8009a76:	f1b9 0f00 	cmp.w	r9, #0
 8009a7a:	f280 845a 	bge.w	800a332 <__ieee754_pow+0x9aa>
 8009a7e:	4948      	ldr	r1, [pc, #288]	; (8009ba0 <__ieee754_pow+0x218>)
 8009a80:	4632      	mov	r2, r6
 8009a82:	463b      	mov	r3, r7
 8009a84:	2000      	movs	r0, #0
 8009a86:	f7f6 fe8d 	bl	80007a4 <__aeabi_ddiv>
 8009a8a:	e7dd      	b.n	8009a48 <__ieee754_pow+0xc0>
 8009a8c:	f04f 0b02 	mov.w	fp, #2
 8009a90:	e7c4      	b.n	8009a1c <__ieee754_pow+0x94>
 8009a92:	f04f 0b00 	mov.w	fp, #0
 8009a96:	e7c1      	b.n	8009a1c <__ieee754_pow+0x94>
 8009a98:	f1b9 0f00 	cmp.w	r9, #0
 8009a9c:	dad2      	bge.n	8009a44 <__ieee754_pow+0xbc>
 8009a9e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009aa2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009aa6:	e7cf      	b.n	8009a48 <__ieee754_pow+0xc0>
 8009aa8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009aac:	d106      	bne.n	8009abc <__ieee754_pow+0x134>
 8009aae:	4632      	mov	r2, r6
 8009ab0:	463b      	mov	r3, r7
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	f7f6 fd4b 	bl	8000550 <__aeabi_dmul>
 8009aba:	e7c5      	b.n	8009a48 <__ieee754_pow+0xc0>
 8009abc:	4b39      	ldr	r3, [pc, #228]	; (8009ba4 <__ieee754_pow+0x21c>)
 8009abe:	4599      	cmp	r9, r3
 8009ac0:	d10a      	bne.n	8009ad8 <__ieee754_pow+0x150>
 8009ac2:	2d00      	cmp	r5, #0
 8009ac4:	db08      	blt.n	8009ad8 <__ieee754_pow+0x150>
 8009ac6:	ec47 6b10 	vmov	d0, r6, r7
 8009aca:	b011      	add	sp, #68	; 0x44
 8009acc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad0:	f000 bc68 	b.w	800a3a4 <__ieee754_sqrt>
 8009ad4:	f04f 0b00 	mov.w	fp, #0
 8009ad8:	ec47 6b10 	vmov	d0, r6, r7
 8009adc:	f7ff fd80 	bl	80095e0 <fabs>
 8009ae0:	ec51 0b10 	vmov	r0, r1, d0
 8009ae4:	f1ba 0f00 	cmp.w	sl, #0
 8009ae8:	d127      	bne.n	8009b3a <__ieee754_pow+0x1b2>
 8009aea:	b124      	cbz	r4, 8009af6 <__ieee754_pow+0x16e>
 8009aec:	4b2c      	ldr	r3, [pc, #176]	; (8009ba0 <__ieee754_pow+0x218>)
 8009aee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d121      	bne.n	8009b3a <__ieee754_pow+0x1b2>
 8009af6:	f1b9 0f00 	cmp.w	r9, #0
 8009afa:	da05      	bge.n	8009b08 <__ieee754_pow+0x180>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	2000      	movs	r0, #0
 8009b02:	4927      	ldr	r1, [pc, #156]	; (8009ba0 <__ieee754_pow+0x218>)
 8009b04:	f7f6 fe4e 	bl	80007a4 <__aeabi_ddiv>
 8009b08:	2d00      	cmp	r5, #0
 8009b0a:	da9d      	bge.n	8009a48 <__ieee754_pow+0xc0>
 8009b0c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009b10:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009b14:	ea54 030b 	orrs.w	r3, r4, fp
 8009b18:	d108      	bne.n	8009b2c <__ieee754_pow+0x1a4>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4610      	mov	r0, r2
 8009b20:	4619      	mov	r1, r3
 8009b22:	f7f6 fb5d 	bl	80001e0 <__aeabi_dsub>
 8009b26:	4602      	mov	r2, r0
 8009b28:	460b      	mov	r3, r1
 8009b2a:	e7ac      	b.n	8009a86 <__ieee754_pow+0xfe>
 8009b2c:	f1bb 0f01 	cmp.w	fp, #1
 8009b30:	d18a      	bne.n	8009a48 <__ieee754_pow+0xc0>
 8009b32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b36:	4619      	mov	r1, r3
 8009b38:	e786      	b.n	8009a48 <__ieee754_pow+0xc0>
 8009b3a:	0fed      	lsrs	r5, r5, #31
 8009b3c:	1e6b      	subs	r3, r5, #1
 8009b3e:	930d      	str	r3, [sp, #52]	; 0x34
 8009b40:	ea5b 0303 	orrs.w	r3, fp, r3
 8009b44:	d102      	bne.n	8009b4c <__ieee754_pow+0x1c4>
 8009b46:	4632      	mov	r2, r6
 8009b48:	463b      	mov	r3, r7
 8009b4a:	e7e8      	b.n	8009b1e <__ieee754_pow+0x196>
 8009b4c:	4b16      	ldr	r3, [pc, #88]	; (8009ba8 <__ieee754_pow+0x220>)
 8009b4e:	4598      	cmp	r8, r3
 8009b50:	f340 80fe 	ble.w	8009d50 <__ieee754_pow+0x3c8>
 8009b54:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009b58:	4598      	cmp	r8, r3
 8009b5a:	dd0a      	ble.n	8009b72 <__ieee754_pow+0x1ea>
 8009b5c:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <__ieee754_pow+0x214>)
 8009b5e:	429c      	cmp	r4, r3
 8009b60:	dc0d      	bgt.n	8009b7e <__ieee754_pow+0x1f6>
 8009b62:	f1b9 0f00 	cmp.w	r9, #0
 8009b66:	f6bf af6d 	bge.w	8009a44 <__ieee754_pow+0xbc>
 8009b6a:	a307      	add	r3, pc, #28	; (adr r3, 8009b88 <__ieee754_pow+0x200>)
 8009b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b70:	e79f      	b.n	8009ab2 <__ieee754_pow+0x12a>
 8009b72:	4b0e      	ldr	r3, [pc, #56]	; (8009bac <__ieee754_pow+0x224>)
 8009b74:	429c      	cmp	r4, r3
 8009b76:	ddf4      	ble.n	8009b62 <__ieee754_pow+0x1da>
 8009b78:	4b09      	ldr	r3, [pc, #36]	; (8009ba0 <__ieee754_pow+0x218>)
 8009b7a:	429c      	cmp	r4, r3
 8009b7c:	dd18      	ble.n	8009bb0 <__ieee754_pow+0x228>
 8009b7e:	f1b9 0f00 	cmp.w	r9, #0
 8009b82:	dcf2      	bgt.n	8009b6a <__ieee754_pow+0x1e2>
 8009b84:	e75e      	b.n	8009a44 <__ieee754_pow+0xbc>
 8009b86:	bf00      	nop
 8009b88:	8800759c 	.word	0x8800759c
 8009b8c:	7e37e43c 	.word	0x7e37e43c
 8009b90:	7ff00000 	.word	0x7ff00000
 8009b94:	0800a8bd 	.word	0x0800a8bd
 8009b98:	433fffff 	.word	0x433fffff
 8009b9c:	3fefffff 	.word	0x3fefffff
 8009ba0:	3ff00000 	.word	0x3ff00000
 8009ba4:	3fe00000 	.word	0x3fe00000
 8009ba8:	41e00000 	.word	0x41e00000
 8009bac:	3feffffe 	.word	0x3feffffe
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	4b63      	ldr	r3, [pc, #396]	; (8009d40 <__ieee754_pow+0x3b8>)
 8009bb4:	f7f6 fb14 	bl	80001e0 <__aeabi_dsub>
 8009bb8:	a355      	add	r3, pc, #340	; (adr r3, 8009d10 <__ieee754_pow+0x388>)
 8009bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	460d      	mov	r5, r1
 8009bc2:	f7f6 fcc5 	bl	8000550 <__aeabi_dmul>
 8009bc6:	a354      	add	r3, pc, #336	; (adr r3, 8009d18 <__ieee754_pow+0x390>)
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	4606      	mov	r6, r0
 8009bce:	460f      	mov	r7, r1
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	4629      	mov	r1, r5
 8009bd4:	f7f6 fcbc 	bl	8000550 <__aeabi_dmul>
 8009bd8:	2200      	movs	r2, #0
 8009bda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bde:	4b59      	ldr	r3, [pc, #356]	; (8009d44 <__ieee754_pow+0x3bc>)
 8009be0:	4620      	mov	r0, r4
 8009be2:	4629      	mov	r1, r5
 8009be4:	f7f6 fcb4 	bl	8000550 <__aeabi_dmul>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	a14c      	add	r1, pc, #304	; (adr r1, 8009d20 <__ieee754_pow+0x398>)
 8009bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bf2:	f7f6 faf5 	bl	80001e0 <__aeabi_dsub>
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	462b      	mov	r3, r5
 8009bfa:	f7f6 fca9 	bl	8000550 <__aeabi_dmul>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	2000      	movs	r0, #0
 8009c04:	4950      	ldr	r1, [pc, #320]	; (8009d48 <__ieee754_pow+0x3c0>)
 8009c06:	f7f6 faeb 	bl	80001e0 <__aeabi_dsub>
 8009c0a:	4622      	mov	r2, r4
 8009c0c:	462b      	mov	r3, r5
 8009c0e:	4680      	mov	r8, r0
 8009c10:	4689      	mov	r9, r1
 8009c12:	4620      	mov	r0, r4
 8009c14:	4629      	mov	r1, r5
 8009c16:	f7f6 fc9b 	bl	8000550 <__aeabi_dmul>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4640      	mov	r0, r8
 8009c20:	4649      	mov	r1, r9
 8009c22:	f7f6 fc95 	bl	8000550 <__aeabi_dmul>
 8009c26:	a340      	add	r3, pc, #256	; (adr r3, 8009d28 <__ieee754_pow+0x3a0>)
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	f7f6 fc90 	bl	8000550 <__aeabi_dmul>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c38:	f7f6 fad2 	bl	80001e0 <__aeabi_dsub>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	4604      	mov	r4, r0
 8009c42:	460d      	mov	r5, r1
 8009c44:	4630      	mov	r0, r6
 8009c46:	4639      	mov	r1, r7
 8009c48:	f7f6 facc 	bl	80001e4 <__adddf3>
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c52:	4632      	mov	r2, r6
 8009c54:	463b      	mov	r3, r7
 8009c56:	f7f6 fac3 	bl	80001e0 <__aeabi_dsub>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4620      	mov	r0, r4
 8009c60:	4629      	mov	r1, r5
 8009c62:	f7f6 fabd 	bl	80001e0 <__aeabi_dsub>
 8009c66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c68:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	4606      	mov	r6, r0
 8009c70:	460f      	mov	r7, r1
 8009c72:	f040 81eb 	bne.w	800a04c <__ieee754_pow+0x6c4>
 8009c76:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009d30 <__ieee754_pow+0x3a8>
 8009c7a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009c7e:	2400      	movs	r4, #0
 8009c80:	4622      	mov	r2, r4
 8009c82:	462b      	mov	r3, r5
 8009c84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c8c:	f7f6 faa8 	bl	80001e0 <__aeabi_dsub>
 8009c90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c94:	f7f6 fc5c 	bl	8000550 <__aeabi_dmul>
 8009c98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c9c:	4680      	mov	r8, r0
 8009c9e:	4689      	mov	r9, r1
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	4639      	mov	r1, r7
 8009ca4:	f7f6 fc54 	bl	8000550 <__aeabi_dmul>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	4640      	mov	r0, r8
 8009cae:	4649      	mov	r1, r9
 8009cb0:	f7f6 fa98 	bl	80001e4 <__adddf3>
 8009cb4:	4622      	mov	r2, r4
 8009cb6:	462b      	mov	r3, r5
 8009cb8:	4680      	mov	r8, r0
 8009cba:	4689      	mov	r9, r1
 8009cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cc0:	f7f6 fc46 	bl	8000550 <__aeabi_dmul>
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	460d      	mov	r5, r1
 8009cca:	4602      	mov	r2, r0
 8009ccc:	4649      	mov	r1, r9
 8009cce:	4640      	mov	r0, r8
 8009cd0:	e9cd 4500 	strd	r4, r5, [sp]
 8009cd4:	f7f6 fa86 	bl	80001e4 <__adddf3>
 8009cd8:	4b1c      	ldr	r3, [pc, #112]	; (8009d4c <__ieee754_pow+0x3c4>)
 8009cda:	4299      	cmp	r1, r3
 8009cdc:	4606      	mov	r6, r0
 8009cde:	460f      	mov	r7, r1
 8009ce0:	468b      	mov	fp, r1
 8009ce2:	f340 82f7 	ble.w	800a2d4 <__ieee754_pow+0x94c>
 8009ce6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009cea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009cee:	4303      	orrs	r3, r0
 8009cf0:	f000 81ea 	beq.w	800a0c8 <__ieee754_pow+0x740>
 8009cf4:	a310      	add	r3, pc, #64	; (adr r3, 8009d38 <__ieee754_pow+0x3b0>)
 8009cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cfe:	f7f6 fc27 	bl	8000550 <__aeabi_dmul>
 8009d02:	a30d      	add	r3, pc, #52	; (adr r3, 8009d38 <__ieee754_pow+0x3b0>)
 8009d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d08:	e6d5      	b.n	8009ab6 <__ieee754_pow+0x12e>
 8009d0a:	bf00      	nop
 8009d0c:	f3af 8000 	nop.w
 8009d10:	60000000 	.word	0x60000000
 8009d14:	3ff71547 	.word	0x3ff71547
 8009d18:	f85ddf44 	.word	0xf85ddf44
 8009d1c:	3e54ae0b 	.word	0x3e54ae0b
 8009d20:	55555555 	.word	0x55555555
 8009d24:	3fd55555 	.word	0x3fd55555
 8009d28:	652b82fe 	.word	0x652b82fe
 8009d2c:	3ff71547 	.word	0x3ff71547
 8009d30:	00000000 	.word	0x00000000
 8009d34:	bff00000 	.word	0xbff00000
 8009d38:	8800759c 	.word	0x8800759c
 8009d3c:	7e37e43c 	.word	0x7e37e43c
 8009d40:	3ff00000 	.word	0x3ff00000
 8009d44:	3fd00000 	.word	0x3fd00000
 8009d48:	3fe00000 	.word	0x3fe00000
 8009d4c:	408fffff 	.word	0x408fffff
 8009d50:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009d54:	f04f 0200 	mov.w	r2, #0
 8009d58:	da05      	bge.n	8009d66 <__ieee754_pow+0x3de>
 8009d5a:	4bd3      	ldr	r3, [pc, #844]	; (800a0a8 <__ieee754_pow+0x720>)
 8009d5c:	f7f6 fbf8 	bl	8000550 <__aeabi_dmul>
 8009d60:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009d64:	460c      	mov	r4, r1
 8009d66:	1523      	asrs	r3, r4, #20
 8009d68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009d6c:	4413      	add	r3, r2
 8009d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d70:	4bce      	ldr	r3, [pc, #824]	; (800a0ac <__ieee754_pow+0x724>)
 8009d72:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009d76:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009d7a:	429c      	cmp	r4, r3
 8009d7c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009d80:	dd08      	ble.n	8009d94 <__ieee754_pow+0x40c>
 8009d82:	4bcb      	ldr	r3, [pc, #812]	; (800a0b0 <__ieee754_pow+0x728>)
 8009d84:	429c      	cmp	r4, r3
 8009d86:	f340 815e 	ble.w	800a046 <__ieee754_pow+0x6be>
 8009d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d90:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009d94:	f04f 0a00 	mov.w	sl, #0
 8009d98:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009d9c:	930c      	str	r3, [sp, #48]	; 0x30
 8009d9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009da0:	4bc4      	ldr	r3, [pc, #784]	; (800a0b4 <__ieee754_pow+0x72c>)
 8009da2:	4413      	add	r3, r2
 8009da4:	ed93 7b00 	vldr	d7, [r3]
 8009da8:	4629      	mov	r1, r5
 8009daa:	ec53 2b17 	vmov	r2, r3, d7
 8009dae:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009db2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009db6:	f7f6 fa13 	bl	80001e0 <__aeabi_dsub>
 8009dba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	460f      	mov	r7, r1
 8009dc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dc6:	f7f6 fa0d 	bl	80001e4 <__adddf3>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	2000      	movs	r0, #0
 8009dd0:	49b9      	ldr	r1, [pc, #740]	; (800a0b8 <__ieee754_pow+0x730>)
 8009dd2:	f7f6 fce7 	bl	80007a4 <__aeabi_ddiv>
 8009dd6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009dda:	4602      	mov	r2, r0
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4630      	mov	r0, r6
 8009de0:	4639      	mov	r1, r7
 8009de2:	f7f6 fbb5 	bl	8000550 <__aeabi_dmul>
 8009de6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009dea:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009dee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009df2:	2300      	movs	r3, #0
 8009df4:	9302      	str	r3, [sp, #8]
 8009df6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009dfa:	106d      	asrs	r5, r5, #1
 8009dfc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009e00:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009e04:	2200      	movs	r2, #0
 8009e06:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009e0a:	4640      	mov	r0, r8
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	4614      	mov	r4, r2
 8009e10:	461d      	mov	r5, r3
 8009e12:	f7f6 fb9d 	bl	8000550 <__aeabi_dmul>
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	f7f6 f9df 	bl	80001e0 <__aeabi_dsub>
 8009e22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e26:	4606      	mov	r6, r0
 8009e28:	460f      	mov	r7, r1
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	4629      	mov	r1, r5
 8009e2e:	f7f6 f9d7 	bl	80001e0 <__aeabi_dsub>
 8009e32:	4602      	mov	r2, r0
 8009e34:	460b      	mov	r3, r1
 8009e36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e3a:	f7f6 f9d1 	bl	80001e0 <__aeabi_dsub>
 8009e3e:	4642      	mov	r2, r8
 8009e40:	464b      	mov	r3, r9
 8009e42:	f7f6 fb85 	bl	8000550 <__aeabi_dmul>
 8009e46:	4602      	mov	r2, r0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	4630      	mov	r0, r6
 8009e4c:	4639      	mov	r1, r7
 8009e4e:	f7f6 f9c7 	bl	80001e0 <__aeabi_dsub>
 8009e52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009e56:	f7f6 fb7b 	bl	8000550 <__aeabi_dmul>
 8009e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009e62:	4610      	mov	r0, r2
 8009e64:	4619      	mov	r1, r3
 8009e66:	f7f6 fb73 	bl	8000550 <__aeabi_dmul>
 8009e6a:	a37b      	add	r3, pc, #492	; (adr r3, 800a058 <__ieee754_pow+0x6d0>)
 8009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e70:	4604      	mov	r4, r0
 8009e72:	460d      	mov	r5, r1
 8009e74:	f7f6 fb6c 	bl	8000550 <__aeabi_dmul>
 8009e78:	a379      	add	r3, pc, #484	; (adr r3, 800a060 <__ieee754_pow+0x6d8>)
 8009e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7e:	f7f6 f9b1 	bl	80001e4 <__adddf3>
 8009e82:	4622      	mov	r2, r4
 8009e84:	462b      	mov	r3, r5
 8009e86:	f7f6 fb63 	bl	8000550 <__aeabi_dmul>
 8009e8a:	a377      	add	r3, pc, #476	; (adr r3, 800a068 <__ieee754_pow+0x6e0>)
 8009e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e90:	f7f6 f9a8 	bl	80001e4 <__adddf3>
 8009e94:	4622      	mov	r2, r4
 8009e96:	462b      	mov	r3, r5
 8009e98:	f7f6 fb5a 	bl	8000550 <__aeabi_dmul>
 8009e9c:	a374      	add	r3, pc, #464	; (adr r3, 800a070 <__ieee754_pow+0x6e8>)
 8009e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea2:	f7f6 f99f 	bl	80001e4 <__adddf3>
 8009ea6:	4622      	mov	r2, r4
 8009ea8:	462b      	mov	r3, r5
 8009eaa:	f7f6 fb51 	bl	8000550 <__aeabi_dmul>
 8009eae:	a372      	add	r3, pc, #456	; (adr r3, 800a078 <__ieee754_pow+0x6f0>)
 8009eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb4:	f7f6 f996 	bl	80001e4 <__adddf3>
 8009eb8:	4622      	mov	r2, r4
 8009eba:	462b      	mov	r3, r5
 8009ebc:	f7f6 fb48 	bl	8000550 <__aeabi_dmul>
 8009ec0:	a36f      	add	r3, pc, #444	; (adr r3, 800a080 <__ieee754_pow+0x6f8>)
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	f7f6 f98d 	bl	80001e4 <__adddf3>
 8009eca:	4622      	mov	r2, r4
 8009ecc:	4606      	mov	r6, r0
 8009ece:	460f      	mov	r7, r1
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	f7f6 fb3b 	bl	8000550 <__aeabi_dmul>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4630      	mov	r0, r6
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	f7f6 fb35 	bl	8000550 <__aeabi_dmul>
 8009ee6:	4642      	mov	r2, r8
 8009ee8:	4604      	mov	r4, r0
 8009eea:	460d      	mov	r5, r1
 8009eec:	464b      	mov	r3, r9
 8009eee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ef2:	f7f6 f977 	bl	80001e4 <__adddf3>
 8009ef6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009efa:	f7f6 fb29 	bl	8000550 <__aeabi_dmul>
 8009efe:	4622      	mov	r2, r4
 8009f00:	462b      	mov	r3, r5
 8009f02:	f7f6 f96f 	bl	80001e4 <__adddf3>
 8009f06:	4642      	mov	r2, r8
 8009f08:	4606      	mov	r6, r0
 8009f0a:	460f      	mov	r7, r1
 8009f0c:	464b      	mov	r3, r9
 8009f0e:	4640      	mov	r0, r8
 8009f10:	4649      	mov	r1, r9
 8009f12:	f7f6 fb1d 	bl	8000550 <__aeabi_dmul>
 8009f16:	2200      	movs	r2, #0
 8009f18:	4b68      	ldr	r3, [pc, #416]	; (800a0bc <__ieee754_pow+0x734>)
 8009f1a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009f1e:	f7f6 f961 	bl	80001e4 <__adddf3>
 8009f22:	4632      	mov	r2, r6
 8009f24:	463b      	mov	r3, r7
 8009f26:	f7f6 f95d 	bl	80001e4 <__adddf3>
 8009f2a:	9802      	ldr	r0, [sp, #8]
 8009f2c:	460d      	mov	r5, r1
 8009f2e:	4604      	mov	r4, r0
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	4640      	mov	r0, r8
 8009f36:	4649      	mov	r1, r9
 8009f38:	f7f6 fb0a 	bl	8000550 <__aeabi_dmul>
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	4680      	mov	r8, r0
 8009f40:	4689      	mov	r9, r1
 8009f42:	4b5e      	ldr	r3, [pc, #376]	; (800a0bc <__ieee754_pow+0x734>)
 8009f44:	4620      	mov	r0, r4
 8009f46:	4629      	mov	r1, r5
 8009f48:	f7f6 f94a 	bl	80001e0 <__aeabi_dsub>
 8009f4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009f50:	f7f6 f946 	bl	80001e0 <__aeabi_dsub>
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	4630      	mov	r0, r6
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	f7f6 f940 	bl	80001e0 <__aeabi_dsub>
 8009f60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f64:	f7f6 faf4 	bl	8000550 <__aeabi_dmul>
 8009f68:	4622      	mov	r2, r4
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	460f      	mov	r7, r1
 8009f6e:	462b      	mov	r3, r5
 8009f70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f74:	f7f6 faec 	bl	8000550 <__aeabi_dmul>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	4639      	mov	r1, r7
 8009f80:	f7f6 f930 	bl	80001e4 <__adddf3>
 8009f84:	4606      	mov	r6, r0
 8009f86:	460f      	mov	r7, r1
 8009f88:	4602      	mov	r2, r0
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	4640      	mov	r0, r8
 8009f8e:	4649      	mov	r1, r9
 8009f90:	f7f6 f928 	bl	80001e4 <__adddf3>
 8009f94:	9802      	ldr	r0, [sp, #8]
 8009f96:	a33c      	add	r3, pc, #240	; (adr r3, 800a088 <__ieee754_pow+0x700>)
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	460d      	mov	r5, r1
 8009fa0:	f7f6 fad6 	bl	8000550 <__aeabi_dmul>
 8009fa4:	4642      	mov	r2, r8
 8009fa6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009faa:	464b      	mov	r3, r9
 8009fac:	4620      	mov	r0, r4
 8009fae:	4629      	mov	r1, r5
 8009fb0:	f7f6 f916 	bl	80001e0 <__aeabi_dsub>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4630      	mov	r0, r6
 8009fba:	4639      	mov	r1, r7
 8009fbc:	f7f6 f910 	bl	80001e0 <__aeabi_dsub>
 8009fc0:	a333      	add	r3, pc, #204	; (adr r3, 800a090 <__ieee754_pow+0x708>)
 8009fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc6:	f7f6 fac3 	bl	8000550 <__aeabi_dmul>
 8009fca:	a333      	add	r3, pc, #204	; (adr r3, 800a098 <__ieee754_pow+0x710>)
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	4606      	mov	r6, r0
 8009fd2:	460f      	mov	r7, r1
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	f7f6 faba 	bl	8000550 <__aeabi_dmul>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	f7f6 f8fe 	bl	80001e4 <__adddf3>
 8009fe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fea:	4b35      	ldr	r3, [pc, #212]	; (800a0c0 <__ieee754_pow+0x738>)
 8009fec:	4413      	add	r3, r2
 8009fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff2:	f7f6 f8f7 	bl	80001e4 <__adddf3>
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ffa:	460d      	mov	r5, r1
 8009ffc:	f7f6 fa3e 	bl	800047c <__aeabi_i2d>
 800a000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a002:	4b30      	ldr	r3, [pc, #192]	; (800a0c4 <__ieee754_pow+0x73c>)
 800a004:	4413      	add	r3, r2
 800a006:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a00a:	4606      	mov	r6, r0
 800a00c:	460f      	mov	r7, r1
 800a00e:	4622      	mov	r2, r4
 800a010:	462b      	mov	r3, r5
 800a012:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a016:	f7f6 f8e5 	bl	80001e4 <__adddf3>
 800a01a:	4642      	mov	r2, r8
 800a01c:	464b      	mov	r3, r9
 800a01e:	f7f6 f8e1 	bl	80001e4 <__adddf3>
 800a022:	4632      	mov	r2, r6
 800a024:	463b      	mov	r3, r7
 800a026:	f7f6 f8dd 	bl	80001e4 <__adddf3>
 800a02a:	9802      	ldr	r0, [sp, #8]
 800a02c:	4632      	mov	r2, r6
 800a02e:	463b      	mov	r3, r7
 800a030:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a034:	f7f6 f8d4 	bl	80001e0 <__aeabi_dsub>
 800a038:	4642      	mov	r2, r8
 800a03a:	464b      	mov	r3, r9
 800a03c:	f7f6 f8d0 	bl	80001e0 <__aeabi_dsub>
 800a040:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a044:	e607      	b.n	8009c56 <__ieee754_pow+0x2ce>
 800a046:	f04f 0a01 	mov.w	sl, #1
 800a04a:	e6a5      	b.n	8009d98 <__ieee754_pow+0x410>
 800a04c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a0a0 <__ieee754_pow+0x718>
 800a050:	e613      	b.n	8009c7a <__ieee754_pow+0x2f2>
 800a052:	bf00      	nop
 800a054:	f3af 8000 	nop.w
 800a058:	4a454eef 	.word	0x4a454eef
 800a05c:	3fca7e28 	.word	0x3fca7e28
 800a060:	93c9db65 	.word	0x93c9db65
 800a064:	3fcd864a 	.word	0x3fcd864a
 800a068:	a91d4101 	.word	0xa91d4101
 800a06c:	3fd17460 	.word	0x3fd17460
 800a070:	518f264d 	.word	0x518f264d
 800a074:	3fd55555 	.word	0x3fd55555
 800a078:	db6fabff 	.word	0xdb6fabff
 800a07c:	3fdb6db6 	.word	0x3fdb6db6
 800a080:	33333303 	.word	0x33333303
 800a084:	3fe33333 	.word	0x3fe33333
 800a088:	e0000000 	.word	0xe0000000
 800a08c:	3feec709 	.word	0x3feec709
 800a090:	dc3a03fd 	.word	0xdc3a03fd
 800a094:	3feec709 	.word	0x3feec709
 800a098:	145b01f5 	.word	0x145b01f5
 800a09c:	be3e2fe0 	.word	0xbe3e2fe0
 800a0a0:	00000000 	.word	0x00000000
 800a0a4:	3ff00000 	.word	0x3ff00000
 800a0a8:	43400000 	.word	0x43400000
 800a0ac:	0003988e 	.word	0x0003988e
 800a0b0:	000bb679 	.word	0x000bb679
 800a0b4:	0800aa10 	.word	0x0800aa10
 800a0b8:	3ff00000 	.word	0x3ff00000
 800a0bc:	40080000 	.word	0x40080000
 800a0c0:	0800aa30 	.word	0x0800aa30
 800a0c4:	0800aa20 	.word	0x0800aa20
 800a0c8:	a3b4      	add	r3, pc, #720	; (adr r3, 800a39c <__ieee754_pow+0xa14>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	f7f6 f887 	bl	80001e4 <__adddf3>
 800a0d6:	4622      	mov	r2, r4
 800a0d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0dc:	462b      	mov	r3, r5
 800a0de:	4630      	mov	r0, r6
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	f7f6 f87d 	bl	80001e0 <__aeabi_dsub>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0ee:	f7f6 fcbf 	bl	8000a70 <__aeabi_dcmpgt>
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	f47f adfe 	bne.w	8009cf4 <__ieee754_pow+0x36c>
 800a0f8:	4aa3      	ldr	r2, [pc, #652]	; (800a388 <__ieee754_pow+0xa00>)
 800a0fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0fe:	4293      	cmp	r3, r2
 800a100:	f340 810a 	ble.w	800a318 <__ieee754_pow+0x990>
 800a104:	151b      	asrs	r3, r3, #20
 800a106:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a10a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a10e:	fa4a f303 	asr.w	r3, sl, r3
 800a112:	445b      	add	r3, fp
 800a114:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a118:	4e9c      	ldr	r6, [pc, #624]	; (800a38c <__ieee754_pow+0xa04>)
 800a11a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a11e:	4116      	asrs	r6, r2
 800a120:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a124:	2000      	movs	r0, #0
 800a126:	ea23 0106 	bic.w	r1, r3, r6
 800a12a:	f1c2 0214 	rsb	r2, r2, #20
 800a12e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a132:	fa4a fa02 	asr.w	sl, sl, r2
 800a136:	f1bb 0f00 	cmp.w	fp, #0
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	4620      	mov	r0, r4
 800a140:	4629      	mov	r1, r5
 800a142:	bfb8      	it	lt
 800a144:	f1ca 0a00 	rsblt	sl, sl, #0
 800a148:	f7f6 f84a 	bl	80001e0 <__aeabi_dsub>
 800a14c:	e9cd 0100 	strd	r0, r1, [sp]
 800a150:	4642      	mov	r2, r8
 800a152:	464b      	mov	r3, r9
 800a154:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a158:	f7f6 f844 	bl	80001e4 <__adddf3>
 800a15c:	2000      	movs	r0, #0
 800a15e:	a378      	add	r3, pc, #480	; (adr r3, 800a340 <__ieee754_pow+0x9b8>)
 800a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a164:	4604      	mov	r4, r0
 800a166:	460d      	mov	r5, r1
 800a168:	f7f6 f9f2 	bl	8000550 <__aeabi_dmul>
 800a16c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a170:	4606      	mov	r6, r0
 800a172:	460f      	mov	r7, r1
 800a174:	4620      	mov	r0, r4
 800a176:	4629      	mov	r1, r5
 800a178:	f7f6 f832 	bl	80001e0 <__aeabi_dsub>
 800a17c:	4602      	mov	r2, r0
 800a17e:	460b      	mov	r3, r1
 800a180:	4640      	mov	r0, r8
 800a182:	4649      	mov	r1, r9
 800a184:	f7f6 f82c 	bl	80001e0 <__aeabi_dsub>
 800a188:	a36f      	add	r3, pc, #444	; (adr r3, 800a348 <__ieee754_pow+0x9c0>)
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	f7f6 f9df 	bl	8000550 <__aeabi_dmul>
 800a192:	a36f      	add	r3, pc, #444	; (adr r3, 800a350 <__ieee754_pow+0x9c8>)
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	4680      	mov	r8, r0
 800a19a:	4689      	mov	r9, r1
 800a19c:	4620      	mov	r0, r4
 800a19e:	4629      	mov	r1, r5
 800a1a0:	f7f6 f9d6 	bl	8000550 <__aeabi_dmul>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	4640      	mov	r0, r8
 800a1aa:	4649      	mov	r1, r9
 800a1ac:	f7f6 f81a 	bl	80001e4 <__adddf3>
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	460d      	mov	r5, r1
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	4639      	mov	r1, r7
 800a1bc:	f7f6 f812 	bl	80001e4 <__adddf3>
 800a1c0:	4632      	mov	r2, r6
 800a1c2:	463b      	mov	r3, r7
 800a1c4:	4680      	mov	r8, r0
 800a1c6:	4689      	mov	r9, r1
 800a1c8:	f7f6 f80a 	bl	80001e0 <__aeabi_dsub>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	f7f6 f804 	bl	80001e0 <__aeabi_dsub>
 800a1d8:	4642      	mov	r2, r8
 800a1da:	4606      	mov	r6, r0
 800a1dc:	460f      	mov	r7, r1
 800a1de:	464b      	mov	r3, r9
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	f7f6 f9b4 	bl	8000550 <__aeabi_dmul>
 800a1e8:	a35b      	add	r3, pc, #364	; (adr r3, 800a358 <__ieee754_pow+0x9d0>)
 800a1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	460d      	mov	r5, r1
 800a1f2:	f7f6 f9ad 	bl	8000550 <__aeabi_dmul>
 800a1f6:	a35a      	add	r3, pc, #360	; (adr r3, 800a360 <__ieee754_pow+0x9d8>)
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f7f5 fff0 	bl	80001e0 <__aeabi_dsub>
 800a200:	4622      	mov	r2, r4
 800a202:	462b      	mov	r3, r5
 800a204:	f7f6 f9a4 	bl	8000550 <__aeabi_dmul>
 800a208:	a357      	add	r3, pc, #348	; (adr r3, 800a368 <__ieee754_pow+0x9e0>)
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f7f5 ffe9 	bl	80001e4 <__adddf3>
 800a212:	4622      	mov	r2, r4
 800a214:	462b      	mov	r3, r5
 800a216:	f7f6 f99b 	bl	8000550 <__aeabi_dmul>
 800a21a:	a355      	add	r3, pc, #340	; (adr r3, 800a370 <__ieee754_pow+0x9e8>)
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	f7f5 ffde 	bl	80001e0 <__aeabi_dsub>
 800a224:	4622      	mov	r2, r4
 800a226:	462b      	mov	r3, r5
 800a228:	f7f6 f992 	bl	8000550 <__aeabi_dmul>
 800a22c:	a352      	add	r3, pc, #328	; (adr r3, 800a378 <__ieee754_pow+0x9f0>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	f7f5 ffd7 	bl	80001e4 <__adddf3>
 800a236:	4622      	mov	r2, r4
 800a238:	462b      	mov	r3, r5
 800a23a:	f7f6 f989 	bl	8000550 <__aeabi_dmul>
 800a23e:	4602      	mov	r2, r0
 800a240:	460b      	mov	r3, r1
 800a242:	4640      	mov	r0, r8
 800a244:	4649      	mov	r1, r9
 800a246:	f7f5 ffcb 	bl	80001e0 <__aeabi_dsub>
 800a24a:	4604      	mov	r4, r0
 800a24c:	460d      	mov	r5, r1
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	4640      	mov	r0, r8
 800a254:	4649      	mov	r1, r9
 800a256:	f7f6 f97b 	bl	8000550 <__aeabi_dmul>
 800a25a:	2200      	movs	r2, #0
 800a25c:	e9cd 0100 	strd	r0, r1, [sp]
 800a260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a264:	4620      	mov	r0, r4
 800a266:	4629      	mov	r1, r5
 800a268:	f7f5 ffba 	bl	80001e0 <__aeabi_dsub>
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a274:	f7f6 fa96 	bl	80007a4 <__aeabi_ddiv>
 800a278:	4632      	mov	r2, r6
 800a27a:	4604      	mov	r4, r0
 800a27c:	460d      	mov	r5, r1
 800a27e:	463b      	mov	r3, r7
 800a280:	4640      	mov	r0, r8
 800a282:	4649      	mov	r1, r9
 800a284:	f7f6 f964 	bl	8000550 <__aeabi_dmul>
 800a288:	4632      	mov	r2, r6
 800a28a:	463b      	mov	r3, r7
 800a28c:	f7f5 ffaa 	bl	80001e4 <__adddf3>
 800a290:	4602      	mov	r2, r0
 800a292:	460b      	mov	r3, r1
 800a294:	4620      	mov	r0, r4
 800a296:	4629      	mov	r1, r5
 800a298:	f7f5 ffa2 	bl	80001e0 <__aeabi_dsub>
 800a29c:	4642      	mov	r2, r8
 800a29e:	464b      	mov	r3, r9
 800a2a0:	f7f5 ff9e 	bl	80001e0 <__aeabi_dsub>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	2000      	movs	r0, #0
 800a2aa:	4939      	ldr	r1, [pc, #228]	; (800a390 <__ieee754_pow+0xa08>)
 800a2ac:	f7f5 ff98 	bl	80001e0 <__aeabi_dsub>
 800a2b0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a2b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	da2f      	bge.n	800a31e <__ieee754_pow+0x996>
 800a2be:	4650      	mov	r0, sl
 800a2c0:	ec43 2b10 	vmov	d0, r2, r3
 800a2c4:	f000 f9b4 	bl	800a630 <scalbn>
 800a2c8:	ec51 0b10 	vmov	r0, r1, d0
 800a2cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2d0:	f7ff bbf1 	b.w	8009ab6 <__ieee754_pow+0x12e>
 800a2d4:	4b2f      	ldr	r3, [pc, #188]	; (800a394 <__ieee754_pow+0xa0c>)
 800a2d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a2da:	429e      	cmp	r6, r3
 800a2dc:	f77f af0c 	ble.w	800a0f8 <__ieee754_pow+0x770>
 800a2e0:	4b2d      	ldr	r3, [pc, #180]	; (800a398 <__ieee754_pow+0xa10>)
 800a2e2:	440b      	add	r3, r1
 800a2e4:	4303      	orrs	r3, r0
 800a2e6:	d00b      	beq.n	800a300 <__ieee754_pow+0x978>
 800a2e8:	a325      	add	r3, pc, #148	; (adr r3, 800a380 <__ieee754_pow+0x9f8>)
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2f2:	f7f6 f92d 	bl	8000550 <__aeabi_dmul>
 800a2f6:	a322      	add	r3, pc, #136	; (adr r3, 800a380 <__ieee754_pow+0x9f8>)
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f7ff bbdb 	b.w	8009ab6 <__ieee754_pow+0x12e>
 800a300:	4622      	mov	r2, r4
 800a302:	462b      	mov	r3, r5
 800a304:	f7f5 ff6c 	bl	80001e0 <__aeabi_dsub>
 800a308:	4642      	mov	r2, r8
 800a30a:	464b      	mov	r3, r9
 800a30c:	f7f6 fba6 	bl	8000a5c <__aeabi_dcmpge>
 800a310:	2800      	cmp	r0, #0
 800a312:	f43f aef1 	beq.w	800a0f8 <__ieee754_pow+0x770>
 800a316:	e7e7      	b.n	800a2e8 <__ieee754_pow+0x960>
 800a318:	f04f 0a00 	mov.w	sl, #0
 800a31c:	e718      	b.n	800a150 <__ieee754_pow+0x7c8>
 800a31e:	4621      	mov	r1, r4
 800a320:	e7d4      	b.n	800a2cc <__ieee754_pow+0x944>
 800a322:	2000      	movs	r0, #0
 800a324:	491a      	ldr	r1, [pc, #104]	; (800a390 <__ieee754_pow+0xa08>)
 800a326:	f7ff bb8f 	b.w	8009a48 <__ieee754_pow+0xc0>
 800a32a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a32e:	f7ff bb8b 	b.w	8009a48 <__ieee754_pow+0xc0>
 800a332:	4630      	mov	r0, r6
 800a334:	4639      	mov	r1, r7
 800a336:	f7ff bb87 	b.w	8009a48 <__ieee754_pow+0xc0>
 800a33a:	4693      	mov	fp, r2
 800a33c:	f7ff bb98 	b.w	8009a70 <__ieee754_pow+0xe8>
 800a340:	00000000 	.word	0x00000000
 800a344:	3fe62e43 	.word	0x3fe62e43
 800a348:	fefa39ef 	.word	0xfefa39ef
 800a34c:	3fe62e42 	.word	0x3fe62e42
 800a350:	0ca86c39 	.word	0x0ca86c39
 800a354:	be205c61 	.word	0xbe205c61
 800a358:	72bea4d0 	.word	0x72bea4d0
 800a35c:	3e663769 	.word	0x3e663769
 800a360:	c5d26bf1 	.word	0xc5d26bf1
 800a364:	3ebbbd41 	.word	0x3ebbbd41
 800a368:	af25de2c 	.word	0xaf25de2c
 800a36c:	3f11566a 	.word	0x3f11566a
 800a370:	16bebd93 	.word	0x16bebd93
 800a374:	3f66c16c 	.word	0x3f66c16c
 800a378:	5555553e 	.word	0x5555553e
 800a37c:	3fc55555 	.word	0x3fc55555
 800a380:	c2f8f359 	.word	0xc2f8f359
 800a384:	01a56e1f 	.word	0x01a56e1f
 800a388:	3fe00000 	.word	0x3fe00000
 800a38c:	000fffff 	.word	0x000fffff
 800a390:	3ff00000 	.word	0x3ff00000
 800a394:	4090cbff 	.word	0x4090cbff
 800a398:	3f6f3400 	.word	0x3f6f3400
 800a39c:	652b82fe 	.word	0x652b82fe
 800a3a0:	3c971547 	.word	0x3c971547

0800a3a4 <__ieee754_sqrt>:
 800a3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a8:	4955      	ldr	r1, [pc, #340]	; (800a500 <__ieee754_sqrt+0x15c>)
 800a3aa:	ec55 4b10 	vmov	r4, r5, d0
 800a3ae:	43a9      	bics	r1, r5
 800a3b0:	462b      	mov	r3, r5
 800a3b2:	462a      	mov	r2, r5
 800a3b4:	d112      	bne.n	800a3dc <__ieee754_sqrt+0x38>
 800a3b6:	ee10 2a10 	vmov	r2, s0
 800a3ba:	ee10 0a10 	vmov	r0, s0
 800a3be:	4629      	mov	r1, r5
 800a3c0:	f7f6 f8c6 	bl	8000550 <__aeabi_dmul>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	f7f5 ff0a 	bl	80001e4 <__adddf3>
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	460d      	mov	r5, r1
 800a3d4:	ec45 4b10 	vmov	d0, r4, r5
 800a3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3dc:	2d00      	cmp	r5, #0
 800a3de:	ee10 0a10 	vmov	r0, s0
 800a3e2:	4621      	mov	r1, r4
 800a3e4:	dc0f      	bgt.n	800a406 <__ieee754_sqrt+0x62>
 800a3e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a3ea:	4330      	orrs	r0, r6
 800a3ec:	d0f2      	beq.n	800a3d4 <__ieee754_sqrt+0x30>
 800a3ee:	b155      	cbz	r5, 800a406 <__ieee754_sqrt+0x62>
 800a3f0:	ee10 2a10 	vmov	r2, s0
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	f7f5 fef2 	bl	80001e0 <__aeabi_dsub>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	f7f6 f9d0 	bl	80007a4 <__aeabi_ddiv>
 800a404:	e7e4      	b.n	800a3d0 <__ieee754_sqrt+0x2c>
 800a406:	151b      	asrs	r3, r3, #20
 800a408:	d073      	beq.n	800a4f2 <__ieee754_sqrt+0x14e>
 800a40a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a40e:	07dd      	lsls	r5, r3, #31
 800a410:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a414:	bf48      	it	mi
 800a416:	0fc8      	lsrmi	r0, r1, #31
 800a418:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a41c:	bf44      	itt	mi
 800a41e:	0049      	lslmi	r1, r1, #1
 800a420:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a424:	2500      	movs	r5, #0
 800a426:	1058      	asrs	r0, r3, #1
 800a428:	0fcb      	lsrs	r3, r1, #31
 800a42a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a42e:	0049      	lsls	r1, r1, #1
 800a430:	2316      	movs	r3, #22
 800a432:	462c      	mov	r4, r5
 800a434:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a438:	19a7      	adds	r7, r4, r6
 800a43a:	4297      	cmp	r7, r2
 800a43c:	bfde      	ittt	le
 800a43e:	19bc      	addle	r4, r7, r6
 800a440:	1bd2      	suble	r2, r2, r7
 800a442:	19ad      	addle	r5, r5, r6
 800a444:	0fcf      	lsrs	r7, r1, #31
 800a446:	3b01      	subs	r3, #1
 800a448:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a44c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a450:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a454:	d1f0      	bne.n	800a438 <__ieee754_sqrt+0x94>
 800a456:	f04f 0c20 	mov.w	ip, #32
 800a45a:	469e      	mov	lr, r3
 800a45c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a460:	42a2      	cmp	r2, r4
 800a462:	eb06 070e 	add.w	r7, r6, lr
 800a466:	dc02      	bgt.n	800a46e <__ieee754_sqrt+0xca>
 800a468:	d112      	bne.n	800a490 <__ieee754_sqrt+0xec>
 800a46a:	428f      	cmp	r7, r1
 800a46c:	d810      	bhi.n	800a490 <__ieee754_sqrt+0xec>
 800a46e:	2f00      	cmp	r7, #0
 800a470:	eb07 0e06 	add.w	lr, r7, r6
 800a474:	da42      	bge.n	800a4fc <__ieee754_sqrt+0x158>
 800a476:	f1be 0f00 	cmp.w	lr, #0
 800a47a:	db3f      	blt.n	800a4fc <__ieee754_sqrt+0x158>
 800a47c:	f104 0801 	add.w	r8, r4, #1
 800a480:	1b12      	subs	r2, r2, r4
 800a482:	428f      	cmp	r7, r1
 800a484:	bf88      	it	hi
 800a486:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a48a:	1bc9      	subs	r1, r1, r7
 800a48c:	4433      	add	r3, r6
 800a48e:	4644      	mov	r4, r8
 800a490:	0052      	lsls	r2, r2, #1
 800a492:	f1bc 0c01 	subs.w	ip, ip, #1
 800a496:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a49a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a49e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a4a2:	d1dd      	bne.n	800a460 <__ieee754_sqrt+0xbc>
 800a4a4:	430a      	orrs	r2, r1
 800a4a6:	d006      	beq.n	800a4b6 <__ieee754_sqrt+0x112>
 800a4a8:	1c5c      	adds	r4, r3, #1
 800a4aa:	bf13      	iteet	ne
 800a4ac:	3301      	addne	r3, #1
 800a4ae:	3501      	addeq	r5, #1
 800a4b0:	4663      	moveq	r3, ip
 800a4b2:	f023 0301 	bicne.w	r3, r3, #1
 800a4b6:	106a      	asrs	r2, r5, #1
 800a4b8:	085b      	lsrs	r3, r3, #1
 800a4ba:	07e9      	lsls	r1, r5, #31
 800a4bc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a4c0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a4c4:	bf48      	it	mi
 800a4c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a4ca:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a4ce:	461c      	mov	r4, r3
 800a4d0:	e780      	b.n	800a3d4 <__ieee754_sqrt+0x30>
 800a4d2:	0aca      	lsrs	r2, r1, #11
 800a4d4:	3815      	subs	r0, #21
 800a4d6:	0549      	lsls	r1, r1, #21
 800a4d8:	2a00      	cmp	r2, #0
 800a4da:	d0fa      	beq.n	800a4d2 <__ieee754_sqrt+0x12e>
 800a4dc:	02d6      	lsls	r6, r2, #11
 800a4de:	d50a      	bpl.n	800a4f6 <__ieee754_sqrt+0x152>
 800a4e0:	f1c3 0420 	rsb	r4, r3, #32
 800a4e4:	fa21 f404 	lsr.w	r4, r1, r4
 800a4e8:	1e5d      	subs	r5, r3, #1
 800a4ea:	4099      	lsls	r1, r3
 800a4ec:	4322      	orrs	r2, r4
 800a4ee:	1b43      	subs	r3, r0, r5
 800a4f0:	e78b      	b.n	800a40a <__ieee754_sqrt+0x66>
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	e7f0      	b.n	800a4d8 <__ieee754_sqrt+0x134>
 800a4f6:	0052      	lsls	r2, r2, #1
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	e7ef      	b.n	800a4dc <__ieee754_sqrt+0x138>
 800a4fc:	46a0      	mov	r8, r4
 800a4fe:	e7bf      	b.n	800a480 <__ieee754_sqrt+0xdc>
 800a500:	7ff00000 	.word	0x7ff00000

0800a504 <finite>:
 800a504:	ee10 3a90 	vmov	r3, s1
 800a508:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a50c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a510:	0fc0      	lsrs	r0, r0, #31
 800a512:	4770      	bx	lr

0800a514 <matherr>:
 800a514:	2000      	movs	r0, #0
 800a516:	4770      	bx	lr

0800a518 <nan>:
 800a518:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a520 <nan+0x8>
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	00000000 	.word	0x00000000
 800a524:	7ff80000 	.word	0x7ff80000

0800a528 <rint>:
 800a528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a52a:	ec51 0b10 	vmov	r0, r1, d0
 800a52e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a532:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a536:	2e13      	cmp	r6, #19
 800a538:	460b      	mov	r3, r1
 800a53a:	ee10 4a10 	vmov	r4, s0
 800a53e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a542:	dc56      	bgt.n	800a5f2 <rint+0xca>
 800a544:	2e00      	cmp	r6, #0
 800a546:	da2b      	bge.n	800a5a0 <rint+0x78>
 800a548:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a54c:	4302      	orrs	r2, r0
 800a54e:	d023      	beq.n	800a598 <rint+0x70>
 800a550:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a554:	4302      	orrs	r2, r0
 800a556:	4254      	negs	r4, r2
 800a558:	4314      	orrs	r4, r2
 800a55a:	0c4b      	lsrs	r3, r1, #17
 800a55c:	0b24      	lsrs	r4, r4, #12
 800a55e:	045b      	lsls	r3, r3, #17
 800a560:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a564:	ea44 0103 	orr.w	r1, r4, r3
 800a568:	460b      	mov	r3, r1
 800a56a:	492f      	ldr	r1, [pc, #188]	; (800a628 <rint+0x100>)
 800a56c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a570:	e9d1 6700 	ldrd	r6, r7, [r1]
 800a574:	4602      	mov	r2, r0
 800a576:	4639      	mov	r1, r7
 800a578:	4630      	mov	r0, r6
 800a57a:	f7f5 fe33 	bl	80001e4 <__adddf3>
 800a57e:	e9cd 0100 	strd	r0, r1, [sp]
 800a582:	463b      	mov	r3, r7
 800a584:	4632      	mov	r2, r6
 800a586:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a58a:	f7f5 fe29 	bl	80001e0 <__aeabi_dsub>
 800a58e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a592:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a596:	4639      	mov	r1, r7
 800a598:	ec41 0b10 	vmov	d0, r0, r1
 800a59c:	b003      	add	sp, #12
 800a59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5a0:	4a22      	ldr	r2, [pc, #136]	; (800a62c <rint+0x104>)
 800a5a2:	4132      	asrs	r2, r6
 800a5a4:	ea01 0702 	and.w	r7, r1, r2
 800a5a8:	4307      	orrs	r7, r0
 800a5aa:	d0f5      	beq.n	800a598 <rint+0x70>
 800a5ac:	0852      	lsrs	r2, r2, #1
 800a5ae:	4011      	ands	r1, r2
 800a5b0:	430c      	orrs	r4, r1
 800a5b2:	d00b      	beq.n	800a5cc <rint+0xa4>
 800a5b4:	ea23 0202 	bic.w	r2, r3, r2
 800a5b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a5bc:	2e13      	cmp	r6, #19
 800a5be:	fa43 f306 	asr.w	r3, r3, r6
 800a5c2:	bf0c      	ite	eq
 800a5c4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a5c8:	2400      	movne	r4, #0
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	4916      	ldr	r1, [pc, #88]	; (800a628 <rint+0x100>)
 800a5ce:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a5d2:	4622      	mov	r2, r4
 800a5d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a5d8:	4620      	mov	r0, r4
 800a5da:	4629      	mov	r1, r5
 800a5dc:	f7f5 fe02 	bl	80001e4 <__adddf3>
 800a5e0:	e9cd 0100 	strd	r0, r1, [sp]
 800a5e4:	4622      	mov	r2, r4
 800a5e6:	462b      	mov	r3, r5
 800a5e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5ec:	f7f5 fdf8 	bl	80001e0 <__aeabi_dsub>
 800a5f0:	e7d2      	b.n	800a598 <rint+0x70>
 800a5f2:	2e33      	cmp	r6, #51	; 0x33
 800a5f4:	dd07      	ble.n	800a606 <rint+0xde>
 800a5f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a5fa:	d1cd      	bne.n	800a598 <rint+0x70>
 800a5fc:	ee10 2a10 	vmov	r2, s0
 800a600:	f7f5 fdf0 	bl	80001e4 <__adddf3>
 800a604:	e7c8      	b.n	800a598 <rint+0x70>
 800a606:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800a60a:	f04f 32ff 	mov.w	r2, #4294967295
 800a60e:	40f2      	lsrs	r2, r6
 800a610:	4210      	tst	r0, r2
 800a612:	d0c1      	beq.n	800a598 <rint+0x70>
 800a614:	0852      	lsrs	r2, r2, #1
 800a616:	4210      	tst	r0, r2
 800a618:	bf1f      	itttt	ne
 800a61a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a61e:	ea20 0202 	bicne.w	r2, r0, r2
 800a622:	4134      	asrne	r4, r6
 800a624:	4314      	orrne	r4, r2
 800a626:	e7d1      	b.n	800a5cc <rint+0xa4>
 800a628:	0800aa40 	.word	0x0800aa40
 800a62c:	000fffff 	.word	0x000fffff

0800a630 <scalbn>:
 800a630:	b570      	push	{r4, r5, r6, lr}
 800a632:	ec55 4b10 	vmov	r4, r5, d0
 800a636:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a63a:	4606      	mov	r6, r0
 800a63c:	462b      	mov	r3, r5
 800a63e:	b9aa      	cbnz	r2, 800a66c <scalbn+0x3c>
 800a640:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a644:	4323      	orrs	r3, r4
 800a646:	d03b      	beq.n	800a6c0 <scalbn+0x90>
 800a648:	4b31      	ldr	r3, [pc, #196]	; (800a710 <scalbn+0xe0>)
 800a64a:	4629      	mov	r1, r5
 800a64c:	2200      	movs	r2, #0
 800a64e:	ee10 0a10 	vmov	r0, s0
 800a652:	f7f5 ff7d 	bl	8000550 <__aeabi_dmul>
 800a656:	4b2f      	ldr	r3, [pc, #188]	; (800a714 <scalbn+0xe4>)
 800a658:	429e      	cmp	r6, r3
 800a65a:	4604      	mov	r4, r0
 800a65c:	460d      	mov	r5, r1
 800a65e:	da12      	bge.n	800a686 <scalbn+0x56>
 800a660:	a327      	add	r3, pc, #156	; (adr r3, 800a700 <scalbn+0xd0>)
 800a662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a666:	f7f5 ff73 	bl	8000550 <__aeabi_dmul>
 800a66a:	e009      	b.n	800a680 <scalbn+0x50>
 800a66c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a670:	428a      	cmp	r2, r1
 800a672:	d10c      	bne.n	800a68e <scalbn+0x5e>
 800a674:	ee10 2a10 	vmov	r2, s0
 800a678:	4620      	mov	r0, r4
 800a67a:	4629      	mov	r1, r5
 800a67c:	f7f5 fdb2 	bl	80001e4 <__adddf3>
 800a680:	4604      	mov	r4, r0
 800a682:	460d      	mov	r5, r1
 800a684:	e01c      	b.n	800a6c0 <scalbn+0x90>
 800a686:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a68a:	460b      	mov	r3, r1
 800a68c:	3a36      	subs	r2, #54	; 0x36
 800a68e:	4432      	add	r2, r6
 800a690:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a694:	428a      	cmp	r2, r1
 800a696:	dd0b      	ble.n	800a6b0 <scalbn+0x80>
 800a698:	ec45 4b11 	vmov	d1, r4, r5
 800a69c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a708 <scalbn+0xd8>
 800a6a0:	f000 f83c 	bl	800a71c <copysign>
 800a6a4:	a318      	add	r3, pc, #96	; (adr r3, 800a708 <scalbn+0xd8>)
 800a6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6aa:	ec51 0b10 	vmov	r0, r1, d0
 800a6ae:	e7da      	b.n	800a666 <scalbn+0x36>
 800a6b0:	2a00      	cmp	r2, #0
 800a6b2:	dd08      	ble.n	800a6c6 <scalbn+0x96>
 800a6b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a6b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a6bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a6c0:	ec45 4b10 	vmov	d0, r4, r5
 800a6c4:	bd70      	pop	{r4, r5, r6, pc}
 800a6c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a6ca:	da0d      	bge.n	800a6e8 <scalbn+0xb8>
 800a6cc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a6d0:	429e      	cmp	r6, r3
 800a6d2:	ec45 4b11 	vmov	d1, r4, r5
 800a6d6:	dce1      	bgt.n	800a69c <scalbn+0x6c>
 800a6d8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a700 <scalbn+0xd0>
 800a6dc:	f000 f81e 	bl	800a71c <copysign>
 800a6e0:	a307      	add	r3, pc, #28	; (adr r3, 800a700 <scalbn+0xd0>)
 800a6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e6:	e7e0      	b.n	800a6aa <scalbn+0x7a>
 800a6e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a6ec:	3236      	adds	r2, #54	; 0x36
 800a6ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a6f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	4b06      	ldr	r3, [pc, #24]	; (800a718 <scalbn+0xe8>)
 800a6fe:	e7b2      	b.n	800a666 <scalbn+0x36>
 800a700:	c2f8f359 	.word	0xc2f8f359
 800a704:	01a56e1f 	.word	0x01a56e1f
 800a708:	8800759c 	.word	0x8800759c
 800a70c:	7e37e43c 	.word	0x7e37e43c
 800a710:	43500000 	.word	0x43500000
 800a714:	ffff3cb0 	.word	0xffff3cb0
 800a718:	3c900000 	.word	0x3c900000

0800a71c <copysign>:
 800a71c:	ec51 0b10 	vmov	r0, r1, d0
 800a720:	ee11 0a90 	vmov	r0, s3
 800a724:	ee10 2a10 	vmov	r2, s0
 800a728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a72c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a730:	ea41 0300 	orr.w	r3, r1, r0
 800a734:	ec43 2b10 	vmov	d0, r2, r3
 800a738:	4770      	bx	lr
	...

0800a73c <_init>:
 800a73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73e:	bf00      	nop
 800a740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a742:	bc08      	pop	{r3}
 800a744:	469e      	mov	lr, r3
 800a746:	4770      	bx	lr

0800a748 <_fini>:
 800a748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74a:	bf00      	nop
 800a74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a74e:	bc08      	pop	{r3}
 800a750:	469e      	mov	lr, r3
 800a752:	4770      	bx	lr
